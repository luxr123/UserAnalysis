/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.tracker.api.thrift.data;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class DataService {

  /**
   * 网站统计数据服务
   */
  public interface Iface {

    /**
     * 获取{网站域名->id}对应信息
     */
    public List<FilterEntry> getWebSite() throws org.apache.thrift.TException;

    /**
     * 获取搜索引擎信息
     */
    public List<FilterEntry> getSearchEngineData() throws org.apache.thrift.TException;

    /**
     * 获取{seId + searchType -> 站内搜索引擎名 }对应信息， webId为网站id
     * 
     * @param webId
     */
    public List<SEFilterEntry> getSiteSEAndType(int webId) throws org.apache.thrift.TException;

    /**
     * 获取搜索引擎对应的搜索条件
     * 
     * @param seId
     * @param seType
     */
    public List<FilterEntry> getSearchCondition(int seId, int seType) throws org.apache.thrift.TException;

    /**
     * 获取{用户类型->id}对应信息
     * 
     * @param webId
     */
    public List<FilterEntry> getUserType(int webId) throws org.apache.thrift.TException;

    /**
     * 获取{登录用户类型->id}对应信息
     * 
     * @param webId
     */
    public List<FilterEntry> getLoginUserType(int webId) throws org.apache.thrift.TException;

    /**
     * 获取{访问类型->id}对应信息
     * 
     * @param webId
     */
    public List<FilterEntry> getVisitType(int webId) throws org.apache.thrift.TException;

    /**
     * 获取搜索类型
     * 
     * @param webId
     * @param seId
     * @param searchType
     */
    public int getVisitTypeOfSearch(int webId, int seId, int searchType) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void getWebSite(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getSearchEngineData(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getSiteSEAndType(int webId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getSearchCondition(int seId, int seType, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getUserType(int webId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getLoginUserType(int webId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getVisitType(int webId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getVisitTypeOfSearch(int webId, int seId, int searchType, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public List<FilterEntry> getWebSite() throws org.apache.thrift.TException
    {
      send_getWebSite();
      return recv_getWebSite();
    }

    public void send_getWebSite() throws org.apache.thrift.TException
    {
      getWebSite_args args = new getWebSite_args();
      sendBase("getWebSite", args);
    }

    public List<FilterEntry> recv_getWebSite() throws org.apache.thrift.TException
    {
      getWebSite_result result = new getWebSite_result();
      receiveBase(result, "getWebSite");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getWebSite failed: unknown result");
    }

    public List<FilterEntry> getSearchEngineData() throws org.apache.thrift.TException
    {
      send_getSearchEngineData();
      return recv_getSearchEngineData();
    }

    public void send_getSearchEngineData() throws org.apache.thrift.TException
    {
      getSearchEngineData_args args = new getSearchEngineData_args();
      sendBase("getSearchEngineData", args);
    }

    public List<FilterEntry> recv_getSearchEngineData() throws org.apache.thrift.TException
    {
      getSearchEngineData_result result = new getSearchEngineData_result();
      receiveBase(result, "getSearchEngineData");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getSearchEngineData failed: unknown result");
    }

    public List<SEFilterEntry> getSiteSEAndType(int webId) throws org.apache.thrift.TException
    {
      send_getSiteSEAndType(webId);
      return recv_getSiteSEAndType();
    }

    public void send_getSiteSEAndType(int webId) throws org.apache.thrift.TException
    {
      getSiteSEAndType_args args = new getSiteSEAndType_args();
      args.setWebId(webId);
      sendBase("getSiteSEAndType", args);
    }

    public List<SEFilterEntry> recv_getSiteSEAndType() throws org.apache.thrift.TException
    {
      getSiteSEAndType_result result = new getSiteSEAndType_result();
      receiveBase(result, "getSiteSEAndType");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getSiteSEAndType failed: unknown result");
    }

    public List<FilterEntry> getSearchCondition(int seId, int seType) throws org.apache.thrift.TException
    {
      send_getSearchCondition(seId, seType);
      return recv_getSearchCondition();
    }

    public void send_getSearchCondition(int seId, int seType) throws org.apache.thrift.TException
    {
      getSearchCondition_args args = new getSearchCondition_args();
      args.setSeId(seId);
      args.setSeType(seType);
      sendBase("getSearchCondition", args);
    }

    public List<FilterEntry> recv_getSearchCondition() throws org.apache.thrift.TException
    {
      getSearchCondition_result result = new getSearchCondition_result();
      receiveBase(result, "getSearchCondition");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getSearchCondition failed: unknown result");
    }

    public List<FilterEntry> getUserType(int webId) throws org.apache.thrift.TException
    {
      send_getUserType(webId);
      return recv_getUserType();
    }

    public void send_getUserType(int webId) throws org.apache.thrift.TException
    {
      getUserType_args args = new getUserType_args();
      args.setWebId(webId);
      sendBase("getUserType", args);
    }

    public List<FilterEntry> recv_getUserType() throws org.apache.thrift.TException
    {
      getUserType_result result = new getUserType_result();
      receiveBase(result, "getUserType");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getUserType failed: unknown result");
    }

    public List<FilterEntry> getLoginUserType(int webId) throws org.apache.thrift.TException
    {
      send_getLoginUserType(webId);
      return recv_getLoginUserType();
    }

    public void send_getLoginUserType(int webId) throws org.apache.thrift.TException
    {
      getLoginUserType_args args = new getLoginUserType_args();
      args.setWebId(webId);
      sendBase("getLoginUserType", args);
    }

    public List<FilterEntry> recv_getLoginUserType() throws org.apache.thrift.TException
    {
      getLoginUserType_result result = new getLoginUserType_result();
      receiveBase(result, "getLoginUserType");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getLoginUserType failed: unknown result");
    }

    public List<FilterEntry> getVisitType(int webId) throws org.apache.thrift.TException
    {
      send_getVisitType(webId);
      return recv_getVisitType();
    }

    public void send_getVisitType(int webId) throws org.apache.thrift.TException
    {
      getVisitType_args args = new getVisitType_args();
      args.setWebId(webId);
      sendBase("getVisitType", args);
    }

    public List<FilterEntry> recv_getVisitType() throws org.apache.thrift.TException
    {
      getVisitType_result result = new getVisitType_result();
      receiveBase(result, "getVisitType");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getVisitType failed: unknown result");
    }

    public int getVisitTypeOfSearch(int webId, int seId, int searchType) throws org.apache.thrift.TException
    {
      send_getVisitTypeOfSearch(webId, seId, searchType);
      return recv_getVisitTypeOfSearch();
    }

    public void send_getVisitTypeOfSearch(int webId, int seId, int searchType) throws org.apache.thrift.TException
    {
      getVisitTypeOfSearch_args args = new getVisitTypeOfSearch_args();
      args.setWebId(webId);
      args.setSeId(seId);
      args.setSearchType(searchType);
      sendBase("getVisitTypeOfSearch", args);
    }

    public int recv_getVisitTypeOfSearch() throws org.apache.thrift.TException
    {
      getVisitTypeOfSearch_result result = new getVisitTypeOfSearch_result();
      receiveBase(result, "getVisitTypeOfSearch");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getVisitTypeOfSearch failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void getWebSite(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getWebSite_call method_call = new getWebSite_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getWebSite_call extends org.apache.thrift.async.TAsyncMethodCall {
      public getWebSite_call(org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getWebSite", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getWebSite_args args = new getWebSite_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<FilterEntry> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getWebSite();
      }
    }

    public void getSearchEngineData(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getSearchEngineData_call method_call = new getSearchEngineData_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getSearchEngineData_call extends org.apache.thrift.async.TAsyncMethodCall {
      public getSearchEngineData_call(org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getSearchEngineData", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getSearchEngineData_args args = new getSearchEngineData_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<FilterEntry> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getSearchEngineData();
      }
    }

    public void getSiteSEAndType(int webId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getSiteSEAndType_call method_call = new getSiteSEAndType_call(webId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getSiteSEAndType_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int webId;
      public getSiteSEAndType_call(int webId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.webId = webId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getSiteSEAndType", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getSiteSEAndType_args args = new getSiteSEAndType_args();
        args.setWebId(webId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<SEFilterEntry> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getSiteSEAndType();
      }
    }

    public void getSearchCondition(int seId, int seType, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getSearchCondition_call method_call = new getSearchCondition_call(seId, seType, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getSearchCondition_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int seId;
      private int seType;
      public getSearchCondition_call(int seId, int seType, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.seId = seId;
        this.seType = seType;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getSearchCondition", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getSearchCondition_args args = new getSearchCondition_args();
        args.setSeId(seId);
        args.setSeType(seType);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<FilterEntry> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getSearchCondition();
      }
    }

    public void getUserType(int webId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getUserType_call method_call = new getUserType_call(webId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getUserType_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int webId;
      public getUserType_call(int webId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.webId = webId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getUserType", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getUserType_args args = new getUserType_args();
        args.setWebId(webId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<FilterEntry> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getUserType();
      }
    }

    public void getLoginUserType(int webId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getLoginUserType_call method_call = new getLoginUserType_call(webId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getLoginUserType_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int webId;
      public getLoginUserType_call(int webId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.webId = webId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getLoginUserType", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getLoginUserType_args args = new getLoginUserType_args();
        args.setWebId(webId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<FilterEntry> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getLoginUserType();
      }
    }

    public void getVisitType(int webId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getVisitType_call method_call = new getVisitType_call(webId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getVisitType_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int webId;
      public getVisitType_call(int webId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.webId = webId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getVisitType", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getVisitType_args args = new getVisitType_args();
        args.setWebId(webId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<FilterEntry> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getVisitType();
      }
    }

    public void getVisitTypeOfSearch(int webId, int seId, int searchType, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getVisitTypeOfSearch_call method_call = new getVisitTypeOfSearch_call(webId, seId, searchType, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getVisitTypeOfSearch_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int webId;
      private int seId;
      private int searchType;
      public getVisitTypeOfSearch_call(int webId, int seId, int searchType, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.webId = webId;
        this.seId = seId;
        this.searchType = searchType;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getVisitTypeOfSearch", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getVisitTypeOfSearch_args args = new getVisitTypeOfSearch_args();
        args.setWebId(webId);
        args.setSeId(seId);
        args.setSearchType(searchType);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getVisitTypeOfSearch();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("getWebSite", new getWebSite());
      processMap.put("getSearchEngineData", new getSearchEngineData());
      processMap.put("getSiteSEAndType", new getSiteSEAndType());
      processMap.put("getSearchCondition", new getSearchCondition());
      processMap.put("getUserType", new getUserType());
      processMap.put("getLoginUserType", new getLoginUserType());
      processMap.put("getVisitType", new getVisitType());
      processMap.put("getVisitTypeOfSearch", new getVisitTypeOfSearch());
      return processMap;
    }

    public static class getWebSite<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getWebSite_args> {
      public getWebSite() {
        super("getWebSite");
      }

      public getWebSite_args getEmptyArgsInstance() {
        return new getWebSite_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getWebSite_result getResult(I iface, getWebSite_args args) throws org.apache.thrift.TException {
        getWebSite_result result = new getWebSite_result();
        result.success = iface.getWebSite();
        return result;
      }
    }

    public static class getSearchEngineData<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getSearchEngineData_args> {
      public getSearchEngineData() {
        super("getSearchEngineData");
      }

      public getSearchEngineData_args getEmptyArgsInstance() {
        return new getSearchEngineData_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getSearchEngineData_result getResult(I iface, getSearchEngineData_args args) throws org.apache.thrift.TException {
        getSearchEngineData_result result = new getSearchEngineData_result();
        result.success = iface.getSearchEngineData();
        return result;
      }
    }

    public static class getSiteSEAndType<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getSiteSEAndType_args> {
      public getSiteSEAndType() {
        super("getSiteSEAndType");
      }

      public getSiteSEAndType_args getEmptyArgsInstance() {
        return new getSiteSEAndType_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getSiteSEAndType_result getResult(I iface, getSiteSEAndType_args args) throws org.apache.thrift.TException {
        getSiteSEAndType_result result = new getSiteSEAndType_result();
        result.success = iface.getSiteSEAndType(args.webId);
        return result;
      }
    }

    public static class getSearchCondition<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getSearchCondition_args> {
      public getSearchCondition() {
        super("getSearchCondition");
      }

      public getSearchCondition_args getEmptyArgsInstance() {
        return new getSearchCondition_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getSearchCondition_result getResult(I iface, getSearchCondition_args args) throws org.apache.thrift.TException {
        getSearchCondition_result result = new getSearchCondition_result();
        result.success = iface.getSearchCondition(args.seId, args.seType);
        return result;
      }
    }

    public static class getUserType<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getUserType_args> {
      public getUserType() {
        super("getUserType");
      }

      public getUserType_args getEmptyArgsInstance() {
        return new getUserType_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getUserType_result getResult(I iface, getUserType_args args) throws org.apache.thrift.TException {
        getUserType_result result = new getUserType_result();
        result.success = iface.getUserType(args.webId);
        return result;
      }
    }

    public static class getLoginUserType<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getLoginUserType_args> {
      public getLoginUserType() {
        super("getLoginUserType");
      }

      public getLoginUserType_args getEmptyArgsInstance() {
        return new getLoginUserType_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getLoginUserType_result getResult(I iface, getLoginUserType_args args) throws org.apache.thrift.TException {
        getLoginUserType_result result = new getLoginUserType_result();
        result.success = iface.getLoginUserType(args.webId);
        return result;
      }
    }

    public static class getVisitType<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getVisitType_args> {
      public getVisitType() {
        super("getVisitType");
      }

      public getVisitType_args getEmptyArgsInstance() {
        return new getVisitType_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getVisitType_result getResult(I iface, getVisitType_args args) throws org.apache.thrift.TException {
        getVisitType_result result = new getVisitType_result();
        result.success = iface.getVisitType(args.webId);
        return result;
      }
    }

    public static class getVisitTypeOfSearch<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getVisitTypeOfSearch_args> {
      public getVisitTypeOfSearch() {
        super("getVisitTypeOfSearch");
      }

      public getVisitTypeOfSearch_args getEmptyArgsInstance() {
        return new getVisitTypeOfSearch_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getVisitTypeOfSearch_result getResult(I iface, getVisitTypeOfSearch_args args) throws org.apache.thrift.TException {
        getVisitTypeOfSearch_result result = new getVisitTypeOfSearch_result();
        result.success = iface.getVisitTypeOfSearch(args.webId, args.seId, args.searchType);
        result.setSuccessIsSet(true);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("getWebSite", new getWebSite());
      processMap.put("getSearchEngineData", new getSearchEngineData());
      processMap.put("getSiteSEAndType", new getSiteSEAndType());
      processMap.put("getSearchCondition", new getSearchCondition());
      processMap.put("getUserType", new getUserType());
      processMap.put("getLoginUserType", new getLoginUserType());
      processMap.put("getVisitType", new getVisitType());
      processMap.put("getVisitTypeOfSearch", new getVisitTypeOfSearch());
      return processMap;
    }

    public static class getWebSite<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getWebSite_args, List<FilterEntry>> {
      public getWebSite() {
        super("getWebSite");
      }

      public getWebSite_args getEmptyArgsInstance() {
        return new getWebSite_args();
      }

      public AsyncMethodCallback<List<FilterEntry>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<FilterEntry>>() { 
          public void onComplete(List<FilterEntry> o) {
            getWebSite_result result = new getWebSite_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getWebSite_result result = new getWebSite_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getWebSite_args args, org.apache.thrift.async.AsyncMethodCallback<List<FilterEntry>> resultHandler) throws TException {
        iface.getWebSite(resultHandler);
      }
    }

    public static class getSearchEngineData<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getSearchEngineData_args, List<FilterEntry>> {
      public getSearchEngineData() {
        super("getSearchEngineData");
      }

      public getSearchEngineData_args getEmptyArgsInstance() {
        return new getSearchEngineData_args();
      }

      public AsyncMethodCallback<List<FilterEntry>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<FilterEntry>>() { 
          public void onComplete(List<FilterEntry> o) {
            getSearchEngineData_result result = new getSearchEngineData_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getSearchEngineData_result result = new getSearchEngineData_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getSearchEngineData_args args, org.apache.thrift.async.AsyncMethodCallback<List<FilterEntry>> resultHandler) throws TException {
        iface.getSearchEngineData(resultHandler);
      }
    }

    public static class getSiteSEAndType<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getSiteSEAndType_args, List<SEFilterEntry>> {
      public getSiteSEAndType() {
        super("getSiteSEAndType");
      }

      public getSiteSEAndType_args getEmptyArgsInstance() {
        return new getSiteSEAndType_args();
      }

      public AsyncMethodCallback<List<SEFilterEntry>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<SEFilterEntry>>() { 
          public void onComplete(List<SEFilterEntry> o) {
            getSiteSEAndType_result result = new getSiteSEAndType_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getSiteSEAndType_result result = new getSiteSEAndType_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getSiteSEAndType_args args, org.apache.thrift.async.AsyncMethodCallback<List<SEFilterEntry>> resultHandler) throws TException {
        iface.getSiteSEAndType(args.webId,resultHandler);
      }
    }

    public static class getSearchCondition<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getSearchCondition_args, List<FilterEntry>> {
      public getSearchCondition() {
        super("getSearchCondition");
      }

      public getSearchCondition_args getEmptyArgsInstance() {
        return new getSearchCondition_args();
      }

      public AsyncMethodCallback<List<FilterEntry>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<FilterEntry>>() { 
          public void onComplete(List<FilterEntry> o) {
            getSearchCondition_result result = new getSearchCondition_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getSearchCondition_result result = new getSearchCondition_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getSearchCondition_args args, org.apache.thrift.async.AsyncMethodCallback<List<FilterEntry>> resultHandler) throws TException {
        iface.getSearchCondition(args.seId, args.seType,resultHandler);
      }
    }

    public static class getUserType<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getUserType_args, List<FilterEntry>> {
      public getUserType() {
        super("getUserType");
      }

      public getUserType_args getEmptyArgsInstance() {
        return new getUserType_args();
      }

      public AsyncMethodCallback<List<FilterEntry>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<FilterEntry>>() { 
          public void onComplete(List<FilterEntry> o) {
            getUserType_result result = new getUserType_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getUserType_result result = new getUserType_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getUserType_args args, org.apache.thrift.async.AsyncMethodCallback<List<FilterEntry>> resultHandler) throws TException {
        iface.getUserType(args.webId,resultHandler);
      }
    }

    public static class getLoginUserType<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getLoginUserType_args, List<FilterEntry>> {
      public getLoginUserType() {
        super("getLoginUserType");
      }

      public getLoginUserType_args getEmptyArgsInstance() {
        return new getLoginUserType_args();
      }

      public AsyncMethodCallback<List<FilterEntry>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<FilterEntry>>() { 
          public void onComplete(List<FilterEntry> o) {
            getLoginUserType_result result = new getLoginUserType_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getLoginUserType_result result = new getLoginUserType_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getLoginUserType_args args, org.apache.thrift.async.AsyncMethodCallback<List<FilterEntry>> resultHandler) throws TException {
        iface.getLoginUserType(args.webId,resultHandler);
      }
    }

    public static class getVisitType<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getVisitType_args, List<FilterEntry>> {
      public getVisitType() {
        super("getVisitType");
      }

      public getVisitType_args getEmptyArgsInstance() {
        return new getVisitType_args();
      }

      public AsyncMethodCallback<List<FilterEntry>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<FilterEntry>>() { 
          public void onComplete(List<FilterEntry> o) {
            getVisitType_result result = new getVisitType_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getVisitType_result result = new getVisitType_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getVisitType_args args, org.apache.thrift.async.AsyncMethodCallback<List<FilterEntry>> resultHandler) throws TException {
        iface.getVisitType(args.webId,resultHandler);
      }
    }

    public static class getVisitTypeOfSearch<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getVisitTypeOfSearch_args, Integer> {
      public getVisitTypeOfSearch() {
        super("getVisitTypeOfSearch");
      }

      public getVisitTypeOfSearch_args getEmptyArgsInstance() {
        return new getVisitTypeOfSearch_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            getVisitTypeOfSearch_result result = new getVisitTypeOfSearch_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getVisitTypeOfSearch_result result = new getVisitTypeOfSearch_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getVisitTypeOfSearch_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.getVisitTypeOfSearch(args.webId, args.seId, args.searchType,resultHandler);
      }
    }

  }

  public static class getWebSite_args implements org.apache.thrift.TBase<getWebSite_args, getWebSite_args._Fields>, java.io.Serializable, Cloneable, Comparable<getWebSite_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getWebSite_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getWebSite_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getWebSite_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getWebSite_args.class, metaDataMap);
    }

    public getWebSite_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getWebSite_args(getWebSite_args other) {
    }

    public getWebSite_args deepCopy() {
      return new getWebSite_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getWebSite_args)
        return this.equals((getWebSite_args)that);
      return false;
    }

    public boolean equals(getWebSite_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getWebSite_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getWebSite_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getWebSite_argsStandardSchemeFactory implements SchemeFactory {
      public getWebSite_argsStandardScheme getScheme() {
        return new getWebSite_argsStandardScheme();
      }
    }

    private static class getWebSite_argsStandardScheme extends StandardScheme<getWebSite_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getWebSite_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getWebSite_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getWebSite_argsTupleSchemeFactory implements SchemeFactory {
      public getWebSite_argsTupleScheme getScheme() {
        return new getWebSite_argsTupleScheme();
      }
    }

    private static class getWebSite_argsTupleScheme extends TupleScheme<getWebSite_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getWebSite_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getWebSite_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class getWebSite_result implements org.apache.thrift.TBase<getWebSite_result, getWebSite_result._Fields>, java.io.Serializable, Cloneable, Comparable<getWebSite_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getWebSite_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getWebSite_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getWebSite_resultTupleSchemeFactory());
    }

    public List<FilterEntry> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, FilterEntry.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getWebSite_result.class, metaDataMap);
    }

    public getWebSite_result() {
    }

    public getWebSite_result(
      List<FilterEntry> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getWebSite_result(getWebSite_result other) {
      if (other.isSetSuccess()) {
        List<FilterEntry> __this__success = new ArrayList<FilterEntry>(other.success.size());
        for (FilterEntry other_element : other.success) {
          __this__success.add(new FilterEntry(other_element));
        }
        this.success = __this__success;
      }
    }

    public getWebSite_result deepCopy() {
      return new getWebSite_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<FilterEntry> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(FilterEntry elem) {
      if (this.success == null) {
        this.success = new ArrayList<FilterEntry>();
      }
      this.success.add(elem);
    }

    public List<FilterEntry> getSuccess() {
      return this.success;
    }

    public getWebSite_result setSuccess(List<FilterEntry> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<FilterEntry>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getWebSite_result)
        return this.equals((getWebSite_result)that);
      return false;
    }

    public boolean equals(getWebSite_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getWebSite_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getWebSite_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getWebSite_resultStandardSchemeFactory implements SchemeFactory {
      public getWebSite_resultStandardScheme getScheme() {
        return new getWebSite_resultStandardScheme();
      }
    }

    private static class getWebSite_resultStandardScheme extends StandardScheme<getWebSite_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getWebSite_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                  struct.success = new ArrayList<FilterEntry>(_list0.size);
                  for (int _i1 = 0; _i1 < _list0.size; ++_i1)
                  {
                    FilterEntry _elem2;
                    _elem2 = new FilterEntry();
                    _elem2.read(iprot);
                    struct.success.add(_elem2);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getWebSite_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (FilterEntry _iter3 : struct.success)
            {
              _iter3.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getWebSite_resultTupleSchemeFactory implements SchemeFactory {
      public getWebSite_resultTupleScheme getScheme() {
        return new getWebSite_resultTupleScheme();
      }
    }

    private static class getWebSite_resultTupleScheme extends TupleScheme<getWebSite_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getWebSite_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (FilterEntry _iter4 : struct.success)
            {
              _iter4.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getWebSite_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<FilterEntry>(_list5.size);
            for (int _i6 = 0; _i6 < _list5.size; ++_i6)
            {
              FilterEntry _elem7;
              _elem7 = new FilterEntry();
              _elem7.read(iprot);
              struct.success.add(_elem7);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getSearchEngineData_args implements org.apache.thrift.TBase<getSearchEngineData_args, getSearchEngineData_args._Fields>, java.io.Serializable, Cloneable, Comparable<getSearchEngineData_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getSearchEngineData_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getSearchEngineData_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getSearchEngineData_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getSearchEngineData_args.class, metaDataMap);
    }

    public getSearchEngineData_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSearchEngineData_args(getSearchEngineData_args other) {
    }

    public getSearchEngineData_args deepCopy() {
      return new getSearchEngineData_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getSearchEngineData_args)
        return this.equals((getSearchEngineData_args)that);
      return false;
    }

    public boolean equals(getSearchEngineData_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getSearchEngineData_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getSearchEngineData_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getSearchEngineData_argsStandardSchemeFactory implements SchemeFactory {
      public getSearchEngineData_argsStandardScheme getScheme() {
        return new getSearchEngineData_argsStandardScheme();
      }
    }

    private static class getSearchEngineData_argsStandardScheme extends StandardScheme<getSearchEngineData_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getSearchEngineData_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getSearchEngineData_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getSearchEngineData_argsTupleSchemeFactory implements SchemeFactory {
      public getSearchEngineData_argsTupleScheme getScheme() {
        return new getSearchEngineData_argsTupleScheme();
      }
    }

    private static class getSearchEngineData_argsTupleScheme extends TupleScheme<getSearchEngineData_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getSearchEngineData_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getSearchEngineData_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class getSearchEngineData_result implements org.apache.thrift.TBase<getSearchEngineData_result, getSearchEngineData_result._Fields>, java.io.Serializable, Cloneable, Comparable<getSearchEngineData_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getSearchEngineData_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getSearchEngineData_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getSearchEngineData_resultTupleSchemeFactory());
    }

    public List<FilterEntry> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, FilterEntry.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getSearchEngineData_result.class, metaDataMap);
    }

    public getSearchEngineData_result() {
    }

    public getSearchEngineData_result(
      List<FilterEntry> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSearchEngineData_result(getSearchEngineData_result other) {
      if (other.isSetSuccess()) {
        List<FilterEntry> __this__success = new ArrayList<FilterEntry>(other.success.size());
        for (FilterEntry other_element : other.success) {
          __this__success.add(new FilterEntry(other_element));
        }
        this.success = __this__success;
      }
    }

    public getSearchEngineData_result deepCopy() {
      return new getSearchEngineData_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<FilterEntry> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(FilterEntry elem) {
      if (this.success == null) {
        this.success = new ArrayList<FilterEntry>();
      }
      this.success.add(elem);
    }

    public List<FilterEntry> getSuccess() {
      return this.success;
    }

    public getSearchEngineData_result setSuccess(List<FilterEntry> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<FilterEntry>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getSearchEngineData_result)
        return this.equals((getSearchEngineData_result)that);
      return false;
    }

    public boolean equals(getSearchEngineData_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getSearchEngineData_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getSearchEngineData_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getSearchEngineData_resultStandardSchemeFactory implements SchemeFactory {
      public getSearchEngineData_resultStandardScheme getScheme() {
        return new getSearchEngineData_resultStandardScheme();
      }
    }

    private static class getSearchEngineData_resultStandardScheme extends StandardScheme<getSearchEngineData_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getSearchEngineData_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                  struct.success = new ArrayList<FilterEntry>(_list8.size);
                  for (int _i9 = 0; _i9 < _list8.size; ++_i9)
                  {
                    FilterEntry _elem10;
                    _elem10 = new FilterEntry();
                    _elem10.read(iprot);
                    struct.success.add(_elem10);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getSearchEngineData_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (FilterEntry _iter11 : struct.success)
            {
              _iter11.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getSearchEngineData_resultTupleSchemeFactory implements SchemeFactory {
      public getSearchEngineData_resultTupleScheme getScheme() {
        return new getSearchEngineData_resultTupleScheme();
      }
    }

    private static class getSearchEngineData_resultTupleScheme extends TupleScheme<getSearchEngineData_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getSearchEngineData_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (FilterEntry _iter12 : struct.success)
            {
              _iter12.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getSearchEngineData_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<FilterEntry>(_list13.size);
            for (int _i14 = 0; _i14 < _list13.size; ++_i14)
            {
              FilterEntry _elem15;
              _elem15 = new FilterEntry();
              _elem15.read(iprot);
              struct.success.add(_elem15);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getSiteSEAndType_args implements org.apache.thrift.TBase<getSiteSEAndType_args, getSiteSEAndType_args._Fields>, java.io.Serializable, Cloneable, Comparable<getSiteSEAndType_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getSiteSEAndType_args");

    private static final org.apache.thrift.protocol.TField WEB_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("webId", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getSiteSEAndType_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getSiteSEAndType_argsTupleSchemeFactory());
    }

    public int webId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      WEB_ID((short)1, "webId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // WEB_ID
            return WEB_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __WEBID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.WEB_ID, new org.apache.thrift.meta_data.FieldMetaData("webId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getSiteSEAndType_args.class, metaDataMap);
    }

    public getSiteSEAndType_args() {
    }

    public getSiteSEAndType_args(
      int webId)
    {
      this();
      this.webId = webId;
      setWebIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSiteSEAndType_args(getSiteSEAndType_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.webId = other.webId;
    }

    public getSiteSEAndType_args deepCopy() {
      return new getSiteSEAndType_args(this);
    }

    @Override
    public void clear() {
      setWebIdIsSet(false);
      this.webId = 0;
    }

    public int getWebId() {
      return this.webId;
    }

    public getSiteSEAndType_args setWebId(int webId) {
      this.webId = webId;
      setWebIdIsSet(true);
      return this;
    }

    public void unsetWebId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __WEBID_ISSET_ID);
    }

    /** Returns true if field webId is set (has been assigned a value) and false otherwise */
    public boolean isSetWebId() {
      return EncodingUtils.testBit(__isset_bitfield, __WEBID_ISSET_ID);
    }

    public void setWebIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __WEBID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case WEB_ID:
        if (value == null) {
          unsetWebId();
        } else {
          setWebId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case WEB_ID:
        return Integer.valueOf(getWebId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case WEB_ID:
        return isSetWebId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getSiteSEAndType_args)
        return this.equals((getSiteSEAndType_args)that);
      return false;
    }

    public boolean equals(getSiteSEAndType_args that) {
      if (that == null)
        return false;

      boolean this_present_webId = true;
      boolean that_present_webId = true;
      if (this_present_webId || that_present_webId) {
        if (!(this_present_webId && that_present_webId))
          return false;
        if (this.webId != that.webId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getSiteSEAndType_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetWebId()).compareTo(other.isSetWebId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetWebId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.webId, other.webId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getSiteSEAndType_args(");
      boolean first = true;

      sb.append("webId:");
      sb.append(this.webId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getSiteSEAndType_argsStandardSchemeFactory implements SchemeFactory {
      public getSiteSEAndType_argsStandardScheme getScheme() {
        return new getSiteSEAndType_argsStandardScheme();
      }
    }

    private static class getSiteSEAndType_argsStandardScheme extends StandardScheme<getSiteSEAndType_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getSiteSEAndType_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // WEB_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.webId = iprot.readI32();
                struct.setWebIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getSiteSEAndType_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(WEB_ID_FIELD_DESC);
        oprot.writeI32(struct.webId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getSiteSEAndType_argsTupleSchemeFactory implements SchemeFactory {
      public getSiteSEAndType_argsTupleScheme getScheme() {
        return new getSiteSEAndType_argsTupleScheme();
      }
    }

    private static class getSiteSEAndType_argsTupleScheme extends TupleScheme<getSiteSEAndType_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getSiteSEAndType_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetWebId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetWebId()) {
          oprot.writeI32(struct.webId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getSiteSEAndType_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.webId = iprot.readI32();
          struct.setWebIdIsSet(true);
        }
      }
    }

  }

  public static class getSiteSEAndType_result implements org.apache.thrift.TBase<getSiteSEAndType_result, getSiteSEAndType_result._Fields>, java.io.Serializable, Cloneable, Comparable<getSiteSEAndType_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getSiteSEAndType_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getSiteSEAndType_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getSiteSEAndType_resultTupleSchemeFactory());
    }

    public List<SEFilterEntry> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SEFilterEntry.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getSiteSEAndType_result.class, metaDataMap);
    }

    public getSiteSEAndType_result() {
    }

    public getSiteSEAndType_result(
      List<SEFilterEntry> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSiteSEAndType_result(getSiteSEAndType_result other) {
      if (other.isSetSuccess()) {
        List<SEFilterEntry> __this__success = new ArrayList<SEFilterEntry>(other.success.size());
        for (SEFilterEntry other_element : other.success) {
          __this__success.add(new SEFilterEntry(other_element));
        }
        this.success = __this__success;
      }
    }

    public getSiteSEAndType_result deepCopy() {
      return new getSiteSEAndType_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<SEFilterEntry> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(SEFilterEntry elem) {
      if (this.success == null) {
        this.success = new ArrayList<SEFilterEntry>();
      }
      this.success.add(elem);
    }

    public List<SEFilterEntry> getSuccess() {
      return this.success;
    }

    public getSiteSEAndType_result setSuccess(List<SEFilterEntry> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<SEFilterEntry>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getSiteSEAndType_result)
        return this.equals((getSiteSEAndType_result)that);
      return false;
    }

    public boolean equals(getSiteSEAndType_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getSiteSEAndType_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getSiteSEAndType_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getSiteSEAndType_resultStandardSchemeFactory implements SchemeFactory {
      public getSiteSEAndType_resultStandardScheme getScheme() {
        return new getSiteSEAndType_resultStandardScheme();
      }
    }

    private static class getSiteSEAndType_resultStandardScheme extends StandardScheme<getSiteSEAndType_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getSiteSEAndType_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list16 = iprot.readListBegin();
                  struct.success = new ArrayList<SEFilterEntry>(_list16.size);
                  for (int _i17 = 0; _i17 < _list16.size; ++_i17)
                  {
                    SEFilterEntry _elem18;
                    _elem18 = new SEFilterEntry();
                    _elem18.read(iprot);
                    struct.success.add(_elem18);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getSiteSEAndType_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (SEFilterEntry _iter19 : struct.success)
            {
              _iter19.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getSiteSEAndType_resultTupleSchemeFactory implements SchemeFactory {
      public getSiteSEAndType_resultTupleScheme getScheme() {
        return new getSiteSEAndType_resultTupleScheme();
      }
    }

    private static class getSiteSEAndType_resultTupleScheme extends TupleScheme<getSiteSEAndType_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getSiteSEAndType_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (SEFilterEntry _iter20 : struct.success)
            {
              _iter20.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getSiteSEAndType_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list21 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<SEFilterEntry>(_list21.size);
            for (int _i22 = 0; _i22 < _list21.size; ++_i22)
            {
              SEFilterEntry _elem23;
              _elem23 = new SEFilterEntry();
              _elem23.read(iprot);
              struct.success.add(_elem23);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getSearchCondition_args implements org.apache.thrift.TBase<getSearchCondition_args, getSearchCondition_args._Fields>, java.io.Serializable, Cloneable, Comparable<getSearchCondition_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getSearchCondition_args");

    private static final org.apache.thrift.protocol.TField SE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("seId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField SE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("seType", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getSearchCondition_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getSearchCondition_argsTupleSchemeFactory());
    }

    public int seId; // required
    public int seType; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SE_ID((short)1, "seId"),
      SE_TYPE((short)2, "seType");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SE_ID
            return SE_ID;
          case 2: // SE_TYPE
            return SE_TYPE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SEID_ISSET_ID = 0;
    private static final int __SETYPE_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SE_ID, new org.apache.thrift.meta_data.FieldMetaData("seId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.SE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("seType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getSearchCondition_args.class, metaDataMap);
    }

    public getSearchCondition_args() {
    }

    public getSearchCondition_args(
      int seId,
      int seType)
    {
      this();
      this.seId = seId;
      setSeIdIsSet(true);
      this.seType = seType;
      setSeTypeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSearchCondition_args(getSearchCondition_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.seId = other.seId;
      this.seType = other.seType;
    }

    public getSearchCondition_args deepCopy() {
      return new getSearchCondition_args(this);
    }

    @Override
    public void clear() {
      setSeIdIsSet(false);
      this.seId = 0;
      setSeTypeIsSet(false);
      this.seType = 0;
    }

    public int getSeId() {
      return this.seId;
    }

    public getSearchCondition_args setSeId(int seId) {
      this.seId = seId;
      setSeIdIsSet(true);
      return this;
    }

    public void unsetSeId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SEID_ISSET_ID);
    }

    /** Returns true if field seId is set (has been assigned a value) and false otherwise */
    public boolean isSetSeId() {
      return EncodingUtils.testBit(__isset_bitfield, __SEID_ISSET_ID);
    }

    public void setSeIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SEID_ISSET_ID, value);
    }

    public int getSeType() {
      return this.seType;
    }

    public getSearchCondition_args setSeType(int seType) {
      this.seType = seType;
      setSeTypeIsSet(true);
      return this;
    }

    public void unsetSeType() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SETYPE_ISSET_ID);
    }

    /** Returns true if field seType is set (has been assigned a value) and false otherwise */
    public boolean isSetSeType() {
      return EncodingUtils.testBit(__isset_bitfield, __SETYPE_ISSET_ID);
    }

    public void setSeTypeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SETYPE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SE_ID:
        if (value == null) {
          unsetSeId();
        } else {
          setSeId((Integer)value);
        }
        break;

      case SE_TYPE:
        if (value == null) {
          unsetSeType();
        } else {
          setSeType((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SE_ID:
        return Integer.valueOf(getSeId());

      case SE_TYPE:
        return Integer.valueOf(getSeType());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SE_ID:
        return isSetSeId();
      case SE_TYPE:
        return isSetSeType();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getSearchCondition_args)
        return this.equals((getSearchCondition_args)that);
      return false;
    }

    public boolean equals(getSearchCondition_args that) {
      if (that == null)
        return false;

      boolean this_present_seId = true;
      boolean that_present_seId = true;
      if (this_present_seId || that_present_seId) {
        if (!(this_present_seId && that_present_seId))
          return false;
        if (this.seId != that.seId)
          return false;
      }

      boolean this_present_seType = true;
      boolean that_present_seType = true;
      if (this_present_seType || that_present_seType) {
        if (!(this_present_seType && that_present_seType))
          return false;
        if (this.seType != that.seType)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getSearchCondition_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSeId()).compareTo(other.isSetSeId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSeId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.seId, other.seId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSeType()).compareTo(other.isSetSeType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSeType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.seType, other.seType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getSearchCondition_args(");
      boolean first = true;

      sb.append("seId:");
      sb.append(this.seId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("seType:");
      sb.append(this.seType);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getSearchCondition_argsStandardSchemeFactory implements SchemeFactory {
      public getSearchCondition_argsStandardScheme getScheme() {
        return new getSearchCondition_argsStandardScheme();
      }
    }

    private static class getSearchCondition_argsStandardScheme extends StandardScheme<getSearchCondition_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getSearchCondition_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.seId = iprot.readI32();
                struct.setSeIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SE_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.seType = iprot.readI32();
                struct.setSeTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getSearchCondition_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SE_ID_FIELD_DESC);
        oprot.writeI32(struct.seId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(SE_TYPE_FIELD_DESC);
        oprot.writeI32(struct.seType);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getSearchCondition_argsTupleSchemeFactory implements SchemeFactory {
      public getSearchCondition_argsTupleScheme getScheme() {
        return new getSearchCondition_argsTupleScheme();
      }
    }

    private static class getSearchCondition_argsTupleScheme extends TupleScheme<getSearchCondition_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getSearchCondition_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSeId()) {
          optionals.set(0);
        }
        if (struct.isSetSeType()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSeId()) {
          oprot.writeI32(struct.seId);
        }
        if (struct.isSetSeType()) {
          oprot.writeI32(struct.seType);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getSearchCondition_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.seId = iprot.readI32();
          struct.setSeIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.seType = iprot.readI32();
          struct.setSeTypeIsSet(true);
        }
      }
    }

  }

  public static class getSearchCondition_result implements org.apache.thrift.TBase<getSearchCondition_result, getSearchCondition_result._Fields>, java.io.Serializable, Cloneable, Comparable<getSearchCondition_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getSearchCondition_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getSearchCondition_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getSearchCondition_resultTupleSchemeFactory());
    }

    public List<FilterEntry> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, FilterEntry.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getSearchCondition_result.class, metaDataMap);
    }

    public getSearchCondition_result() {
    }

    public getSearchCondition_result(
      List<FilterEntry> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSearchCondition_result(getSearchCondition_result other) {
      if (other.isSetSuccess()) {
        List<FilterEntry> __this__success = new ArrayList<FilterEntry>(other.success.size());
        for (FilterEntry other_element : other.success) {
          __this__success.add(new FilterEntry(other_element));
        }
        this.success = __this__success;
      }
    }

    public getSearchCondition_result deepCopy() {
      return new getSearchCondition_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<FilterEntry> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(FilterEntry elem) {
      if (this.success == null) {
        this.success = new ArrayList<FilterEntry>();
      }
      this.success.add(elem);
    }

    public List<FilterEntry> getSuccess() {
      return this.success;
    }

    public getSearchCondition_result setSuccess(List<FilterEntry> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<FilterEntry>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getSearchCondition_result)
        return this.equals((getSearchCondition_result)that);
      return false;
    }

    public boolean equals(getSearchCondition_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getSearchCondition_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getSearchCondition_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getSearchCondition_resultStandardSchemeFactory implements SchemeFactory {
      public getSearchCondition_resultStandardScheme getScheme() {
        return new getSearchCondition_resultStandardScheme();
      }
    }

    private static class getSearchCondition_resultStandardScheme extends StandardScheme<getSearchCondition_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getSearchCondition_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list24 = iprot.readListBegin();
                  struct.success = new ArrayList<FilterEntry>(_list24.size);
                  for (int _i25 = 0; _i25 < _list24.size; ++_i25)
                  {
                    FilterEntry _elem26;
                    _elem26 = new FilterEntry();
                    _elem26.read(iprot);
                    struct.success.add(_elem26);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getSearchCondition_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (FilterEntry _iter27 : struct.success)
            {
              _iter27.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getSearchCondition_resultTupleSchemeFactory implements SchemeFactory {
      public getSearchCondition_resultTupleScheme getScheme() {
        return new getSearchCondition_resultTupleScheme();
      }
    }

    private static class getSearchCondition_resultTupleScheme extends TupleScheme<getSearchCondition_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getSearchCondition_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (FilterEntry _iter28 : struct.success)
            {
              _iter28.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getSearchCondition_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list29 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<FilterEntry>(_list29.size);
            for (int _i30 = 0; _i30 < _list29.size; ++_i30)
            {
              FilterEntry _elem31;
              _elem31 = new FilterEntry();
              _elem31.read(iprot);
              struct.success.add(_elem31);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getUserType_args implements org.apache.thrift.TBase<getUserType_args, getUserType_args._Fields>, java.io.Serializable, Cloneable, Comparable<getUserType_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getUserType_args");

    private static final org.apache.thrift.protocol.TField WEB_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("webId", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getUserType_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getUserType_argsTupleSchemeFactory());
    }

    public int webId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      WEB_ID((short)1, "webId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // WEB_ID
            return WEB_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __WEBID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.WEB_ID, new org.apache.thrift.meta_data.FieldMetaData("webId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getUserType_args.class, metaDataMap);
    }

    public getUserType_args() {
    }

    public getUserType_args(
      int webId)
    {
      this();
      this.webId = webId;
      setWebIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getUserType_args(getUserType_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.webId = other.webId;
    }

    public getUserType_args deepCopy() {
      return new getUserType_args(this);
    }

    @Override
    public void clear() {
      setWebIdIsSet(false);
      this.webId = 0;
    }

    public int getWebId() {
      return this.webId;
    }

    public getUserType_args setWebId(int webId) {
      this.webId = webId;
      setWebIdIsSet(true);
      return this;
    }

    public void unsetWebId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __WEBID_ISSET_ID);
    }

    /** Returns true if field webId is set (has been assigned a value) and false otherwise */
    public boolean isSetWebId() {
      return EncodingUtils.testBit(__isset_bitfield, __WEBID_ISSET_ID);
    }

    public void setWebIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __WEBID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case WEB_ID:
        if (value == null) {
          unsetWebId();
        } else {
          setWebId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case WEB_ID:
        return Integer.valueOf(getWebId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case WEB_ID:
        return isSetWebId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getUserType_args)
        return this.equals((getUserType_args)that);
      return false;
    }

    public boolean equals(getUserType_args that) {
      if (that == null)
        return false;

      boolean this_present_webId = true;
      boolean that_present_webId = true;
      if (this_present_webId || that_present_webId) {
        if (!(this_present_webId && that_present_webId))
          return false;
        if (this.webId != that.webId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getUserType_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetWebId()).compareTo(other.isSetWebId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetWebId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.webId, other.webId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getUserType_args(");
      boolean first = true;

      sb.append("webId:");
      sb.append(this.webId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getUserType_argsStandardSchemeFactory implements SchemeFactory {
      public getUserType_argsStandardScheme getScheme() {
        return new getUserType_argsStandardScheme();
      }
    }

    private static class getUserType_argsStandardScheme extends StandardScheme<getUserType_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getUserType_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // WEB_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.webId = iprot.readI32();
                struct.setWebIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getUserType_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(WEB_ID_FIELD_DESC);
        oprot.writeI32(struct.webId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getUserType_argsTupleSchemeFactory implements SchemeFactory {
      public getUserType_argsTupleScheme getScheme() {
        return new getUserType_argsTupleScheme();
      }
    }

    private static class getUserType_argsTupleScheme extends TupleScheme<getUserType_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getUserType_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetWebId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetWebId()) {
          oprot.writeI32(struct.webId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getUserType_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.webId = iprot.readI32();
          struct.setWebIdIsSet(true);
        }
      }
    }

  }

  public static class getUserType_result implements org.apache.thrift.TBase<getUserType_result, getUserType_result._Fields>, java.io.Serializable, Cloneable, Comparable<getUserType_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getUserType_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getUserType_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getUserType_resultTupleSchemeFactory());
    }

    public List<FilterEntry> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, FilterEntry.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getUserType_result.class, metaDataMap);
    }

    public getUserType_result() {
    }

    public getUserType_result(
      List<FilterEntry> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getUserType_result(getUserType_result other) {
      if (other.isSetSuccess()) {
        List<FilterEntry> __this__success = new ArrayList<FilterEntry>(other.success.size());
        for (FilterEntry other_element : other.success) {
          __this__success.add(new FilterEntry(other_element));
        }
        this.success = __this__success;
      }
    }

    public getUserType_result deepCopy() {
      return new getUserType_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<FilterEntry> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(FilterEntry elem) {
      if (this.success == null) {
        this.success = new ArrayList<FilterEntry>();
      }
      this.success.add(elem);
    }

    public List<FilterEntry> getSuccess() {
      return this.success;
    }

    public getUserType_result setSuccess(List<FilterEntry> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<FilterEntry>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getUserType_result)
        return this.equals((getUserType_result)that);
      return false;
    }

    public boolean equals(getUserType_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getUserType_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getUserType_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getUserType_resultStandardSchemeFactory implements SchemeFactory {
      public getUserType_resultStandardScheme getScheme() {
        return new getUserType_resultStandardScheme();
      }
    }

    private static class getUserType_resultStandardScheme extends StandardScheme<getUserType_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getUserType_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list32 = iprot.readListBegin();
                  struct.success = new ArrayList<FilterEntry>(_list32.size);
                  for (int _i33 = 0; _i33 < _list32.size; ++_i33)
                  {
                    FilterEntry _elem34;
                    _elem34 = new FilterEntry();
                    _elem34.read(iprot);
                    struct.success.add(_elem34);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getUserType_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (FilterEntry _iter35 : struct.success)
            {
              _iter35.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getUserType_resultTupleSchemeFactory implements SchemeFactory {
      public getUserType_resultTupleScheme getScheme() {
        return new getUserType_resultTupleScheme();
      }
    }

    private static class getUserType_resultTupleScheme extends TupleScheme<getUserType_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getUserType_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (FilterEntry _iter36 : struct.success)
            {
              _iter36.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getUserType_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list37 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<FilterEntry>(_list37.size);
            for (int _i38 = 0; _i38 < _list37.size; ++_i38)
            {
              FilterEntry _elem39;
              _elem39 = new FilterEntry();
              _elem39.read(iprot);
              struct.success.add(_elem39);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getLoginUserType_args implements org.apache.thrift.TBase<getLoginUserType_args, getLoginUserType_args._Fields>, java.io.Serializable, Cloneable, Comparable<getLoginUserType_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getLoginUserType_args");

    private static final org.apache.thrift.protocol.TField WEB_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("webId", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getLoginUserType_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getLoginUserType_argsTupleSchemeFactory());
    }

    public int webId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      WEB_ID((short)1, "webId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // WEB_ID
            return WEB_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __WEBID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.WEB_ID, new org.apache.thrift.meta_data.FieldMetaData("webId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getLoginUserType_args.class, metaDataMap);
    }

    public getLoginUserType_args() {
    }

    public getLoginUserType_args(
      int webId)
    {
      this();
      this.webId = webId;
      setWebIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getLoginUserType_args(getLoginUserType_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.webId = other.webId;
    }

    public getLoginUserType_args deepCopy() {
      return new getLoginUserType_args(this);
    }

    @Override
    public void clear() {
      setWebIdIsSet(false);
      this.webId = 0;
    }

    public int getWebId() {
      return this.webId;
    }

    public getLoginUserType_args setWebId(int webId) {
      this.webId = webId;
      setWebIdIsSet(true);
      return this;
    }

    public void unsetWebId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __WEBID_ISSET_ID);
    }

    /** Returns true if field webId is set (has been assigned a value) and false otherwise */
    public boolean isSetWebId() {
      return EncodingUtils.testBit(__isset_bitfield, __WEBID_ISSET_ID);
    }

    public void setWebIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __WEBID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case WEB_ID:
        if (value == null) {
          unsetWebId();
        } else {
          setWebId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case WEB_ID:
        return Integer.valueOf(getWebId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case WEB_ID:
        return isSetWebId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getLoginUserType_args)
        return this.equals((getLoginUserType_args)that);
      return false;
    }

    public boolean equals(getLoginUserType_args that) {
      if (that == null)
        return false;

      boolean this_present_webId = true;
      boolean that_present_webId = true;
      if (this_present_webId || that_present_webId) {
        if (!(this_present_webId && that_present_webId))
          return false;
        if (this.webId != that.webId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getLoginUserType_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetWebId()).compareTo(other.isSetWebId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetWebId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.webId, other.webId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getLoginUserType_args(");
      boolean first = true;

      sb.append("webId:");
      sb.append(this.webId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getLoginUserType_argsStandardSchemeFactory implements SchemeFactory {
      public getLoginUserType_argsStandardScheme getScheme() {
        return new getLoginUserType_argsStandardScheme();
      }
    }

    private static class getLoginUserType_argsStandardScheme extends StandardScheme<getLoginUserType_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getLoginUserType_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // WEB_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.webId = iprot.readI32();
                struct.setWebIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getLoginUserType_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(WEB_ID_FIELD_DESC);
        oprot.writeI32(struct.webId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getLoginUserType_argsTupleSchemeFactory implements SchemeFactory {
      public getLoginUserType_argsTupleScheme getScheme() {
        return new getLoginUserType_argsTupleScheme();
      }
    }

    private static class getLoginUserType_argsTupleScheme extends TupleScheme<getLoginUserType_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getLoginUserType_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetWebId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetWebId()) {
          oprot.writeI32(struct.webId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getLoginUserType_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.webId = iprot.readI32();
          struct.setWebIdIsSet(true);
        }
      }
    }

  }

  public static class getLoginUserType_result implements org.apache.thrift.TBase<getLoginUserType_result, getLoginUserType_result._Fields>, java.io.Serializable, Cloneable, Comparable<getLoginUserType_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getLoginUserType_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getLoginUserType_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getLoginUserType_resultTupleSchemeFactory());
    }

    public List<FilterEntry> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, FilterEntry.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getLoginUserType_result.class, metaDataMap);
    }

    public getLoginUserType_result() {
    }

    public getLoginUserType_result(
      List<FilterEntry> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getLoginUserType_result(getLoginUserType_result other) {
      if (other.isSetSuccess()) {
        List<FilterEntry> __this__success = new ArrayList<FilterEntry>(other.success.size());
        for (FilterEntry other_element : other.success) {
          __this__success.add(new FilterEntry(other_element));
        }
        this.success = __this__success;
      }
    }

    public getLoginUserType_result deepCopy() {
      return new getLoginUserType_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<FilterEntry> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(FilterEntry elem) {
      if (this.success == null) {
        this.success = new ArrayList<FilterEntry>();
      }
      this.success.add(elem);
    }

    public List<FilterEntry> getSuccess() {
      return this.success;
    }

    public getLoginUserType_result setSuccess(List<FilterEntry> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<FilterEntry>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getLoginUserType_result)
        return this.equals((getLoginUserType_result)that);
      return false;
    }

    public boolean equals(getLoginUserType_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getLoginUserType_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getLoginUserType_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getLoginUserType_resultStandardSchemeFactory implements SchemeFactory {
      public getLoginUserType_resultStandardScheme getScheme() {
        return new getLoginUserType_resultStandardScheme();
      }
    }

    private static class getLoginUserType_resultStandardScheme extends StandardScheme<getLoginUserType_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getLoginUserType_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list40 = iprot.readListBegin();
                  struct.success = new ArrayList<FilterEntry>(_list40.size);
                  for (int _i41 = 0; _i41 < _list40.size; ++_i41)
                  {
                    FilterEntry _elem42;
                    _elem42 = new FilterEntry();
                    _elem42.read(iprot);
                    struct.success.add(_elem42);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getLoginUserType_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (FilterEntry _iter43 : struct.success)
            {
              _iter43.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getLoginUserType_resultTupleSchemeFactory implements SchemeFactory {
      public getLoginUserType_resultTupleScheme getScheme() {
        return new getLoginUserType_resultTupleScheme();
      }
    }

    private static class getLoginUserType_resultTupleScheme extends TupleScheme<getLoginUserType_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getLoginUserType_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (FilterEntry _iter44 : struct.success)
            {
              _iter44.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getLoginUserType_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list45 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<FilterEntry>(_list45.size);
            for (int _i46 = 0; _i46 < _list45.size; ++_i46)
            {
              FilterEntry _elem47;
              _elem47 = new FilterEntry();
              _elem47.read(iprot);
              struct.success.add(_elem47);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getVisitType_args implements org.apache.thrift.TBase<getVisitType_args, getVisitType_args._Fields>, java.io.Serializable, Cloneable, Comparable<getVisitType_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getVisitType_args");

    private static final org.apache.thrift.protocol.TField WEB_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("webId", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getVisitType_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getVisitType_argsTupleSchemeFactory());
    }

    public int webId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      WEB_ID((short)1, "webId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // WEB_ID
            return WEB_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __WEBID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.WEB_ID, new org.apache.thrift.meta_data.FieldMetaData("webId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getVisitType_args.class, metaDataMap);
    }

    public getVisitType_args() {
    }

    public getVisitType_args(
      int webId)
    {
      this();
      this.webId = webId;
      setWebIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getVisitType_args(getVisitType_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.webId = other.webId;
    }

    public getVisitType_args deepCopy() {
      return new getVisitType_args(this);
    }

    @Override
    public void clear() {
      setWebIdIsSet(false);
      this.webId = 0;
    }

    public int getWebId() {
      return this.webId;
    }

    public getVisitType_args setWebId(int webId) {
      this.webId = webId;
      setWebIdIsSet(true);
      return this;
    }

    public void unsetWebId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __WEBID_ISSET_ID);
    }

    /** Returns true if field webId is set (has been assigned a value) and false otherwise */
    public boolean isSetWebId() {
      return EncodingUtils.testBit(__isset_bitfield, __WEBID_ISSET_ID);
    }

    public void setWebIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __WEBID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case WEB_ID:
        if (value == null) {
          unsetWebId();
        } else {
          setWebId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case WEB_ID:
        return Integer.valueOf(getWebId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case WEB_ID:
        return isSetWebId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getVisitType_args)
        return this.equals((getVisitType_args)that);
      return false;
    }

    public boolean equals(getVisitType_args that) {
      if (that == null)
        return false;

      boolean this_present_webId = true;
      boolean that_present_webId = true;
      if (this_present_webId || that_present_webId) {
        if (!(this_present_webId && that_present_webId))
          return false;
        if (this.webId != that.webId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getVisitType_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetWebId()).compareTo(other.isSetWebId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetWebId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.webId, other.webId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getVisitType_args(");
      boolean first = true;

      sb.append("webId:");
      sb.append(this.webId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getVisitType_argsStandardSchemeFactory implements SchemeFactory {
      public getVisitType_argsStandardScheme getScheme() {
        return new getVisitType_argsStandardScheme();
      }
    }

    private static class getVisitType_argsStandardScheme extends StandardScheme<getVisitType_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getVisitType_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // WEB_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.webId = iprot.readI32();
                struct.setWebIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getVisitType_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(WEB_ID_FIELD_DESC);
        oprot.writeI32(struct.webId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getVisitType_argsTupleSchemeFactory implements SchemeFactory {
      public getVisitType_argsTupleScheme getScheme() {
        return new getVisitType_argsTupleScheme();
      }
    }

    private static class getVisitType_argsTupleScheme extends TupleScheme<getVisitType_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getVisitType_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetWebId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetWebId()) {
          oprot.writeI32(struct.webId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getVisitType_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.webId = iprot.readI32();
          struct.setWebIdIsSet(true);
        }
      }
    }

  }

  public static class getVisitType_result implements org.apache.thrift.TBase<getVisitType_result, getVisitType_result._Fields>, java.io.Serializable, Cloneable, Comparable<getVisitType_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getVisitType_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getVisitType_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getVisitType_resultTupleSchemeFactory());
    }

    public List<FilterEntry> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, FilterEntry.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getVisitType_result.class, metaDataMap);
    }

    public getVisitType_result() {
    }

    public getVisitType_result(
      List<FilterEntry> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getVisitType_result(getVisitType_result other) {
      if (other.isSetSuccess()) {
        List<FilterEntry> __this__success = new ArrayList<FilterEntry>(other.success.size());
        for (FilterEntry other_element : other.success) {
          __this__success.add(new FilterEntry(other_element));
        }
        this.success = __this__success;
      }
    }

    public getVisitType_result deepCopy() {
      return new getVisitType_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<FilterEntry> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(FilterEntry elem) {
      if (this.success == null) {
        this.success = new ArrayList<FilterEntry>();
      }
      this.success.add(elem);
    }

    public List<FilterEntry> getSuccess() {
      return this.success;
    }

    public getVisitType_result setSuccess(List<FilterEntry> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<FilterEntry>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getVisitType_result)
        return this.equals((getVisitType_result)that);
      return false;
    }

    public boolean equals(getVisitType_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getVisitType_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getVisitType_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getVisitType_resultStandardSchemeFactory implements SchemeFactory {
      public getVisitType_resultStandardScheme getScheme() {
        return new getVisitType_resultStandardScheme();
      }
    }

    private static class getVisitType_resultStandardScheme extends StandardScheme<getVisitType_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getVisitType_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list48 = iprot.readListBegin();
                  struct.success = new ArrayList<FilterEntry>(_list48.size);
                  for (int _i49 = 0; _i49 < _list48.size; ++_i49)
                  {
                    FilterEntry _elem50;
                    _elem50 = new FilterEntry();
                    _elem50.read(iprot);
                    struct.success.add(_elem50);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getVisitType_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (FilterEntry _iter51 : struct.success)
            {
              _iter51.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getVisitType_resultTupleSchemeFactory implements SchemeFactory {
      public getVisitType_resultTupleScheme getScheme() {
        return new getVisitType_resultTupleScheme();
      }
    }

    private static class getVisitType_resultTupleScheme extends TupleScheme<getVisitType_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getVisitType_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (FilterEntry _iter52 : struct.success)
            {
              _iter52.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getVisitType_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list53 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<FilterEntry>(_list53.size);
            for (int _i54 = 0; _i54 < _list53.size; ++_i54)
            {
              FilterEntry _elem55;
              _elem55 = new FilterEntry();
              _elem55.read(iprot);
              struct.success.add(_elem55);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getVisitTypeOfSearch_args implements org.apache.thrift.TBase<getVisitTypeOfSearch_args, getVisitTypeOfSearch_args._Fields>, java.io.Serializable, Cloneable, Comparable<getVisitTypeOfSearch_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getVisitTypeOfSearch_args");

    private static final org.apache.thrift.protocol.TField WEB_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("webId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField SE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("seId", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField SEARCH_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("searchType", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getVisitTypeOfSearch_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getVisitTypeOfSearch_argsTupleSchemeFactory());
    }

    public int webId; // required
    public int seId; // required
    public int searchType; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      WEB_ID((short)1, "webId"),
      SE_ID((short)2, "seId"),
      SEARCH_TYPE((short)3, "searchType");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // WEB_ID
            return WEB_ID;
          case 2: // SE_ID
            return SE_ID;
          case 3: // SEARCH_TYPE
            return SEARCH_TYPE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __WEBID_ISSET_ID = 0;
    private static final int __SEID_ISSET_ID = 1;
    private static final int __SEARCHTYPE_ISSET_ID = 2;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.WEB_ID, new org.apache.thrift.meta_data.FieldMetaData("webId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.SE_ID, new org.apache.thrift.meta_data.FieldMetaData("seId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.SEARCH_TYPE, new org.apache.thrift.meta_data.FieldMetaData("searchType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getVisitTypeOfSearch_args.class, metaDataMap);
    }

    public getVisitTypeOfSearch_args() {
    }

    public getVisitTypeOfSearch_args(
      int webId,
      int seId,
      int searchType)
    {
      this();
      this.webId = webId;
      setWebIdIsSet(true);
      this.seId = seId;
      setSeIdIsSet(true);
      this.searchType = searchType;
      setSearchTypeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getVisitTypeOfSearch_args(getVisitTypeOfSearch_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.webId = other.webId;
      this.seId = other.seId;
      this.searchType = other.searchType;
    }

    public getVisitTypeOfSearch_args deepCopy() {
      return new getVisitTypeOfSearch_args(this);
    }

    @Override
    public void clear() {
      setWebIdIsSet(false);
      this.webId = 0;
      setSeIdIsSet(false);
      this.seId = 0;
      setSearchTypeIsSet(false);
      this.searchType = 0;
    }

    public int getWebId() {
      return this.webId;
    }

    public getVisitTypeOfSearch_args setWebId(int webId) {
      this.webId = webId;
      setWebIdIsSet(true);
      return this;
    }

    public void unsetWebId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __WEBID_ISSET_ID);
    }

    /** Returns true if field webId is set (has been assigned a value) and false otherwise */
    public boolean isSetWebId() {
      return EncodingUtils.testBit(__isset_bitfield, __WEBID_ISSET_ID);
    }

    public void setWebIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __WEBID_ISSET_ID, value);
    }

    public int getSeId() {
      return this.seId;
    }

    public getVisitTypeOfSearch_args setSeId(int seId) {
      this.seId = seId;
      setSeIdIsSet(true);
      return this;
    }

    public void unsetSeId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SEID_ISSET_ID);
    }

    /** Returns true if field seId is set (has been assigned a value) and false otherwise */
    public boolean isSetSeId() {
      return EncodingUtils.testBit(__isset_bitfield, __SEID_ISSET_ID);
    }

    public void setSeIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SEID_ISSET_ID, value);
    }

    public int getSearchType() {
      return this.searchType;
    }

    public getVisitTypeOfSearch_args setSearchType(int searchType) {
      this.searchType = searchType;
      setSearchTypeIsSet(true);
      return this;
    }

    public void unsetSearchType() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SEARCHTYPE_ISSET_ID);
    }

    /** Returns true if field searchType is set (has been assigned a value) and false otherwise */
    public boolean isSetSearchType() {
      return EncodingUtils.testBit(__isset_bitfield, __SEARCHTYPE_ISSET_ID);
    }

    public void setSearchTypeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SEARCHTYPE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case WEB_ID:
        if (value == null) {
          unsetWebId();
        } else {
          setWebId((Integer)value);
        }
        break;

      case SE_ID:
        if (value == null) {
          unsetSeId();
        } else {
          setSeId((Integer)value);
        }
        break;

      case SEARCH_TYPE:
        if (value == null) {
          unsetSearchType();
        } else {
          setSearchType((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case WEB_ID:
        return Integer.valueOf(getWebId());

      case SE_ID:
        return Integer.valueOf(getSeId());

      case SEARCH_TYPE:
        return Integer.valueOf(getSearchType());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case WEB_ID:
        return isSetWebId();
      case SE_ID:
        return isSetSeId();
      case SEARCH_TYPE:
        return isSetSearchType();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getVisitTypeOfSearch_args)
        return this.equals((getVisitTypeOfSearch_args)that);
      return false;
    }

    public boolean equals(getVisitTypeOfSearch_args that) {
      if (that == null)
        return false;

      boolean this_present_webId = true;
      boolean that_present_webId = true;
      if (this_present_webId || that_present_webId) {
        if (!(this_present_webId && that_present_webId))
          return false;
        if (this.webId != that.webId)
          return false;
      }

      boolean this_present_seId = true;
      boolean that_present_seId = true;
      if (this_present_seId || that_present_seId) {
        if (!(this_present_seId && that_present_seId))
          return false;
        if (this.seId != that.seId)
          return false;
      }

      boolean this_present_searchType = true;
      boolean that_present_searchType = true;
      if (this_present_searchType || that_present_searchType) {
        if (!(this_present_searchType && that_present_searchType))
          return false;
        if (this.searchType != that.searchType)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getVisitTypeOfSearch_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetWebId()).compareTo(other.isSetWebId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetWebId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.webId, other.webId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSeId()).compareTo(other.isSetSeId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSeId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.seId, other.seId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSearchType()).compareTo(other.isSetSearchType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSearchType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.searchType, other.searchType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getVisitTypeOfSearch_args(");
      boolean first = true;

      sb.append("webId:");
      sb.append(this.webId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("seId:");
      sb.append(this.seId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("searchType:");
      sb.append(this.searchType);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getVisitTypeOfSearch_argsStandardSchemeFactory implements SchemeFactory {
      public getVisitTypeOfSearch_argsStandardScheme getScheme() {
        return new getVisitTypeOfSearch_argsStandardScheme();
      }
    }

    private static class getVisitTypeOfSearch_argsStandardScheme extends StandardScheme<getVisitTypeOfSearch_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getVisitTypeOfSearch_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // WEB_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.webId = iprot.readI32();
                struct.setWebIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.seId = iprot.readI32();
                struct.setSeIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // SEARCH_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.searchType = iprot.readI32();
                struct.setSearchTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getVisitTypeOfSearch_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(WEB_ID_FIELD_DESC);
        oprot.writeI32(struct.webId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(SE_ID_FIELD_DESC);
        oprot.writeI32(struct.seId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(SEARCH_TYPE_FIELD_DESC);
        oprot.writeI32(struct.searchType);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getVisitTypeOfSearch_argsTupleSchemeFactory implements SchemeFactory {
      public getVisitTypeOfSearch_argsTupleScheme getScheme() {
        return new getVisitTypeOfSearch_argsTupleScheme();
      }
    }

    private static class getVisitTypeOfSearch_argsTupleScheme extends TupleScheme<getVisitTypeOfSearch_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getVisitTypeOfSearch_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetWebId()) {
          optionals.set(0);
        }
        if (struct.isSetSeId()) {
          optionals.set(1);
        }
        if (struct.isSetSearchType()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetWebId()) {
          oprot.writeI32(struct.webId);
        }
        if (struct.isSetSeId()) {
          oprot.writeI32(struct.seId);
        }
        if (struct.isSetSearchType()) {
          oprot.writeI32(struct.searchType);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getVisitTypeOfSearch_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.webId = iprot.readI32();
          struct.setWebIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.seId = iprot.readI32();
          struct.setSeIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct.searchType = iprot.readI32();
          struct.setSearchTypeIsSet(true);
        }
      }
    }

  }

  public static class getVisitTypeOfSearch_result implements org.apache.thrift.TBase<getVisitTypeOfSearch_result, getVisitTypeOfSearch_result._Fields>, java.io.Serializable, Cloneable, Comparable<getVisitTypeOfSearch_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getVisitTypeOfSearch_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getVisitTypeOfSearch_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getVisitTypeOfSearch_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getVisitTypeOfSearch_result.class, metaDataMap);
    }

    public getVisitTypeOfSearch_result() {
    }

    public getVisitTypeOfSearch_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getVisitTypeOfSearch_result(getVisitTypeOfSearch_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public getVisitTypeOfSearch_result deepCopy() {
      return new getVisitTypeOfSearch_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public getVisitTypeOfSearch_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getVisitTypeOfSearch_result)
        return this.equals((getVisitTypeOfSearch_result)that);
      return false;
    }

    public boolean equals(getVisitTypeOfSearch_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getVisitTypeOfSearch_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getVisitTypeOfSearch_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getVisitTypeOfSearch_resultStandardSchemeFactory implements SchemeFactory {
      public getVisitTypeOfSearch_resultStandardScheme getScheme() {
        return new getVisitTypeOfSearch_resultStandardScheme();
      }
    }

    private static class getVisitTypeOfSearch_resultStandardScheme extends StandardScheme<getVisitTypeOfSearch_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getVisitTypeOfSearch_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getVisitTypeOfSearch_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getVisitTypeOfSearch_resultTupleSchemeFactory implements SchemeFactory {
      public getVisitTypeOfSearch_resultTupleScheme getScheme() {
        return new getVisitTypeOfSearch_resultTupleScheme();
      }
    }

    private static class getVisitTypeOfSearch_resultTupleScheme extends TupleScheme<getVisitTypeOfSearch_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getVisitTypeOfSearch_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getVisitTypeOfSearch_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}

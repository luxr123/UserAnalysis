/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.tracker.api.thrift.web;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class PageStats implements org.apache.thrift.TBase<PageStats, PageStats._Fields>, java.io.Serializable, Cloneable, Comparable<PageStats> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("PageStats");

  private static final org.apache.thrift.protocol.TField TIMES_FIELD_DESC = new org.apache.thrift.protocol.TField("times", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField PAGE_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("pageUrl", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField PAGE_DESC_FIELD_DESC = new org.apache.thrift.protocol.TField("pageDesc", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField PV_FIELD_DESC = new org.apache.thrift.protocol.TField("pv", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField UV_FIELD_DESC = new org.apache.thrift.protocol.TField("uv", org.apache.thrift.protocol.TType.I64, (short)5);
  private static final org.apache.thrift.protocol.TField IP_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("ipCount", org.apache.thrift.protocol.TType.I64, (short)6);
  private static final org.apache.thrift.protocol.TField ENTRY_PAGE_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("entryPageCount", org.apache.thrift.protocol.TType.I64, (short)7);
  private static final org.apache.thrift.protocol.TField NEXT_PAGE_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("nextPageCount", org.apache.thrift.protocol.TType.I64, (short)8);
  private static final org.apache.thrift.protocol.TField OUT_PAGE_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("outPageCount", org.apache.thrift.protocol.TType.I64, (short)9);
  private static final org.apache.thrift.protocol.TField OUT_RATE_FIELD_DESC = new org.apache.thrift.protocol.TField("outRate", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField AVG_STAY_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("avgStayTime", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField PV_RATE_FIELD_DESC = new org.apache.thrift.protocol.TField("pvRate", org.apache.thrift.protocol.TType.STRING, (short)12);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new PageStatsStandardSchemeFactory());
    schemes.put(TupleScheme.class, new PageStatsTupleSchemeFactory());
  }

  public String times; // optional
  public String pageUrl; // optional
  public String pageDesc; // optional
  public long pv; // optional
  public long uv; // optional
  public long ipCount; // optional
  public long entryPageCount; // optional
  public long nextPageCount; // optional
  public long outPageCount; // optional
  public String outRate; // optional
  public String avgStayTime; // optional
  public String pvRate; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TIMES((short)1, "times"),
    PAGE_URL((short)2, "pageUrl"),
    PAGE_DESC((short)3, "pageDesc"),
    PV((short)4, "pv"),
    UV((short)5, "uv"),
    IP_COUNT((short)6, "ipCount"),
    ENTRY_PAGE_COUNT((short)7, "entryPageCount"),
    NEXT_PAGE_COUNT((short)8, "nextPageCount"),
    OUT_PAGE_COUNT((short)9, "outPageCount"),
    OUT_RATE((short)10, "outRate"),
    AVG_STAY_TIME((short)11, "avgStayTime"),
    PV_RATE((short)12, "pvRate");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TIMES
          return TIMES;
        case 2: // PAGE_URL
          return PAGE_URL;
        case 3: // PAGE_DESC
          return PAGE_DESC;
        case 4: // PV
          return PV;
        case 5: // UV
          return UV;
        case 6: // IP_COUNT
          return IP_COUNT;
        case 7: // ENTRY_PAGE_COUNT
          return ENTRY_PAGE_COUNT;
        case 8: // NEXT_PAGE_COUNT
          return NEXT_PAGE_COUNT;
        case 9: // OUT_PAGE_COUNT
          return OUT_PAGE_COUNT;
        case 10: // OUT_RATE
          return OUT_RATE;
        case 11: // AVG_STAY_TIME
          return AVG_STAY_TIME;
        case 12: // PV_RATE
          return PV_RATE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PV_ISSET_ID = 0;
  private static final int __UV_ISSET_ID = 1;
  private static final int __IPCOUNT_ISSET_ID = 2;
  private static final int __ENTRYPAGECOUNT_ISSET_ID = 3;
  private static final int __NEXTPAGECOUNT_ISSET_ID = 4;
  private static final int __OUTPAGECOUNT_ISSET_ID = 5;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.TIMES,_Fields.PAGE_URL,_Fields.PAGE_DESC,_Fields.PV,_Fields.UV,_Fields.IP_COUNT,_Fields.ENTRY_PAGE_COUNT,_Fields.NEXT_PAGE_COUNT,_Fields.OUT_PAGE_COUNT,_Fields.OUT_RATE,_Fields.AVG_STAY_TIME,_Fields.PV_RATE};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TIMES, new org.apache.thrift.meta_data.FieldMetaData("times", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PAGE_URL, new org.apache.thrift.meta_data.FieldMetaData("pageUrl", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PAGE_DESC, new org.apache.thrift.meta_data.FieldMetaData("pageDesc", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PV, new org.apache.thrift.meta_data.FieldMetaData("pv", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.UV, new org.apache.thrift.meta_data.FieldMetaData("uv", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.IP_COUNT, new org.apache.thrift.meta_data.FieldMetaData("ipCount", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.ENTRY_PAGE_COUNT, new org.apache.thrift.meta_data.FieldMetaData("entryPageCount", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.NEXT_PAGE_COUNT, new org.apache.thrift.meta_data.FieldMetaData("nextPageCount", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.OUT_PAGE_COUNT, new org.apache.thrift.meta_data.FieldMetaData("outPageCount", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.OUT_RATE, new org.apache.thrift.meta_data.FieldMetaData("outRate", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.AVG_STAY_TIME, new org.apache.thrift.meta_data.FieldMetaData("avgStayTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PV_RATE, new org.apache.thrift.meta_data.FieldMetaData("pvRate", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(PageStats.class, metaDataMap);
  }

  public PageStats() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public PageStats(PageStats other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetTimes()) {
      this.times = other.times;
    }
    if (other.isSetPageUrl()) {
      this.pageUrl = other.pageUrl;
    }
    if (other.isSetPageDesc()) {
      this.pageDesc = other.pageDesc;
    }
    this.pv = other.pv;
    this.uv = other.uv;
    this.ipCount = other.ipCount;
    this.entryPageCount = other.entryPageCount;
    this.nextPageCount = other.nextPageCount;
    this.outPageCount = other.outPageCount;
    if (other.isSetOutRate()) {
      this.outRate = other.outRate;
    }
    if (other.isSetAvgStayTime()) {
      this.avgStayTime = other.avgStayTime;
    }
    if (other.isSetPvRate()) {
      this.pvRate = other.pvRate;
    }
  }

  public PageStats deepCopy() {
    return new PageStats(this);
  }

  @Override
  public void clear() {
    this.times = null;
    this.pageUrl = null;
    this.pageDesc = null;
    setPvIsSet(false);
    this.pv = 0;
    setUvIsSet(false);
    this.uv = 0;
    setIpCountIsSet(false);
    this.ipCount = 0;
    setEntryPageCountIsSet(false);
    this.entryPageCount = 0;
    setNextPageCountIsSet(false);
    this.nextPageCount = 0;
    setOutPageCountIsSet(false);
    this.outPageCount = 0;
    this.outRate = null;
    this.avgStayTime = null;
    this.pvRate = null;
  }

  public String getTimes() {
    return this.times;
  }

  public PageStats setTimes(String times) {
    this.times = times;
    return this;
  }

  public void unsetTimes() {
    this.times = null;
  }

  /** Returns true if field times is set (has been assigned a value) and false otherwise */
  public boolean isSetTimes() {
    return this.times != null;
  }

  public void setTimesIsSet(boolean value) {
    if (!value) {
      this.times = null;
    }
  }

  public String getPageUrl() {
    return this.pageUrl;
  }

  public PageStats setPageUrl(String pageUrl) {
    this.pageUrl = pageUrl;
    return this;
  }

  public void unsetPageUrl() {
    this.pageUrl = null;
  }

  /** Returns true if field pageUrl is set (has been assigned a value) and false otherwise */
  public boolean isSetPageUrl() {
    return this.pageUrl != null;
  }

  public void setPageUrlIsSet(boolean value) {
    if (!value) {
      this.pageUrl = null;
    }
  }

  public String getPageDesc() {
    return this.pageDesc;
  }

  public PageStats setPageDesc(String pageDesc) {
    this.pageDesc = pageDesc;
    return this;
  }

  public void unsetPageDesc() {
    this.pageDesc = null;
  }

  /** Returns true if field pageDesc is set (has been assigned a value) and false otherwise */
  public boolean isSetPageDesc() {
    return this.pageDesc != null;
  }

  public void setPageDescIsSet(boolean value) {
    if (!value) {
      this.pageDesc = null;
    }
  }

  public long getPv() {
    return this.pv;
  }

  public PageStats setPv(long pv) {
    this.pv = pv;
    setPvIsSet(true);
    return this;
  }

  public void unsetPv() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PV_ISSET_ID);
  }

  /** Returns true if field pv is set (has been assigned a value) and false otherwise */
  public boolean isSetPv() {
    return EncodingUtils.testBit(__isset_bitfield, __PV_ISSET_ID);
  }

  public void setPvIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PV_ISSET_ID, value);
  }

  public long getUv() {
    return this.uv;
  }

  public PageStats setUv(long uv) {
    this.uv = uv;
    setUvIsSet(true);
    return this;
  }

  public void unsetUv() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UV_ISSET_ID);
  }

  /** Returns true if field uv is set (has been assigned a value) and false otherwise */
  public boolean isSetUv() {
    return EncodingUtils.testBit(__isset_bitfield, __UV_ISSET_ID);
  }

  public void setUvIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UV_ISSET_ID, value);
  }

  public long getIpCount() {
    return this.ipCount;
  }

  public PageStats setIpCount(long ipCount) {
    this.ipCount = ipCount;
    setIpCountIsSet(true);
    return this;
  }

  public void unsetIpCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __IPCOUNT_ISSET_ID);
  }

  /** Returns true if field ipCount is set (has been assigned a value) and false otherwise */
  public boolean isSetIpCount() {
    return EncodingUtils.testBit(__isset_bitfield, __IPCOUNT_ISSET_ID);
  }

  public void setIpCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __IPCOUNT_ISSET_ID, value);
  }

  public long getEntryPageCount() {
    return this.entryPageCount;
  }

  public PageStats setEntryPageCount(long entryPageCount) {
    this.entryPageCount = entryPageCount;
    setEntryPageCountIsSet(true);
    return this;
  }

  public void unsetEntryPageCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ENTRYPAGECOUNT_ISSET_ID);
  }

  /** Returns true if field entryPageCount is set (has been assigned a value) and false otherwise */
  public boolean isSetEntryPageCount() {
    return EncodingUtils.testBit(__isset_bitfield, __ENTRYPAGECOUNT_ISSET_ID);
  }

  public void setEntryPageCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ENTRYPAGECOUNT_ISSET_ID, value);
  }

  public long getNextPageCount() {
    return this.nextPageCount;
  }

  public PageStats setNextPageCount(long nextPageCount) {
    this.nextPageCount = nextPageCount;
    setNextPageCountIsSet(true);
    return this;
  }

  public void unsetNextPageCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NEXTPAGECOUNT_ISSET_ID);
  }

  /** Returns true if field nextPageCount is set (has been assigned a value) and false otherwise */
  public boolean isSetNextPageCount() {
    return EncodingUtils.testBit(__isset_bitfield, __NEXTPAGECOUNT_ISSET_ID);
  }

  public void setNextPageCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NEXTPAGECOUNT_ISSET_ID, value);
  }

  public long getOutPageCount() {
    return this.outPageCount;
  }

  public PageStats setOutPageCount(long outPageCount) {
    this.outPageCount = outPageCount;
    setOutPageCountIsSet(true);
    return this;
  }

  public void unsetOutPageCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OUTPAGECOUNT_ISSET_ID);
  }

  /** Returns true if field outPageCount is set (has been assigned a value) and false otherwise */
  public boolean isSetOutPageCount() {
    return EncodingUtils.testBit(__isset_bitfield, __OUTPAGECOUNT_ISSET_ID);
  }

  public void setOutPageCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OUTPAGECOUNT_ISSET_ID, value);
  }

  public String getOutRate() {
    return this.outRate;
  }

  public PageStats setOutRate(String outRate) {
    this.outRate = outRate;
    return this;
  }

  public void unsetOutRate() {
    this.outRate = null;
  }

  /** Returns true if field outRate is set (has been assigned a value) and false otherwise */
  public boolean isSetOutRate() {
    return this.outRate != null;
  }

  public void setOutRateIsSet(boolean value) {
    if (!value) {
      this.outRate = null;
    }
  }

  public String getAvgStayTime() {
    return this.avgStayTime;
  }

  public PageStats setAvgStayTime(String avgStayTime) {
    this.avgStayTime = avgStayTime;
    return this;
  }

  public void unsetAvgStayTime() {
    this.avgStayTime = null;
  }

  /** Returns true if field avgStayTime is set (has been assigned a value) and false otherwise */
  public boolean isSetAvgStayTime() {
    return this.avgStayTime != null;
  }

  public void setAvgStayTimeIsSet(boolean value) {
    if (!value) {
      this.avgStayTime = null;
    }
  }

  public String getPvRate() {
    return this.pvRate;
  }

  public PageStats setPvRate(String pvRate) {
    this.pvRate = pvRate;
    return this;
  }

  public void unsetPvRate() {
    this.pvRate = null;
  }

  /** Returns true if field pvRate is set (has been assigned a value) and false otherwise */
  public boolean isSetPvRate() {
    return this.pvRate != null;
  }

  public void setPvRateIsSet(boolean value) {
    if (!value) {
      this.pvRate = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TIMES:
      if (value == null) {
        unsetTimes();
      } else {
        setTimes((String)value);
      }
      break;

    case PAGE_URL:
      if (value == null) {
        unsetPageUrl();
      } else {
        setPageUrl((String)value);
      }
      break;

    case PAGE_DESC:
      if (value == null) {
        unsetPageDesc();
      } else {
        setPageDesc((String)value);
      }
      break;

    case PV:
      if (value == null) {
        unsetPv();
      } else {
        setPv((Long)value);
      }
      break;

    case UV:
      if (value == null) {
        unsetUv();
      } else {
        setUv((Long)value);
      }
      break;

    case IP_COUNT:
      if (value == null) {
        unsetIpCount();
      } else {
        setIpCount((Long)value);
      }
      break;

    case ENTRY_PAGE_COUNT:
      if (value == null) {
        unsetEntryPageCount();
      } else {
        setEntryPageCount((Long)value);
      }
      break;

    case NEXT_PAGE_COUNT:
      if (value == null) {
        unsetNextPageCount();
      } else {
        setNextPageCount((Long)value);
      }
      break;

    case OUT_PAGE_COUNT:
      if (value == null) {
        unsetOutPageCount();
      } else {
        setOutPageCount((Long)value);
      }
      break;

    case OUT_RATE:
      if (value == null) {
        unsetOutRate();
      } else {
        setOutRate((String)value);
      }
      break;

    case AVG_STAY_TIME:
      if (value == null) {
        unsetAvgStayTime();
      } else {
        setAvgStayTime((String)value);
      }
      break;

    case PV_RATE:
      if (value == null) {
        unsetPvRate();
      } else {
        setPvRate((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TIMES:
      return getTimes();

    case PAGE_URL:
      return getPageUrl();

    case PAGE_DESC:
      return getPageDesc();

    case PV:
      return Long.valueOf(getPv());

    case UV:
      return Long.valueOf(getUv());

    case IP_COUNT:
      return Long.valueOf(getIpCount());

    case ENTRY_PAGE_COUNT:
      return Long.valueOf(getEntryPageCount());

    case NEXT_PAGE_COUNT:
      return Long.valueOf(getNextPageCount());

    case OUT_PAGE_COUNT:
      return Long.valueOf(getOutPageCount());

    case OUT_RATE:
      return getOutRate();

    case AVG_STAY_TIME:
      return getAvgStayTime();

    case PV_RATE:
      return getPvRate();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TIMES:
      return isSetTimes();
    case PAGE_URL:
      return isSetPageUrl();
    case PAGE_DESC:
      return isSetPageDesc();
    case PV:
      return isSetPv();
    case UV:
      return isSetUv();
    case IP_COUNT:
      return isSetIpCount();
    case ENTRY_PAGE_COUNT:
      return isSetEntryPageCount();
    case NEXT_PAGE_COUNT:
      return isSetNextPageCount();
    case OUT_PAGE_COUNT:
      return isSetOutPageCount();
    case OUT_RATE:
      return isSetOutRate();
    case AVG_STAY_TIME:
      return isSetAvgStayTime();
    case PV_RATE:
      return isSetPvRate();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof PageStats)
      return this.equals((PageStats)that);
    return false;
  }

  public boolean equals(PageStats that) {
    if (that == null)
      return false;

    boolean this_present_times = true && this.isSetTimes();
    boolean that_present_times = true && that.isSetTimes();
    if (this_present_times || that_present_times) {
      if (!(this_present_times && that_present_times))
        return false;
      if (!this.times.equals(that.times))
        return false;
    }

    boolean this_present_pageUrl = true && this.isSetPageUrl();
    boolean that_present_pageUrl = true && that.isSetPageUrl();
    if (this_present_pageUrl || that_present_pageUrl) {
      if (!(this_present_pageUrl && that_present_pageUrl))
        return false;
      if (!this.pageUrl.equals(that.pageUrl))
        return false;
    }

    boolean this_present_pageDesc = true && this.isSetPageDesc();
    boolean that_present_pageDesc = true && that.isSetPageDesc();
    if (this_present_pageDesc || that_present_pageDesc) {
      if (!(this_present_pageDesc && that_present_pageDesc))
        return false;
      if (!this.pageDesc.equals(that.pageDesc))
        return false;
    }

    boolean this_present_pv = true && this.isSetPv();
    boolean that_present_pv = true && that.isSetPv();
    if (this_present_pv || that_present_pv) {
      if (!(this_present_pv && that_present_pv))
        return false;
      if (this.pv != that.pv)
        return false;
    }

    boolean this_present_uv = true && this.isSetUv();
    boolean that_present_uv = true && that.isSetUv();
    if (this_present_uv || that_present_uv) {
      if (!(this_present_uv && that_present_uv))
        return false;
      if (this.uv != that.uv)
        return false;
    }

    boolean this_present_ipCount = true && this.isSetIpCount();
    boolean that_present_ipCount = true && that.isSetIpCount();
    if (this_present_ipCount || that_present_ipCount) {
      if (!(this_present_ipCount && that_present_ipCount))
        return false;
      if (this.ipCount != that.ipCount)
        return false;
    }

    boolean this_present_entryPageCount = true && this.isSetEntryPageCount();
    boolean that_present_entryPageCount = true && that.isSetEntryPageCount();
    if (this_present_entryPageCount || that_present_entryPageCount) {
      if (!(this_present_entryPageCount && that_present_entryPageCount))
        return false;
      if (this.entryPageCount != that.entryPageCount)
        return false;
    }

    boolean this_present_nextPageCount = true && this.isSetNextPageCount();
    boolean that_present_nextPageCount = true && that.isSetNextPageCount();
    if (this_present_nextPageCount || that_present_nextPageCount) {
      if (!(this_present_nextPageCount && that_present_nextPageCount))
        return false;
      if (this.nextPageCount != that.nextPageCount)
        return false;
    }

    boolean this_present_outPageCount = true && this.isSetOutPageCount();
    boolean that_present_outPageCount = true && that.isSetOutPageCount();
    if (this_present_outPageCount || that_present_outPageCount) {
      if (!(this_present_outPageCount && that_present_outPageCount))
        return false;
      if (this.outPageCount != that.outPageCount)
        return false;
    }

    boolean this_present_outRate = true && this.isSetOutRate();
    boolean that_present_outRate = true && that.isSetOutRate();
    if (this_present_outRate || that_present_outRate) {
      if (!(this_present_outRate && that_present_outRate))
        return false;
      if (!this.outRate.equals(that.outRate))
        return false;
    }

    boolean this_present_avgStayTime = true && this.isSetAvgStayTime();
    boolean that_present_avgStayTime = true && that.isSetAvgStayTime();
    if (this_present_avgStayTime || that_present_avgStayTime) {
      if (!(this_present_avgStayTime && that_present_avgStayTime))
        return false;
      if (!this.avgStayTime.equals(that.avgStayTime))
        return false;
    }

    boolean this_present_pvRate = true && this.isSetPvRate();
    boolean that_present_pvRate = true && that.isSetPvRate();
    if (this_present_pvRate || that_present_pvRate) {
      if (!(this_present_pvRate && that_present_pvRate))
        return false;
      if (!this.pvRate.equals(that.pvRate))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(PageStats other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetTimes()).compareTo(other.isSetTimes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTimes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.times, other.times);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPageUrl()).compareTo(other.isSetPageUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPageUrl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageUrl, other.pageUrl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPageDesc()).compareTo(other.isSetPageDesc());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPageDesc()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageDesc, other.pageDesc);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPv()).compareTo(other.isSetPv());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPv()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pv, other.pv);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUv()).compareTo(other.isSetUv());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUv()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uv, other.uv);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIpCount()).compareTo(other.isSetIpCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIpCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ipCount, other.ipCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEntryPageCount()).compareTo(other.isSetEntryPageCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEntryPageCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.entryPageCount, other.entryPageCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNextPageCount()).compareTo(other.isSetNextPageCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNextPageCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nextPageCount, other.nextPageCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOutPageCount()).compareTo(other.isSetOutPageCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOutPageCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.outPageCount, other.outPageCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOutRate()).compareTo(other.isSetOutRate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOutRate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.outRate, other.outRate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAvgStayTime()).compareTo(other.isSetAvgStayTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAvgStayTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.avgStayTime, other.avgStayTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPvRate()).compareTo(other.isSetPvRate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPvRate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pvRate, other.pvRate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("PageStats(");
    boolean first = true;

    if (isSetTimes()) {
      sb.append("times:");
      if (this.times == null) {
        sb.append("null");
      } else {
        sb.append(this.times);
      }
      first = false;
    }
    if (isSetPageUrl()) {
      if (!first) sb.append(", ");
      sb.append("pageUrl:");
      if (this.pageUrl == null) {
        sb.append("null");
      } else {
        sb.append(this.pageUrl);
      }
      first = false;
    }
    if (isSetPageDesc()) {
      if (!first) sb.append(", ");
      sb.append("pageDesc:");
      if (this.pageDesc == null) {
        sb.append("null");
      } else {
        sb.append(this.pageDesc);
      }
      first = false;
    }
    if (isSetPv()) {
      if (!first) sb.append(", ");
      sb.append("pv:");
      sb.append(this.pv);
      first = false;
    }
    if (isSetUv()) {
      if (!first) sb.append(", ");
      sb.append("uv:");
      sb.append(this.uv);
      first = false;
    }
    if (isSetIpCount()) {
      if (!first) sb.append(", ");
      sb.append("ipCount:");
      sb.append(this.ipCount);
      first = false;
    }
    if (isSetEntryPageCount()) {
      if (!first) sb.append(", ");
      sb.append("entryPageCount:");
      sb.append(this.entryPageCount);
      first = false;
    }
    if (isSetNextPageCount()) {
      if (!first) sb.append(", ");
      sb.append("nextPageCount:");
      sb.append(this.nextPageCount);
      first = false;
    }
    if (isSetOutPageCount()) {
      if (!first) sb.append(", ");
      sb.append("outPageCount:");
      sb.append(this.outPageCount);
      first = false;
    }
    if (isSetOutRate()) {
      if (!first) sb.append(", ");
      sb.append("outRate:");
      if (this.outRate == null) {
        sb.append("null");
      } else {
        sb.append(this.outRate);
      }
      first = false;
    }
    if (isSetAvgStayTime()) {
      if (!first) sb.append(", ");
      sb.append("avgStayTime:");
      if (this.avgStayTime == null) {
        sb.append("null");
      } else {
        sb.append(this.avgStayTime);
      }
      first = false;
    }
    if (isSetPvRate()) {
      if (!first) sb.append(", ");
      sb.append("pvRate:");
      if (this.pvRate == null) {
        sb.append("null");
      } else {
        sb.append(this.pvRate);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class PageStatsStandardSchemeFactory implements SchemeFactory {
    public PageStatsStandardScheme getScheme() {
      return new PageStatsStandardScheme();
    }
  }

  private static class PageStatsStandardScheme extends StandardScheme<PageStats> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, PageStats struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TIMES
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.times = iprot.readString();
              struct.setTimesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PAGE_URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.pageUrl = iprot.readString();
              struct.setPageUrlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PAGE_DESC
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.pageDesc = iprot.readString();
              struct.setPageDescIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // PV
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.pv = iprot.readI64();
              struct.setPvIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // UV
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.uv = iprot.readI64();
              struct.setUvIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // IP_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.ipCount = iprot.readI64();
              struct.setIpCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // ENTRY_PAGE_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.entryPageCount = iprot.readI64();
              struct.setEntryPageCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // NEXT_PAGE_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.nextPageCount = iprot.readI64();
              struct.setNextPageCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // OUT_PAGE_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.outPageCount = iprot.readI64();
              struct.setOutPageCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // OUT_RATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.outRate = iprot.readString();
              struct.setOutRateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // AVG_STAY_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.avgStayTime = iprot.readString();
              struct.setAvgStayTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // PV_RATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.pvRate = iprot.readString();
              struct.setPvRateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, PageStats struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.times != null) {
        if (struct.isSetTimes()) {
          oprot.writeFieldBegin(TIMES_FIELD_DESC);
          oprot.writeString(struct.times);
          oprot.writeFieldEnd();
        }
      }
      if (struct.pageUrl != null) {
        if (struct.isSetPageUrl()) {
          oprot.writeFieldBegin(PAGE_URL_FIELD_DESC);
          oprot.writeString(struct.pageUrl);
          oprot.writeFieldEnd();
        }
      }
      if (struct.pageDesc != null) {
        if (struct.isSetPageDesc()) {
          oprot.writeFieldBegin(PAGE_DESC_FIELD_DESC);
          oprot.writeString(struct.pageDesc);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetPv()) {
        oprot.writeFieldBegin(PV_FIELD_DESC);
        oprot.writeI64(struct.pv);
        oprot.writeFieldEnd();
      }
      if (struct.isSetUv()) {
        oprot.writeFieldBegin(UV_FIELD_DESC);
        oprot.writeI64(struct.uv);
        oprot.writeFieldEnd();
      }
      if (struct.isSetIpCount()) {
        oprot.writeFieldBegin(IP_COUNT_FIELD_DESC);
        oprot.writeI64(struct.ipCount);
        oprot.writeFieldEnd();
      }
      if (struct.isSetEntryPageCount()) {
        oprot.writeFieldBegin(ENTRY_PAGE_COUNT_FIELD_DESC);
        oprot.writeI64(struct.entryPageCount);
        oprot.writeFieldEnd();
      }
      if (struct.isSetNextPageCount()) {
        oprot.writeFieldBegin(NEXT_PAGE_COUNT_FIELD_DESC);
        oprot.writeI64(struct.nextPageCount);
        oprot.writeFieldEnd();
      }
      if (struct.isSetOutPageCount()) {
        oprot.writeFieldBegin(OUT_PAGE_COUNT_FIELD_DESC);
        oprot.writeI64(struct.outPageCount);
        oprot.writeFieldEnd();
      }
      if (struct.outRate != null) {
        if (struct.isSetOutRate()) {
          oprot.writeFieldBegin(OUT_RATE_FIELD_DESC);
          oprot.writeString(struct.outRate);
          oprot.writeFieldEnd();
        }
      }
      if (struct.avgStayTime != null) {
        if (struct.isSetAvgStayTime()) {
          oprot.writeFieldBegin(AVG_STAY_TIME_FIELD_DESC);
          oprot.writeString(struct.avgStayTime);
          oprot.writeFieldEnd();
        }
      }
      if (struct.pvRate != null) {
        if (struct.isSetPvRate()) {
          oprot.writeFieldBegin(PV_RATE_FIELD_DESC);
          oprot.writeString(struct.pvRate);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class PageStatsTupleSchemeFactory implements SchemeFactory {
    public PageStatsTupleScheme getScheme() {
      return new PageStatsTupleScheme();
    }
  }

  private static class PageStatsTupleScheme extends TupleScheme<PageStats> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, PageStats struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetTimes()) {
        optionals.set(0);
      }
      if (struct.isSetPageUrl()) {
        optionals.set(1);
      }
      if (struct.isSetPageDesc()) {
        optionals.set(2);
      }
      if (struct.isSetPv()) {
        optionals.set(3);
      }
      if (struct.isSetUv()) {
        optionals.set(4);
      }
      if (struct.isSetIpCount()) {
        optionals.set(5);
      }
      if (struct.isSetEntryPageCount()) {
        optionals.set(6);
      }
      if (struct.isSetNextPageCount()) {
        optionals.set(7);
      }
      if (struct.isSetOutPageCount()) {
        optionals.set(8);
      }
      if (struct.isSetOutRate()) {
        optionals.set(9);
      }
      if (struct.isSetAvgStayTime()) {
        optionals.set(10);
      }
      if (struct.isSetPvRate()) {
        optionals.set(11);
      }
      oprot.writeBitSet(optionals, 12);
      if (struct.isSetTimes()) {
        oprot.writeString(struct.times);
      }
      if (struct.isSetPageUrl()) {
        oprot.writeString(struct.pageUrl);
      }
      if (struct.isSetPageDesc()) {
        oprot.writeString(struct.pageDesc);
      }
      if (struct.isSetPv()) {
        oprot.writeI64(struct.pv);
      }
      if (struct.isSetUv()) {
        oprot.writeI64(struct.uv);
      }
      if (struct.isSetIpCount()) {
        oprot.writeI64(struct.ipCount);
      }
      if (struct.isSetEntryPageCount()) {
        oprot.writeI64(struct.entryPageCount);
      }
      if (struct.isSetNextPageCount()) {
        oprot.writeI64(struct.nextPageCount);
      }
      if (struct.isSetOutPageCount()) {
        oprot.writeI64(struct.outPageCount);
      }
      if (struct.isSetOutRate()) {
        oprot.writeString(struct.outRate);
      }
      if (struct.isSetAvgStayTime()) {
        oprot.writeString(struct.avgStayTime);
      }
      if (struct.isSetPvRate()) {
        oprot.writeString(struct.pvRate);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, PageStats struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(12);
      if (incoming.get(0)) {
        struct.times = iprot.readString();
        struct.setTimesIsSet(true);
      }
      if (incoming.get(1)) {
        struct.pageUrl = iprot.readString();
        struct.setPageUrlIsSet(true);
      }
      if (incoming.get(2)) {
        struct.pageDesc = iprot.readString();
        struct.setPageDescIsSet(true);
      }
      if (incoming.get(3)) {
        struct.pv = iprot.readI64();
        struct.setPvIsSet(true);
      }
      if (incoming.get(4)) {
        struct.uv = iprot.readI64();
        struct.setUvIsSet(true);
      }
      if (incoming.get(5)) {
        struct.ipCount = iprot.readI64();
        struct.setIpCountIsSet(true);
      }
      if (incoming.get(6)) {
        struct.entryPageCount = iprot.readI64();
        struct.setEntryPageCountIsSet(true);
      }
      if (incoming.get(7)) {
        struct.nextPageCount = iprot.readI64();
        struct.setNextPageCountIsSet(true);
      }
      if (incoming.get(8)) {
        struct.outPageCount = iprot.readI64();
        struct.setOutPageCountIsSet(true);
      }
      if (incoming.get(9)) {
        struct.outRate = iprot.readString();
        struct.setOutRateIsSet(true);
      }
      if (incoming.get(10)) {
        struct.avgStayTime = iprot.readString();
        struct.setAvgStayTimeIsSet(true);
      }
      if (incoming.get(11)) {
        struct.pvRate = iprot.readString();
        struct.setPvRateIsSet(true);
      }
    }
  }

}


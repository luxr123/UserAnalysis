/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.tracker.api.thrift.search;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * 站内搜索结果
 */
public class SearchStats implements org.apache.thrift.TBase<SearchStats, SearchStats._Fields>, java.io.Serializable, Cloneable, Comparable<SearchStats> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SearchStats");

  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("date", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField FIELD_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("fieldId", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField SEARCH_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("searchCount", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField SEARCH_USER_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("searchUserCount", org.apache.thrift.protocol.TType.I64, (short)5);
  private static final org.apache.thrift.protocol.TField IP_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("ipCount", org.apache.thrift.protocol.TType.I64, (short)6);
  private static final org.apache.thrift.protocol.TField SEARCH_COUNT_RATE_FIELD_DESC = new org.apache.thrift.protocol.TField("searchCountRate", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField AVG_SEARCH_COST_FIELD_DESC = new org.apache.thrift.protocol.TField("avgSearchCost", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField MAX_SEARCH_COST_FIELD_DESC = new org.apache.thrift.protocol.TField("maxSearchCost", org.apache.thrift.protocol.TType.I64, (short)9);
  private static final org.apache.thrift.protocol.TField PAGE_TURNING_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("pageTurningCount", org.apache.thrift.protocol.TType.I64, (short)10);
  private static final org.apache.thrift.protocol.TField MAIN_PAGE_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("mainPageCount", org.apache.thrift.protocol.TType.I64, (short)11);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new SearchStatsStandardSchemeFactory());
    schemes.put(TupleScheme.class, new SearchStatsTupleSchemeFactory());
  }

  public String name; // optional
  public String date; // optional
  public int fieldId; // optional
  public long searchCount; // optional
  public long searchUserCount; // optional
  public long ipCount; // optional
  public String searchCountRate; // optional
  public int avgSearchCost; // optional
  public long maxSearchCost; // optional
  public long pageTurningCount; // optional
  public long mainPageCount; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    NAME((short)1, "name"),
    DATE((short)2, "date"),
    FIELD_ID((short)3, "fieldId"),
    SEARCH_COUNT((short)4, "searchCount"),
    SEARCH_USER_COUNT((short)5, "searchUserCount"),
    IP_COUNT((short)6, "ipCount"),
    SEARCH_COUNT_RATE((short)7, "searchCountRate"),
    AVG_SEARCH_COST((short)8, "avgSearchCost"),
    MAX_SEARCH_COST((short)9, "maxSearchCost"),
    PAGE_TURNING_COUNT((short)10, "pageTurningCount"),
    MAIN_PAGE_COUNT((short)11, "mainPageCount");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // NAME
          return NAME;
        case 2: // DATE
          return DATE;
        case 3: // FIELD_ID
          return FIELD_ID;
        case 4: // SEARCH_COUNT
          return SEARCH_COUNT;
        case 5: // SEARCH_USER_COUNT
          return SEARCH_USER_COUNT;
        case 6: // IP_COUNT
          return IP_COUNT;
        case 7: // SEARCH_COUNT_RATE
          return SEARCH_COUNT_RATE;
        case 8: // AVG_SEARCH_COST
          return AVG_SEARCH_COST;
        case 9: // MAX_SEARCH_COST
          return MAX_SEARCH_COST;
        case 10: // PAGE_TURNING_COUNT
          return PAGE_TURNING_COUNT;
        case 11: // MAIN_PAGE_COUNT
          return MAIN_PAGE_COUNT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __FIELDID_ISSET_ID = 0;
  private static final int __SEARCHCOUNT_ISSET_ID = 1;
  private static final int __SEARCHUSERCOUNT_ISSET_ID = 2;
  private static final int __IPCOUNT_ISSET_ID = 3;
  private static final int __AVGSEARCHCOST_ISSET_ID = 4;
  private static final int __MAXSEARCHCOST_ISSET_ID = 5;
  private static final int __PAGETURNINGCOUNT_ISSET_ID = 6;
  private static final int __MAINPAGECOUNT_ISSET_ID = 7;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.NAME,_Fields.DATE,_Fields.FIELD_ID,_Fields.SEARCH_COUNT,_Fields.SEARCH_USER_COUNT,_Fields.IP_COUNT,_Fields.SEARCH_COUNT_RATE,_Fields.AVG_SEARCH_COST,_Fields.MAX_SEARCH_COST,_Fields.PAGE_TURNING_COUNT,_Fields.MAIN_PAGE_COUNT};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DATE, new org.apache.thrift.meta_data.FieldMetaData("date", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FIELD_ID, new org.apache.thrift.meta_data.FieldMetaData("fieldId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SEARCH_COUNT, new org.apache.thrift.meta_data.FieldMetaData("searchCount", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.SEARCH_USER_COUNT, new org.apache.thrift.meta_data.FieldMetaData("searchUserCount", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.IP_COUNT, new org.apache.thrift.meta_data.FieldMetaData("ipCount", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.SEARCH_COUNT_RATE, new org.apache.thrift.meta_data.FieldMetaData("searchCountRate", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.AVG_SEARCH_COST, new org.apache.thrift.meta_data.FieldMetaData("avgSearchCost", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MAX_SEARCH_COST, new org.apache.thrift.meta_data.FieldMetaData("maxSearchCost", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.PAGE_TURNING_COUNT, new org.apache.thrift.meta_data.FieldMetaData("pageTurningCount", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.MAIN_PAGE_COUNT, new org.apache.thrift.meta_data.FieldMetaData("mainPageCount", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SearchStats.class, metaDataMap);
  }

  public SearchStats() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SearchStats(SearchStats other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetName()) {
      this.name = other.name;
    }
    if (other.isSetDate()) {
      this.date = other.date;
    }
    this.fieldId = other.fieldId;
    this.searchCount = other.searchCount;
    this.searchUserCount = other.searchUserCount;
    this.ipCount = other.ipCount;
    if (other.isSetSearchCountRate()) {
      this.searchCountRate = other.searchCountRate;
    }
    this.avgSearchCost = other.avgSearchCost;
    this.maxSearchCost = other.maxSearchCost;
    this.pageTurningCount = other.pageTurningCount;
    this.mainPageCount = other.mainPageCount;
  }

  public SearchStats deepCopy() {
    return new SearchStats(this);
  }

  @Override
  public void clear() {
    this.name = null;
    this.date = null;
    setFieldIdIsSet(false);
    this.fieldId = 0;
    setSearchCountIsSet(false);
    this.searchCount = 0;
    setSearchUserCountIsSet(false);
    this.searchUserCount = 0;
    setIpCountIsSet(false);
    this.ipCount = 0;
    this.searchCountRate = null;
    setAvgSearchCostIsSet(false);
    this.avgSearchCost = 0;
    setMaxSearchCostIsSet(false);
    this.maxSearchCost = 0;
    setPageTurningCountIsSet(false);
    this.pageTurningCount = 0;
    setMainPageCountIsSet(false);
    this.mainPageCount = 0;
  }

  public String getName() {
    return this.name;
  }

  public SearchStats setName(String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public String getDate() {
    return this.date;
  }

  public SearchStats setDate(String date) {
    this.date = date;
    return this;
  }

  public void unsetDate() {
    this.date = null;
  }

  /** Returns true if field date is set (has been assigned a value) and false otherwise */
  public boolean isSetDate() {
    return this.date != null;
  }

  public void setDateIsSet(boolean value) {
    if (!value) {
      this.date = null;
    }
  }

  public int getFieldId() {
    return this.fieldId;
  }

  public SearchStats setFieldId(int fieldId) {
    this.fieldId = fieldId;
    setFieldIdIsSet(true);
    return this;
  }

  public void unsetFieldId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FIELDID_ISSET_ID);
  }

  /** Returns true if field fieldId is set (has been assigned a value) and false otherwise */
  public boolean isSetFieldId() {
    return EncodingUtils.testBit(__isset_bitfield, __FIELDID_ISSET_ID);
  }

  public void setFieldIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FIELDID_ISSET_ID, value);
  }

  public long getSearchCount() {
    return this.searchCount;
  }

  public SearchStats setSearchCount(long searchCount) {
    this.searchCount = searchCount;
    setSearchCountIsSet(true);
    return this;
  }

  public void unsetSearchCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SEARCHCOUNT_ISSET_ID);
  }

  /** Returns true if field searchCount is set (has been assigned a value) and false otherwise */
  public boolean isSetSearchCount() {
    return EncodingUtils.testBit(__isset_bitfield, __SEARCHCOUNT_ISSET_ID);
  }

  public void setSearchCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SEARCHCOUNT_ISSET_ID, value);
  }

  public long getSearchUserCount() {
    return this.searchUserCount;
  }

  public SearchStats setSearchUserCount(long searchUserCount) {
    this.searchUserCount = searchUserCount;
    setSearchUserCountIsSet(true);
    return this;
  }

  public void unsetSearchUserCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SEARCHUSERCOUNT_ISSET_ID);
  }

  /** Returns true if field searchUserCount is set (has been assigned a value) and false otherwise */
  public boolean isSetSearchUserCount() {
    return EncodingUtils.testBit(__isset_bitfield, __SEARCHUSERCOUNT_ISSET_ID);
  }

  public void setSearchUserCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SEARCHUSERCOUNT_ISSET_ID, value);
  }

  public long getIpCount() {
    return this.ipCount;
  }

  public SearchStats setIpCount(long ipCount) {
    this.ipCount = ipCount;
    setIpCountIsSet(true);
    return this;
  }

  public void unsetIpCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __IPCOUNT_ISSET_ID);
  }

  /** Returns true if field ipCount is set (has been assigned a value) and false otherwise */
  public boolean isSetIpCount() {
    return EncodingUtils.testBit(__isset_bitfield, __IPCOUNT_ISSET_ID);
  }

  public void setIpCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __IPCOUNT_ISSET_ID, value);
  }

  public String getSearchCountRate() {
    return this.searchCountRate;
  }

  public SearchStats setSearchCountRate(String searchCountRate) {
    this.searchCountRate = searchCountRate;
    return this;
  }

  public void unsetSearchCountRate() {
    this.searchCountRate = null;
  }

  /** Returns true if field searchCountRate is set (has been assigned a value) and false otherwise */
  public boolean isSetSearchCountRate() {
    return this.searchCountRate != null;
  }

  public void setSearchCountRateIsSet(boolean value) {
    if (!value) {
      this.searchCountRate = null;
    }
  }

  public int getAvgSearchCost() {
    return this.avgSearchCost;
  }

  public SearchStats setAvgSearchCost(int avgSearchCost) {
    this.avgSearchCost = avgSearchCost;
    setAvgSearchCostIsSet(true);
    return this;
  }

  public void unsetAvgSearchCost() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __AVGSEARCHCOST_ISSET_ID);
  }

  /** Returns true if field avgSearchCost is set (has been assigned a value) and false otherwise */
  public boolean isSetAvgSearchCost() {
    return EncodingUtils.testBit(__isset_bitfield, __AVGSEARCHCOST_ISSET_ID);
  }

  public void setAvgSearchCostIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __AVGSEARCHCOST_ISSET_ID, value);
  }

  public long getMaxSearchCost() {
    return this.maxSearchCost;
  }

  public SearchStats setMaxSearchCost(long maxSearchCost) {
    this.maxSearchCost = maxSearchCost;
    setMaxSearchCostIsSet(true);
    return this;
  }

  public void unsetMaxSearchCost() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MAXSEARCHCOST_ISSET_ID);
  }

  /** Returns true if field maxSearchCost is set (has been assigned a value) and false otherwise */
  public boolean isSetMaxSearchCost() {
    return EncodingUtils.testBit(__isset_bitfield, __MAXSEARCHCOST_ISSET_ID);
  }

  public void setMaxSearchCostIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MAXSEARCHCOST_ISSET_ID, value);
  }

  public long getPageTurningCount() {
    return this.pageTurningCount;
  }

  public SearchStats setPageTurningCount(long pageTurningCount) {
    this.pageTurningCount = pageTurningCount;
    setPageTurningCountIsSet(true);
    return this;
  }

  public void unsetPageTurningCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGETURNINGCOUNT_ISSET_ID);
  }

  /** Returns true if field pageTurningCount is set (has been assigned a value) and false otherwise */
  public boolean isSetPageTurningCount() {
    return EncodingUtils.testBit(__isset_bitfield, __PAGETURNINGCOUNT_ISSET_ID);
  }

  public void setPageTurningCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGETURNINGCOUNT_ISSET_ID, value);
  }

  public long getMainPageCount() {
    return this.mainPageCount;
  }

  public SearchStats setMainPageCount(long mainPageCount) {
    this.mainPageCount = mainPageCount;
    setMainPageCountIsSet(true);
    return this;
  }

  public void unsetMainPageCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MAINPAGECOUNT_ISSET_ID);
  }

  /** Returns true if field mainPageCount is set (has been assigned a value) and false otherwise */
  public boolean isSetMainPageCount() {
    return EncodingUtils.testBit(__isset_bitfield, __MAINPAGECOUNT_ISSET_ID);
  }

  public void setMainPageCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MAINPAGECOUNT_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;

    case DATE:
      if (value == null) {
        unsetDate();
      } else {
        setDate((String)value);
      }
      break;

    case FIELD_ID:
      if (value == null) {
        unsetFieldId();
      } else {
        setFieldId((Integer)value);
      }
      break;

    case SEARCH_COUNT:
      if (value == null) {
        unsetSearchCount();
      } else {
        setSearchCount((Long)value);
      }
      break;

    case SEARCH_USER_COUNT:
      if (value == null) {
        unsetSearchUserCount();
      } else {
        setSearchUserCount((Long)value);
      }
      break;

    case IP_COUNT:
      if (value == null) {
        unsetIpCount();
      } else {
        setIpCount((Long)value);
      }
      break;

    case SEARCH_COUNT_RATE:
      if (value == null) {
        unsetSearchCountRate();
      } else {
        setSearchCountRate((String)value);
      }
      break;

    case AVG_SEARCH_COST:
      if (value == null) {
        unsetAvgSearchCost();
      } else {
        setAvgSearchCost((Integer)value);
      }
      break;

    case MAX_SEARCH_COST:
      if (value == null) {
        unsetMaxSearchCost();
      } else {
        setMaxSearchCost((Long)value);
      }
      break;

    case PAGE_TURNING_COUNT:
      if (value == null) {
        unsetPageTurningCount();
      } else {
        setPageTurningCount((Long)value);
      }
      break;

    case MAIN_PAGE_COUNT:
      if (value == null) {
        unsetMainPageCount();
      } else {
        setMainPageCount((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case NAME:
      return getName();

    case DATE:
      return getDate();

    case FIELD_ID:
      return Integer.valueOf(getFieldId());

    case SEARCH_COUNT:
      return Long.valueOf(getSearchCount());

    case SEARCH_USER_COUNT:
      return Long.valueOf(getSearchUserCount());

    case IP_COUNT:
      return Long.valueOf(getIpCount());

    case SEARCH_COUNT_RATE:
      return getSearchCountRate();

    case AVG_SEARCH_COST:
      return Integer.valueOf(getAvgSearchCost());

    case MAX_SEARCH_COST:
      return Long.valueOf(getMaxSearchCost());

    case PAGE_TURNING_COUNT:
      return Long.valueOf(getPageTurningCount());

    case MAIN_PAGE_COUNT:
      return Long.valueOf(getMainPageCount());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case NAME:
      return isSetName();
    case DATE:
      return isSetDate();
    case FIELD_ID:
      return isSetFieldId();
    case SEARCH_COUNT:
      return isSetSearchCount();
    case SEARCH_USER_COUNT:
      return isSetSearchUserCount();
    case IP_COUNT:
      return isSetIpCount();
    case SEARCH_COUNT_RATE:
      return isSetSearchCountRate();
    case AVG_SEARCH_COST:
      return isSetAvgSearchCost();
    case MAX_SEARCH_COST:
      return isSetMaxSearchCost();
    case PAGE_TURNING_COUNT:
      return isSetPageTurningCount();
    case MAIN_PAGE_COUNT:
      return isSetMainPageCount();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SearchStats)
      return this.equals((SearchStats)that);
    return false;
  }

  public boolean equals(SearchStats that) {
    if (that == null)
      return false;

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_date = true && this.isSetDate();
    boolean that_present_date = true && that.isSetDate();
    if (this_present_date || that_present_date) {
      if (!(this_present_date && that_present_date))
        return false;
      if (!this.date.equals(that.date))
        return false;
    }

    boolean this_present_fieldId = true && this.isSetFieldId();
    boolean that_present_fieldId = true && that.isSetFieldId();
    if (this_present_fieldId || that_present_fieldId) {
      if (!(this_present_fieldId && that_present_fieldId))
        return false;
      if (this.fieldId != that.fieldId)
        return false;
    }

    boolean this_present_searchCount = true && this.isSetSearchCount();
    boolean that_present_searchCount = true && that.isSetSearchCount();
    if (this_present_searchCount || that_present_searchCount) {
      if (!(this_present_searchCount && that_present_searchCount))
        return false;
      if (this.searchCount != that.searchCount)
        return false;
    }

    boolean this_present_searchUserCount = true && this.isSetSearchUserCount();
    boolean that_present_searchUserCount = true && that.isSetSearchUserCount();
    if (this_present_searchUserCount || that_present_searchUserCount) {
      if (!(this_present_searchUserCount && that_present_searchUserCount))
        return false;
      if (this.searchUserCount != that.searchUserCount)
        return false;
    }

    boolean this_present_ipCount = true && this.isSetIpCount();
    boolean that_present_ipCount = true && that.isSetIpCount();
    if (this_present_ipCount || that_present_ipCount) {
      if (!(this_present_ipCount && that_present_ipCount))
        return false;
      if (this.ipCount != that.ipCount)
        return false;
    }

    boolean this_present_searchCountRate = true && this.isSetSearchCountRate();
    boolean that_present_searchCountRate = true && that.isSetSearchCountRate();
    if (this_present_searchCountRate || that_present_searchCountRate) {
      if (!(this_present_searchCountRate && that_present_searchCountRate))
        return false;
      if (!this.searchCountRate.equals(that.searchCountRate))
        return false;
    }

    boolean this_present_avgSearchCost = true && this.isSetAvgSearchCost();
    boolean that_present_avgSearchCost = true && that.isSetAvgSearchCost();
    if (this_present_avgSearchCost || that_present_avgSearchCost) {
      if (!(this_present_avgSearchCost && that_present_avgSearchCost))
        return false;
      if (this.avgSearchCost != that.avgSearchCost)
        return false;
    }

    boolean this_present_maxSearchCost = true && this.isSetMaxSearchCost();
    boolean that_present_maxSearchCost = true && that.isSetMaxSearchCost();
    if (this_present_maxSearchCost || that_present_maxSearchCost) {
      if (!(this_present_maxSearchCost && that_present_maxSearchCost))
        return false;
      if (this.maxSearchCost != that.maxSearchCost)
        return false;
    }

    boolean this_present_pageTurningCount = true && this.isSetPageTurningCount();
    boolean that_present_pageTurningCount = true && that.isSetPageTurningCount();
    if (this_present_pageTurningCount || that_present_pageTurningCount) {
      if (!(this_present_pageTurningCount && that_present_pageTurningCount))
        return false;
      if (this.pageTurningCount != that.pageTurningCount)
        return false;
    }

    boolean this_present_mainPageCount = true && this.isSetMainPageCount();
    boolean that_present_mainPageCount = true && that.isSetMainPageCount();
    if (this_present_mainPageCount || that_present_mainPageCount) {
      if (!(this_present_mainPageCount && that_present_mainPageCount))
        return false;
      if (this.mainPageCount != that.mainPageCount)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(SearchStats other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDate()).compareTo(other.isSetDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.date, other.date);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFieldId()).compareTo(other.isSetFieldId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFieldId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fieldId, other.fieldId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSearchCount()).compareTo(other.isSetSearchCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSearchCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.searchCount, other.searchCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSearchUserCount()).compareTo(other.isSetSearchUserCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSearchUserCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.searchUserCount, other.searchUserCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIpCount()).compareTo(other.isSetIpCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIpCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ipCount, other.ipCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSearchCountRate()).compareTo(other.isSetSearchCountRate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSearchCountRate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.searchCountRate, other.searchCountRate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAvgSearchCost()).compareTo(other.isSetAvgSearchCost());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAvgSearchCost()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.avgSearchCost, other.avgSearchCost);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMaxSearchCost()).compareTo(other.isSetMaxSearchCost());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMaxSearchCost()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.maxSearchCost, other.maxSearchCost);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPageTurningCount()).compareTo(other.isSetPageTurningCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPageTurningCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageTurningCount, other.pageTurningCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMainPageCount()).compareTo(other.isSetMainPageCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMainPageCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mainPageCount, other.mainPageCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("SearchStats(");
    boolean first = true;

    if (isSetName()) {
      sb.append("name:");
      if (this.name == null) {
        sb.append("null");
      } else {
        sb.append(this.name);
      }
      first = false;
    }
    if (isSetDate()) {
      if (!first) sb.append(", ");
      sb.append("date:");
      if (this.date == null) {
        sb.append("null");
      } else {
        sb.append(this.date);
      }
      first = false;
    }
    if (isSetFieldId()) {
      if (!first) sb.append(", ");
      sb.append("fieldId:");
      sb.append(this.fieldId);
      first = false;
    }
    if (isSetSearchCount()) {
      if (!first) sb.append(", ");
      sb.append("searchCount:");
      sb.append(this.searchCount);
      first = false;
    }
    if (isSetSearchUserCount()) {
      if (!first) sb.append(", ");
      sb.append("searchUserCount:");
      sb.append(this.searchUserCount);
      first = false;
    }
    if (isSetIpCount()) {
      if (!first) sb.append(", ");
      sb.append("ipCount:");
      sb.append(this.ipCount);
      first = false;
    }
    if (isSetSearchCountRate()) {
      if (!first) sb.append(", ");
      sb.append("searchCountRate:");
      if (this.searchCountRate == null) {
        sb.append("null");
      } else {
        sb.append(this.searchCountRate);
      }
      first = false;
    }
    if (isSetAvgSearchCost()) {
      if (!first) sb.append(", ");
      sb.append("avgSearchCost:");
      sb.append(this.avgSearchCost);
      first = false;
    }
    if (isSetMaxSearchCost()) {
      if (!first) sb.append(", ");
      sb.append("maxSearchCost:");
      sb.append(this.maxSearchCost);
      first = false;
    }
    if (isSetPageTurningCount()) {
      if (!first) sb.append(", ");
      sb.append("pageTurningCount:");
      sb.append(this.pageTurningCount);
      first = false;
    }
    if (isSetMainPageCount()) {
      if (!first) sb.append(", ");
      sb.append("mainPageCount:");
      sb.append(this.mainPageCount);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SearchStatsStandardSchemeFactory implements SchemeFactory {
    public SearchStatsStandardScheme getScheme() {
      return new SearchStatsStandardScheme();
    }
  }

  private static class SearchStatsStandardScheme extends StandardScheme<SearchStats> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SearchStats struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.date = iprot.readString();
              struct.setDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // FIELD_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.fieldId = iprot.readI32();
              struct.setFieldIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // SEARCH_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.searchCount = iprot.readI64();
              struct.setSearchCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // SEARCH_USER_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.searchUserCount = iprot.readI64();
              struct.setSearchUserCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // IP_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.ipCount = iprot.readI64();
              struct.setIpCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // SEARCH_COUNT_RATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.searchCountRate = iprot.readString();
              struct.setSearchCountRateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // AVG_SEARCH_COST
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.avgSearchCost = iprot.readI32();
              struct.setAvgSearchCostIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // MAX_SEARCH_COST
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.maxSearchCost = iprot.readI64();
              struct.setMaxSearchCostIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // PAGE_TURNING_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.pageTurningCount = iprot.readI64();
              struct.setPageTurningCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // MAIN_PAGE_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.mainPageCount = iprot.readI64();
              struct.setMainPageCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SearchStats struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.name != null) {
        if (struct.isSetName()) {
          oprot.writeFieldBegin(NAME_FIELD_DESC);
          oprot.writeString(struct.name);
          oprot.writeFieldEnd();
        }
      }
      if (struct.date != null) {
        if (struct.isSetDate()) {
          oprot.writeFieldBegin(DATE_FIELD_DESC);
          oprot.writeString(struct.date);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetFieldId()) {
        oprot.writeFieldBegin(FIELD_ID_FIELD_DESC);
        oprot.writeI32(struct.fieldId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSearchCount()) {
        oprot.writeFieldBegin(SEARCH_COUNT_FIELD_DESC);
        oprot.writeI64(struct.searchCount);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSearchUserCount()) {
        oprot.writeFieldBegin(SEARCH_USER_COUNT_FIELD_DESC);
        oprot.writeI64(struct.searchUserCount);
        oprot.writeFieldEnd();
      }
      if (struct.isSetIpCount()) {
        oprot.writeFieldBegin(IP_COUNT_FIELD_DESC);
        oprot.writeI64(struct.ipCount);
        oprot.writeFieldEnd();
      }
      if (struct.searchCountRate != null) {
        if (struct.isSetSearchCountRate()) {
          oprot.writeFieldBegin(SEARCH_COUNT_RATE_FIELD_DESC);
          oprot.writeString(struct.searchCountRate);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetAvgSearchCost()) {
        oprot.writeFieldBegin(AVG_SEARCH_COST_FIELD_DESC);
        oprot.writeI32(struct.avgSearchCost);
        oprot.writeFieldEnd();
      }
      if (struct.isSetMaxSearchCost()) {
        oprot.writeFieldBegin(MAX_SEARCH_COST_FIELD_DESC);
        oprot.writeI64(struct.maxSearchCost);
        oprot.writeFieldEnd();
      }
      if (struct.isSetPageTurningCount()) {
        oprot.writeFieldBegin(PAGE_TURNING_COUNT_FIELD_DESC);
        oprot.writeI64(struct.pageTurningCount);
        oprot.writeFieldEnd();
      }
      if (struct.isSetMainPageCount()) {
        oprot.writeFieldBegin(MAIN_PAGE_COUNT_FIELD_DESC);
        oprot.writeI64(struct.mainPageCount);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SearchStatsTupleSchemeFactory implements SchemeFactory {
    public SearchStatsTupleScheme getScheme() {
      return new SearchStatsTupleScheme();
    }
  }

  private static class SearchStatsTupleScheme extends TupleScheme<SearchStats> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SearchStats struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetName()) {
        optionals.set(0);
      }
      if (struct.isSetDate()) {
        optionals.set(1);
      }
      if (struct.isSetFieldId()) {
        optionals.set(2);
      }
      if (struct.isSetSearchCount()) {
        optionals.set(3);
      }
      if (struct.isSetSearchUserCount()) {
        optionals.set(4);
      }
      if (struct.isSetIpCount()) {
        optionals.set(5);
      }
      if (struct.isSetSearchCountRate()) {
        optionals.set(6);
      }
      if (struct.isSetAvgSearchCost()) {
        optionals.set(7);
      }
      if (struct.isSetMaxSearchCost()) {
        optionals.set(8);
      }
      if (struct.isSetPageTurningCount()) {
        optionals.set(9);
      }
      if (struct.isSetMainPageCount()) {
        optionals.set(10);
      }
      oprot.writeBitSet(optionals, 11);
      if (struct.isSetName()) {
        oprot.writeString(struct.name);
      }
      if (struct.isSetDate()) {
        oprot.writeString(struct.date);
      }
      if (struct.isSetFieldId()) {
        oprot.writeI32(struct.fieldId);
      }
      if (struct.isSetSearchCount()) {
        oprot.writeI64(struct.searchCount);
      }
      if (struct.isSetSearchUserCount()) {
        oprot.writeI64(struct.searchUserCount);
      }
      if (struct.isSetIpCount()) {
        oprot.writeI64(struct.ipCount);
      }
      if (struct.isSetSearchCountRate()) {
        oprot.writeString(struct.searchCountRate);
      }
      if (struct.isSetAvgSearchCost()) {
        oprot.writeI32(struct.avgSearchCost);
      }
      if (struct.isSetMaxSearchCost()) {
        oprot.writeI64(struct.maxSearchCost);
      }
      if (struct.isSetPageTurningCount()) {
        oprot.writeI64(struct.pageTurningCount);
      }
      if (struct.isSetMainPageCount()) {
        oprot.writeI64(struct.mainPageCount);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SearchStats struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(11);
      if (incoming.get(0)) {
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
      }
      if (incoming.get(1)) {
        struct.date = iprot.readString();
        struct.setDateIsSet(true);
      }
      if (incoming.get(2)) {
        struct.fieldId = iprot.readI32();
        struct.setFieldIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.searchCount = iprot.readI64();
        struct.setSearchCountIsSet(true);
      }
      if (incoming.get(4)) {
        struct.searchUserCount = iprot.readI64();
        struct.setSearchUserCountIsSet(true);
      }
      if (incoming.get(5)) {
        struct.ipCount = iprot.readI64();
        struct.setIpCountIsSet(true);
      }
      if (incoming.get(6)) {
        struct.searchCountRate = iprot.readString();
        struct.setSearchCountRateIsSet(true);
      }
      if (incoming.get(7)) {
        struct.avgSearchCost = iprot.readI32();
        struct.setAvgSearchCostIsSet(true);
      }
      if (incoming.get(8)) {
        struct.maxSearchCost = iprot.readI64();
        struct.setMaxSearchCostIsSet(true);
      }
      if (incoming.get(9)) {
        struct.pageTurningCount = iprot.readI64();
        struct.setPageTurningCountIsSet(true);
      }
      if (incoming.get(10)) {
        struct.mainPageCount = iprot.readI64();
        struct.setMainPageCountIsSet(true);
      }
    }
  }

}


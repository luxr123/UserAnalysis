/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.tracker.api.thrift.search;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class TopResponseTimeStats implements org.apache.thrift.TBase<TopResponseTimeStats, TopResponseTimeStats._Fields>, java.io.Serializable, Cloneable, Comparable<TopResponseTimeStats> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TopResponseTimeStats");

  private static final org.apache.thrift.protocol.TField USER_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("userType", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField USER_TYPE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("userTypeName", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField IP_FIELD_DESC = new org.apache.thrift.protocol.TField("ip", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField COOKIE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("cookieId", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField VISIT_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("visitTime", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField RESPONSE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("responseTime", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField TOTAL_RESULT_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("totalResultCount", org.apache.thrift.protocol.TType.I64, (short)8);
  private static final org.apache.thrift.protocol.TField SEARCH_VALUE_STR_FIELD_DESC = new org.apache.thrift.protocol.TField("searchValueStr", org.apache.thrift.protocol.TType.STRING, (short)9);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TopResponseTimeStatsStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TopResponseTimeStatsTupleSchemeFactory());
  }

  public int userType; // optional
  public String userTypeName; // optional
  public int userId; // optional
  public String ip; // optional
  public String cookieId; // optional
  public String visitTime; // optional
  public int responseTime; // optional
  public long totalResultCount; // optional
  public String searchValueStr; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    USER_TYPE((short)1, "userType"),
    USER_TYPE_NAME((short)2, "userTypeName"),
    USER_ID((short)3, "userId"),
    IP((short)4, "ip"),
    COOKIE_ID((short)5, "cookieId"),
    VISIT_TIME((short)6, "visitTime"),
    RESPONSE_TIME((short)7, "responseTime"),
    TOTAL_RESULT_COUNT((short)8, "totalResultCount"),
    SEARCH_VALUE_STR((short)9, "searchValueStr");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // USER_TYPE
          return USER_TYPE;
        case 2: // USER_TYPE_NAME
          return USER_TYPE_NAME;
        case 3: // USER_ID
          return USER_ID;
        case 4: // IP
          return IP;
        case 5: // COOKIE_ID
          return COOKIE_ID;
        case 6: // VISIT_TIME
          return VISIT_TIME;
        case 7: // RESPONSE_TIME
          return RESPONSE_TIME;
        case 8: // TOTAL_RESULT_COUNT
          return TOTAL_RESULT_COUNT;
        case 9: // SEARCH_VALUE_STR
          return SEARCH_VALUE_STR;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __USERTYPE_ISSET_ID = 0;
  private static final int __USERID_ISSET_ID = 1;
  private static final int __RESPONSETIME_ISSET_ID = 2;
  private static final int __TOTALRESULTCOUNT_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.USER_TYPE,_Fields.USER_TYPE_NAME,_Fields.USER_ID,_Fields.IP,_Fields.COOKIE_ID,_Fields.VISIT_TIME,_Fields.RESPONSE_TIME,_Fields.TOTAL_RESULT_COUNT,_Fields.SEARCH_VALUE_STR};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.USER_TYPE, new org.apache.thrift.meta_data.FieldMetaData("userType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.USER_TYPE_NAME, new org.apache.thrift.meta_data.FieldMetaData("userTypeName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.IP, new org.apache.thrift.meta_data.FieldMetaData("ip", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COOKIE_ID, new org.apache.thrift.meta_data.FieldMetaData("cookieId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.VISIT_TIME, new org.apache.thrift.meta_data.FieldMetaData("visitTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RESPONSE_TIME, new org.apache.thrift.meta_data.FieldMetaData("responseTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TOTAL_RESULT_COUNT, new org.apache.thrift.meta_data.FieldMetaData("totalResultCount", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.SEARCH_VALUE_STR, new org.apache.thrift.meta_data.FieldMetaData("searchValueStr", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TopResponseTimeStats.class, metaDataMap);
  }

  public TopResponseTimeStats() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TopResponseTimeStats(TopResponseTimeStats other) {
    __isset_bitfield = other.__isset_bitfield;
    this.userType = other.userType;
    if (other.isSetUserTypeName()) {
      this.userTypeName = other.userTypeName;
    }
    this.userId = other.userId;
    if (other.isSetIp()) {
      this.ip = other.ip;
    }
    if (other.isSetCookieId()) {
      this.cookieId = other.cookieId;
    }
    if (other.isSetVisitTime()) {
      this.visitTime = other.visitTime;
    }
    this.responseTime = other.responseTime;
    this.totalResultCount = other.totalResultCount;
    if (other.isSetSearchValueStr()) {
      this.searchValueStr = other.searchValueStr;
    }
  }

  public TopResponseTimeStats deepCopy() {
    return new TopResponseTimeStats(this);
  }

  @Override
  public void clear() {
    setUserTypeIsSet(false);
    this.userType = 0;
    this.userTypeName = null;
    setUserIdIsSet(false);
    this.userId = 0;
    this.ip = null;
    this.cookieId = null;
    this.visitTime = null;
    setResponseTimeIsSet(false);
    this.responseTime = 0;
    setTotalResultCountIsSet(false);
    this.totalResultCount = 0;
    this.searchValueStr = null;
  }

  public int getUserType() {
    return this.userType;
  }

  public TopResponseTimeStats setUserType(int userType) {
    this.userType = userType;
    setUserTypeIsSet(true);
    return this;
  }

  public void unsetUserType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USERTYPE_ISSET_ID);
  }

  /** Returns true if field userType is set (has been assigned a value) and false otherwise */
  public boolean isSetUserType() {
    return EncodingUtils.testBit(__isset_bitfield, __USERTYPE_ISSET_ID);
  }

  public void setUserTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USERTYPE_ISSET_ID, value);
  }

  public String getUserTypeName() {
    return this.userTypeName;
  }

  public TopResponseTimeStats setUserTypeName(String userTypeName) {
    this.userTypeName = userTypeName;
    return this;
  }

  public void unsetUserTypeName() {
    this.userTypeName = null;
  }

  /** Returns true if field userTypeName is set (has been assigned a value) and false otherwise */
  public boolean isSetUserTypeName() {
    return this.userTypeName != null;
  }

  public void setUserTypeNameIsSet(boolean value) {
    if (!value) {
      this.userTypeName = null;
    }
  }

  public int getUserId() {
    return this.userId;
  }

  public TopResponseTimeStats setUserId(int userId) {
    this.userId = userId;
    setUserIdIsSet(true);
    return this;
  }

  public void unsetUserId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USERID_ISSET_ID);
  }

  /** Returns true if field userId is set (has been assigned a value) and false otherwise */
  public boolean isSetUserId() {
    return EncodingUtils.testBit(__isset_bitfield, __USERID_ISSET_ID);
  }

  public void setUserIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USERID_ISSET_ID, value);
  }

  public String getIp() {
    return this.ip;
  }

  public TopResponseTimeStats setIp(String ip) {
    this.ip = ip;
    return this;
  }

  public void unsetIp() {
    this.ip = null;
  }

  /** Returns true if field ip is set (has been assigned a value) and false otherwise */
  public boolean isSetIp() {
    return this.ip != null;
  }

  public void setIpIsSet(boolean value) {
    if (!value) {
      this.ip = null;
    }
  }

  public String getCookieId() {
    return this.cookieId;
  }

  public TopResponseTimeStats setCookieId(String cookieId) {
    this.cookieId = cookieId;
    return this;
  }

  public void unsetCookieId() {
    this.cookieId = null;
  }

  /** Returns true if field cookieId is set (has been assigned a value) and false otherwise */
  public boolean isSetCookieId() {
    return this.cookieId != null;
  }

  public void setCookieIdIsSet(boolean value) {
    if (!value) {
      this.cookieId = null;
    }
  }

  public String getVisitTime() {
    return this.visitTime;
  }

  public TopResponseTimeStats setVisitTime(String visitTime) {
    this.visitTime = visitTime;
    return this;
  }

  public void unsetVisitTime() {
    this.visitTime = null;
  }

  /** Returns true if field visitTime is set (has been assigned a value) and false otherwise */
  public boolean isSetVisitTime() {
    return this.visitTime != null;
  }

  public void setVisitTimeIsSet(boolean value) {
    if (!value) {
      this.visitTime = null;
    }
  }

  public int getResponseTime() {
    return this.responseTime;
  }

  public TopResponseTimeStats setResponseTime(int responseTime) {
    this.responseTime = responseTime;
    setResponseTimeIsSet(true);
    return this;
  }

  public void unsetResponseTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RESPONSETIME_ISSET_ID);
  }

  /** Returns true if field responseTime is set (has been assigned a value) and false otherwise */
  public boolean isSetResponseTime() {
    return EncodingUtils.testBit(__isset_bitfield, __RESPONSETIME_ISSET_ID);
  }

  public void setResponseTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RESPONSETIME_ISSET_ID, value);
  }

  public long getTotalResultCount() {
    return this.totalResultCount;
  }

  public TopResponseTimeStats setTotalResultCount(long totalResultCount) {
    this.totalResultCount = totalResultCount;
    setTotalResultCountIsSet(true);
    return this;
  }

  public void unsetTotalResultCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TOTALRESULTCOUNT_ISSET_ID);
  }

  /** Returns true if field totalResultCount is set (has been assigned a value) and false otherwise */
  public boolean isSetTotalResultCount() {
    return EncodingUtils.testBit(__isset_bitfield, __TOTALRESULTCOUNT_ISSET_ID);
  }

  public void setTotalResultCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TOTALRESULTCOUNT_ISSET_ID, value);
  }

  public String getSearchValueStr() {
    return this.searchValueStr;
  }

  public TopResponseTimeStats setSearchValueStr(String searchValueStr) {
    this.searchValueStr = searchValueStr;
    return this;
  }

  public void unsetSearchValueStr() {
    this.searchValueStr = null;
  }

  /** Returns true if field searchValueStr is set (has been assigned a value) and false otherwise */
  public boolean isSetSearchValueStr() {
    return this.searchValueStr != null;
  }

  public void setSearchValueStrIsSet(boolean value) {
    if (!value) {
      this.searchValueStr = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case USER_TYPE:
      if (value == null) {
        unsetUserType();
      } else {
        setUserType((Integer)value);
      }
      break;

    case USER_TYPE_NAME:
      if (value == null) {
        unsetUserTypeName();
      } else {
        setUserTypeName((String)value);
      }
      break;

    case USER_ID:
      if (value == null) {
        unsetUserId();
      } else {
        setUserId((Integer)value);
      }
      break;

    case IP:
      if (value == null) {
        unsetIp();
      } else {
        setIp((String)value);
      }
      break;

    case COOKIE_ID:
      if (value == null) {
        unsetCookieId();
      } else {
        setCookieId((String)value);
      }
      break;

    case VISIT_TIME:
      if (value == null) {
        unsetVisitTime();
      } else {
        setVisitTime((String)value);
      }
      break;

    case RESPONSE_TIME:
      if (value == null) {
        unsetResponseTime();
      } else {
        setResponseTime((Integer)value);
      }
      break;

    case TOTAL_RESULT_COUNT:
      if (value == null) {
        unsetTotalResultCount();
      } else {
        setTotalResultCount((Long)value);
      }
      break;

    case SEARCH_VALUE_STR:
      if (value == null) {
        unsetSearchValueStr();
      } else {
        setSearchValueStr((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case USER_TYPE:
      return Integer.valueOf(getUserType());

    case USER_TYPE_NAME:
      return getUserTypeName();

    case USER_ID:
      return Integer.valueOf(getUserId());

    case IP:
      return getIp();

    case COOKIE_ID:
      return getCookieId();

    case VISIT_TIME:
      return getVisitTime();

    case RESPONSE_TIME:
      return Integer.valueOf(getResponseTime());

    case TOTAL_RESULT_COUNT:
      return Long.valueOf(getTotalResultCount());

    case SEARCH_VALUE_STR:
      return getSearchValueStr();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case USER_TYPE:
      return isSetUserType();
    case USER_TYPE_NAME:
      return isSetUserTypeName();
    case USER_ID:
      return isSetUserId();
    case IP:
      return isSetIp();
    case COOKIE_ID:
      return isSetCookieId();
    case VISIT_TIME:
      return isSetVisitTime();
    case RESPONSE_TIME:
      return isSetResponseTime();
    case TOTAL_RESULT_COUNT:
      return isSetTotalResultCount();
    case SEARCH_VALUE_STR:
      return isSetSearchValueStr();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TopResponseTimeStats)
      return this.equals((TopResponseTimeStats)that);
    return false;
  }

  public boolean equals(TopResponseTimeStats that) {
    if (that == null)
      return false;

    boolean this_present_userType = true && this.isSetUserType();
    boolean that_present_userType = true && that.isSetUserType();
    if (this_present_userType || that_present_userType) {
      if (!(this_present_userType && that_present_userType))
        return false;
      if (this.userType != that.userType)
        return false;
    }

    boolean this_present_userTypeName = true && this.isSetUserTypeName();
    boolean that_present_userTypeName = true && that.isSetUserTypeName();
    if (this_present_userTypeName || that_present_userTypeName) {
      if (!(this_present_userTypeName && that_present_userTypeName))
        return false;
      if (!this.userTypeName.equals(that.userTypeName))
        return false;
    }

    boolean this_present_userId = true && this.isSetUserId();
    boolean that_present_userId = true && that.isSetUserId();
    if (this_present_userId || that_present_userId) {
      if (!(this_present_userId && that_present_userId))
        return false;
      if (this.userId != that.userId)
        return false;
    }

    boolean this_present_ip = true && this.isSetIp();
    boolean that_present_ip = true && that.isSetIp();
    if (this_present_ip || that_present_ip) {
      if (!(this_present_ip && that_present_ip))
        return false;
      if (!this.ip.equals(that.ip))
        return false;
    }

    boolean this_present_cookieId = true && this.isSetCookieId();
    boolean that_present_cookieId = true && that.isSetCookieId();
    if (this_present_cookieId || that_present_cookieId) {
      if (!(this_present_cookieId && that_present_cookieId))
        return false;
      if (!this.cookieId.equals(that.cookieId))
        return false;
    }

    boolean this_present_visitTime = true && this.isSetVisitTime();
    boolean that_present_visitTime = true && that.isSetVisitTime();
    if (this_present_visitTime || that_present_visitTime) {
      if (!(this_present_visitTime && that_present_visitTime))
        return false;
      if (!this.visitTime.equals(that.visitTime))
        return false;
    }

    boolean this_present_responseTime = true && this.isSetResponseTime();
    boolean that_present_responseTime = true && that.isSetResponseTime();
    if (this_present_responseTime || that_present_responseTime) {
      if (!(this_present_responseTime && that_present_responseTime))
        return false;
      if (this.responseTime != that.responseTime)
        return false;
    }

    boolean this_present_totalResultCount = true && this.isSetTotalResultCount();
    boolean that_present_totalResultCount = true && that.isSetTotalResultCount();
    if (this_present_totalResultCount || that_present_totalResultCount) {
      if (!(this_present_totalResultCount && that_present_totalResultCount))
        return false;
      if (this.totalResultCount != that.totalResultCount)
        return false;
    }

    boolean this_present_searchValueStr = true && this.isSetSearchValueStr();
    boolean that_present_searchValueStr = true && that.isSetSearchValueStr();
    if (this_present_searchValueStr || that_present_searchValueStr) {
      if (!(this_present_searchValueStr && that_present_searchValueStr))
        return false;
      if (!this.searchValueStr.equals(that.searchValueStr))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(TopResponseTimeStats other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetUserType()).compareTo(other.isSetUserType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userType, other.userType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserTypeName()).compareTo(other.isSetUserTypeName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserTypeName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userTypeName, other.userTypeName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserId()).compareTo(other.isSetUserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIp()).compareTo(other.isSetIp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ip, other.ip);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCookieId()).compareTo(other.isSetCookieId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCookieId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cookieId, other.cookieId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVisitTime()).compareTo(other.isSetVisitTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVisitTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.visitTime, other.visitTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetResponseTime()).compareTo(other.isSetResponseTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResponseTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.responseTime, other.responseTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTotalResultCount()).compareTo(other.isSetTotalResultCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotalResultCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.totalResultCount, other.totalResultCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSearchValueStr()).compareTo(other.isSetSearchValueStr());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSearchValueStr()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.searchValueStr, other.searchValueStr);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TopResponseTimeStats(");
    boolean first = true;

    if (isSetUserType()) {
      sb.append("userType:");
      sb.append(this.userType);
      first = false;
    }
    if (isSetUserTypeName()) {
      if (!first) sb.append(", ");
      sb.append("userTypeName:");
      if (this.userTypeName == null) {
        sb.append("null");
      } else {
        sb.append(this.userTypeName);
      }
      first = false;
    }
    if (isSetUserId()) {
      if (!first) sb.append(", ");
      sb.append("userId:");
      sb.append(this.userId);
      first = false;
    }
    if (isSetIp()) {
      if (!first) sb.append(", ");
      sb.append("ip:");
      if (this.ip == null) {
        sb.append("null");
      } else {
        sb.append(this.ip);
      }
      first = false;
    }
    if (isSetCookieId()) {
      if (!first) sb.append(", ");
      sb.append("cookieId:");
      if (this.cookieId == null) {
        sb.append("null");
      } else {
        sb.append(this.cookieId);
      }
      first = false;
    }
    if (isSetVisitTime()) {
      if (!first) sb.append(", ");
      sb.append("visitTime:");
      if (this.visitTime == null) {
        sb.append("null");
      } else {
        sb.append(this.visitTime);
      }
      first = false;
    }
    if (isSetResponseTime()) {
      if (!first) sb.append(", ");
      sb.append("responseTime:");
      sb.append(this.responseTime);
      first = false;
    }
    if (isSetTotalResultCount()) {
      if (!first) sb.append(", ");
      sb.append("totalResultCount:");
      sb.append(this.totalResultCount);
      first = false;
    }
    if (isSetSearchValueStr()) {
      if (!first) sb.append(", ");
      sb.append("searchValueStr:");
      if (this.searchValueStr == null) {
        sb.append("null");
      } else {
        sb.append(this.searchValueStr);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TopResponseTimeStatsStandardSchemeFactory implements SchemeFactory {
    public TopResponseTimeStatsStandardScheme getScheme() {
      return new TopResponseTimeStatsStandardScheme();
    }
  }

  private static class TopResponseTimeStatsStandardScheme extends StandardScheme<TopResponseTimeStats> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TopResponseTimeStats struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // USER_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.userType = iprot.readI32();
              struct.setUserTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // USER_TYPE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.userTypeName = iprot.readString();
              struct.setUserTypeNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.userId = iprot.readI32();
              struct.setUserIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // IP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ip = iprot.readString();
              struct.setIpIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // COOKIE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.cookieId = iprot.readString();
              struct.setCookieIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // VISIT_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.visitTime = iprot.readString();
              struct.setVisitTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // RESPONSE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.responseTime = iprot.readI32();
              struct.setResponseTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // TOTAL_RESULT_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.totalResultCount = iprot.readI64();
              struct.setTotalResultCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // SEARCH_VALUE_STR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.searchValueStr = iprot.readString();
              struct.setSearchValueStrIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TopResponseTimeStats struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetUserType()) {
        oprot.writeFieldBegin(USER_TYPE_FIELD_DESC);
        oprot.writeI32(struct.userType);
        oprot.writeFieldEnd();
      }
      if (struct.userTypeName != null) {
        if (struct.isSetUserTypeName()) {
          oprot.writeFieldBegin(USER_TYPE_NAME_FIELD_DESC);
          oprot.writeString(struct.userTypeName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetUserId()) {
        oprot.writeFieldBegin(USER_ID_FIELD_DESC);
        oprot.writeI32(struct.userId);
        oprot.writeFieldEnd();
      }
      if (struct.ip != null) {
        if (struct.isSetIp()) {
          oprot.writeFieldBegin(IP_FIELD_DESC);
          oprot.writeString(struct.ip);
          oprot.writeFieldEnd();
        }
      }
      if (struct.cookieId != null) {
        if (struct.isSetCookieId()) {
          oprot.writeFieldBegin(COOKIE_ID_FIELD_DESC);
          oprot.writeString(struct.cookieId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.visitTime != null) {
        if (struct.isSetVisitTime()) {
          oprot.writeFieldBegin(VISIT_TIME_FIELD_DESC);
          oprot.writeString(struct.visitTime);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetResponseTime()) {
        oprot.writeFieldBegin(RESPONSE_TIME_FIELD_DESC);
        oprot.writeI32(struct.responseTime);
        oprot.writeFieldEnd();
      }
      if (struct.isSetTotalResultCount()) {
        oprot.writeFieldBegin(TOTAL_RESULT_COUNT_FIELD_DESC);
        oprot.writeI64(struct.totalResultCount);
        oprot.writeFieldEnd();
      }
      if (struct.searchValueStr != null) {
        if (struct.isSetSearchValueStr()) {
          oprot.writeFieldBegin(SEARCH_VALUE_STR_FIELD_DESC);
          oprot.writeString(struct.searchValueStr);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TopResponseTimeStatsTupleSchemeFactory implements SchemeFactory {
    public TopResponseTimeStatsTupleScheme getScheme() {
      return new TopResponseTimeStatsTupleScheme();
    }
  }

  private static class TopResponseTimeStatsTupleScheme extends TupleScheme<TopResponseTimeStats> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TopResponseTimeStats struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetUserType()) {
        optionals.set(0);
      }
      if (struct.isSetUserTypeName()) {
        optionals.set(1);
      }
      if (struct.isSetUserId()) {
        optionals.set(2);
      }
      if (struct.isSetIp()) {
        optionals.set(3);
      }
      if (struct.isSetCookieId()) {
        optionals.set(4);
      }
      if (struct.isSetVisitTime()) {
        optionals.set(5);
      }
      if (struct.isSetResponseTime()) {
        optionals.set(6);
      }
      if (struct.isSetTotalResultCount()) {
        optionals.set(7);
      }
      if (struct.isSetSearchValueStr()) {
        optionals.set(8);
      }
      oprot.writeBitSet(optionals, 9);
      if (struct.isSetUserType()) {
        oprot.writeI32(struct.userType);
      }
      if (struct.isSetUserTypeName()) {
        oprot.writeString(struct.userTypeName);
      }
      if (struct.isSetUserId()) {
        oprot.writeI32(struct.userId);
      }
      if (struct.isSetIp()) {
        oprot.writeString(struct.ip);
      }
      if (struct.isSetCookieId()) {
        oprot.writeString(struct.cookieId);
      }
      if (struct.isSetVisitTime()) {
        oprot.writeString(struct.visitTime);
      }
      if (struct.isSetResponseTime()) {
        oprot.writeI32(struct.responseTime);
      }
      if (struct.isSetTotalResultCount()) {
        oprot.writeI64(struct.totalResultCount);
      }
      if (struct.isSetSearchValueStr()) {
        oprot.writeString(struct.searchValueStr);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TopResponseTimeStats struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(9);
      if (incoming.get(0)) {
        struct.userType = iprot.readI32();
        struct.setUserTypeIsSet(true);
      }
      if (incoming.get(1)) {
        struct.userTypeName = iprot.readString();
        struct.setUserTypeNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.userId = iprot.readI32();
        struct.setUserIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.ip = iprot.readString();
        struct.setIpIsSet(true);
      }
      if (incoming.get(4)) {
        struct.cookieId = iprot.readString();
        struct.setCookieIdIsSet(true);
      }
      if (incoming.get(5)) {
        struct.visitTime = iprot.readString();
        struct.setVisitTimeIsSet(true);
      }
      if (incoming.get(6)) {
        struct.responseTime = iprot.readI32();
        struct.setResponseTimeIsSet(true);
      }
      if (incoming.get(7)) {
        struct.totalResultCount = iprot.readI64();
        struct.setTotalResultCountIsSet(true);
      }
      if (incoming.get(8)) {
        struct.searchValueStr = iprot.readString();
        struct.setSearchValueStrIsSet(true);
      }
    }
  }

}


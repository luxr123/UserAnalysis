/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.tracker.api.thrift.web;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * 访客集合
 */
public class UserInfoResult implements org.apache.thrift.TBase<UserInfoResult, UserInfoResult._Fields>, java.io.Serializable, Cloneable, Comparable<UserInfoResult> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("UserInfoResult");

  private static final org.apache.thrift.protocol.TField USER_INFO_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("userInfoList", org.apache.thrift.protocol.TType.LIST, (short)1);
  private static final org.apache.thrift.protocol.TField TOTAL_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("totalCount", org.apache.thrift.protocol.TType.I32, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new UserInfoResultStandardSchemeFactory());
    schemes.put(TupleScheme.class, new UserInfoResultTupleSchemeFactory());
  }

  public List<UserInfo> userInfoList; // required
  public int totalCount; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    USER_INFO_LIST((short)1, "userInfoList"),
    TOTAL_COUNT((short)2, "totalCount");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // USER_INFO_LIST
          return USER_INFO_LIST;
        case 2: // TOTAL_COUNT
          return TOTAL_COUNT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TOTALCOUNT_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.USER_INFO_LIST, new org.apache.thrift.meta_data.FieldMetaData("userInfoList", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, UserInfo.class))));
    tmpMap.put(_Fields.TOTAL_COUNT, new org.apache.thrift.meta_data.FieldMetaData("totalCount", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(UserInfoResult.class, metaDataMap);
  }

  public UserInfoResult() {
  }

  public UserInfoResult(
    List<UserInfo> userInfoList,
    int totalCount)
  {
    this();
    this.userInfoList = userInfoList;
    this.totalCount = totalCount;
    setTotalCountIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public UserInfoResult(UserInfoResult other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetUserInfoList()) {
      List<UserInfo> __this__userInfoList = new ArrayList<UserInfo>(other.userInfoList.size());
      for (UserInfo other_element : other.userInfoList) {
        __this__userInfoList.add(new UserInfo(other_element));
      }
      this.userInfoList = __this__userInfoList;
    }
    this.totalCount = other.totalCount;
  }

  public UserInfoResult deepCopy() {
    return new UserInfoResult(this);
  }

  @Override
  public void clear() {
    this.userInfoList = null;
    setTotalCountIsSet(false);
    this.totalCount = 0;
  }

  public int getUserInfoListSize() {
    return (this.userInfoList == null) ? 0 : this.userInfoList.size();
  }

  public java.util.Iterator<UserInfo> getUserInfoListIterator() {
    return (this.userInfoList == null) ? null : this.userInfoList.iterator();
  }

  public void addToUserInfoList(UserInfo elem) {
    if (this.userInfoList == null) {
      this.userInfoList = new ArrayList<UserInfo>();
    }
    this.userInfoList.add(elem);
  }

  public List<UserInfo> getUserInfoList() {
    return this.userInfoList;
  }

  public UserInfoResult setUserInfoList(List<UserInfo> userInfoList) {
    this.userInfoList = userInfoList;
    return this;
  }

  public void unsetUserInfoList() {
    this.userInfoList = null;
  }

  /** Returns true if field userInfoList is set (has been assigned a value) and false otherwise */
  public boolean isSetUserInfoList() {
    return this.userInfoList != null;
  }

  public void setUserInfoListIsSet(boolean value) {
    if (!value) {
      this.userInfoList = null;
    }
  }

  public int getTotalCount() {
    return this.totalCount;
  }

  public UserInfoResult setTotalCount(int totalCount) {
    this.totalCount = totalCount;
    setTotalCountIsSet(true);
    return this;
  }

  public void unsetTotalCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TOTALCOUNT_ISSET_ID);
  }

  /** Returns true if field totalCount is set (has been assigned a value) and false otherwise */
  public boolean isSetTotalCount() {
    return EncodingUtils.testBit(__isset_bitfield, __TOTALCOUNT_ISSET_ID);
  }

  public void setTotalCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TOTALCOUNT_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case USER_INFO_LIST:
      if (value == null) {
        unsetUserInfoList();
      } else {
        setUserInfoList((List<UserInfo>)value);
      }
      break;

    case TOTAL_COUNT:
      if (value == null) {
        unsetTotalCount();
      } else {
        setTotalCount((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case USER_INFO_LIST:
      return getUserInfoList();

    case TOTAL_COUNT:
      return Integer.valueOf(getTotalCount());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case USER_INFO_LIST:
      return isSetUserInfoList();
    case TOTAL_COUNT:
      return isSetTotalCount();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof UserInfoResult)
      return this.equals((UserInfoResult)that);
    return false;
  }

  public boolean equals(UserInfoResult that) {
    if (that == null)
      return false;

    boolean this_present_userInfoList = true && this.isSetUserInfoList();
    boolean that_present_userInfoList = true && that.isSetUserInfoList();
    if (this_present_userInfoList || that_present_userInfoList) {
      if (!(this_present_userInfoList && that_present_userInfoList))
        return false;
      if (!this.userInfoList.equals(that.userInfoList))
        return false;
    }

    boolean this_present_totalCount = true;
    boolean that_present_totalCount = true;
    if (this_present_totalCount || that_present_totalCount) {
      if (!(this_present_totalCount && that_present_totalCount))
        return false;
      if (this.totalCount != that.totalCount)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(UserInfoResult other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetUserInfoList()).compareTo(other.isSetUserInfoList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserInfoList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userInfoList, other.userInfoList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTotalCount()).compareTo(other.isSetTotalCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotalCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.totalCount, other.totalCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("UserInfoResult(");
    boolean first = true;

    sb.append("userInfoList:");
    if (this.userInfoList == null) {
      sb.append("null");
    } else {
      sb.append(this.userInfoList);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("totalCount:");
    sb.append(this.totalCount);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (userInfoList == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'userInfoList' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'totalCount' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class UserInfoResultStandardSchemeFactory implements SchemeFactory {
    public UserInfoResultStandardScheme getScheme() {
      return new UserInfoResultStandardScheme();
    }
  }

  private static class UserInfoResultStandardScheme extends StandardScheme<UserInfoResult> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, UserInfoResult struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // USER_INFO_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.userInfoList = new ArrayList<UserInfo>(_list0.size);
                for (int _i1 = 0; _i1 < _list0.size; ++_i1)
                {
                  UserInfo _elem2;
                  _elem2 = new UserInfo();
                  _elem2.read(iprot);
                  struct.userInfoList.add(_elem2);
                }
                iprot.readListEnd();
              }
              struct.setUserInfoListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TOTAL_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.totalCount = iprot.readI32();
              struct.setTotalCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetTotalCount()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'totalCount' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, UserInfoResult struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.userInfoList != null) {
        oprot.writeFieldBegin(USER_INFO_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.userInfoList.size()));
          for (UserInfo _iter3 : struct.userInfoList)
          {
            _iter3.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(TOTAL_COUNT_FIELD_DESC);
      oprot.writeI32(struct.totalCount);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class UserInfoResultTupleSchemeFactory implements SchemeFactory {
    public UserInfoResultTupleScheme getScheme() {
      return new UserInfoResultTupleScheme();
    }
  }

  private static class UserInfoResultTupleScheme extends TupleScheme<UserInfoResult> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, UserInfoResult struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      {
        oprot.writeI32(struct.userInfoList.size());
        for (UserInfo _iter4 : struct.userInfoList)
        {
          _iter4.write(oprot);
        }
      }
      oprot.writeI32(struct.totalCount);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, UserInfoResult struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      {
        org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
        struct.userInfoList = new ArrayList<UserInfo>(_list5.size);
        for (int _i6 = 0; _i6 < _list5.size; ++_i6)
        {
          UserInfo _elem7;
          _elem7 = new UserInfo();
          _elem7.read(iprot);
          struct.userInfoList.add(_elem7);
        }
      }
      struct.setUserInfoListIsSet(true);
      struct.totalCount = iprot.readI32();
      struct.setTotalCountIsSet(true);
    }
  }

}


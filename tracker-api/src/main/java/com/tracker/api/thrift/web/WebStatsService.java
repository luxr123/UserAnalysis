/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.tracker.api.thrift.web;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class WebStatsService {

  /**
   * 网站统计数据服务
   */
  public interface Iface {

    /**
     * 获取首页统计指标
     * 
     * @param webId
     * @param timeType
     * @param time
     */
    public Map<String,WebStats> getWebSiteStats(int webId, int timeType, String time) throws org.apache.thrift.TException;

    /**
     * 获取访问用户信息
     * 
     * @param webId
     * @param timeType
     * @param time
     * @param userFilter
     * @param startIndex
     * @param offset
     */
    public UserInfoResult getUserInfos(int webId, int timeType, String time, UserFilter userFilter, int startIndex, int offset) throws org.apache.thrift.TException;

    /**
     * 获取用户历史记录
     * 
     * @param webId
     * @param timeType
     * @param time
     * @param userFilter
     * @param logFilter
     * @param startIndex
     * @param offset
     */
    public UserLogResult getUserLog(int webId, int timeType, String time, UserFilter userFilter, LogFilter logFilter, int startIndex, int offset) throws org.apache.thrift.TException;

    /**
     * 获取基于时间的统计指标
     * 
     * @param webId
     * @param timeType
     * @param times
     * @param userFilter
     */
    public List<WebStats> getWebStatsForDate(int webId, int timeType, List<String> times, UserFilter userFilter) throws org.apache.thrift.TException;

    /**
     * 获取基于访问来源的统计指标
     * 
     * @param webId
     * @param timeType
     * @param time
     * @param refFilter
     * @param userFilter
     * @param startIndex
     * @param offset
     */
    public List<WebStats> getWebStatsForReferrer(int webId, int timeType, String time, ReferrerFilter refFilter, UserFilter userFilter, int startIndex, int offset) throws org.apache.thrift.TException;

    /**
     * 获取基于关键词的统计指标
     * 
     * @param webId
     * @param timeType
     * @param time
     * @param seDomainId
     * @param userFilter
     * @param startIndex
     * @param offset
     */
    public List<WebStats> getWebStatsForKeyword(int webId, int timeType, String time, int seDomainId, UserFilter userFilter, int startIndex, int offset) throws org.apache.thrift.TException;

    /**
     * 获取基于地域的统计指标
     * 
     * @param webId
     * @param timeType
     * @param time
     * @param userFilter
     * @param areaFilter
     */
    public List<WebStats> getWebStatsForArea(int webId, int timeType, String time, UserFilter userFilter, AreaFilter areaFilter) throws org.apache.thrift.TException;

    /**
     * 获取基于访问页面的统计指标
     * 
     * @param webId
     * @param timeType
     * @param time
     * @param userFilter
     */
    public List<PageStats> getWebStatsForPage(int webId, int timeType, String time, UserFilter userFilter) throws org.apache.thrift.TException;

    /**
     * 获取基于入口页面的统计指标
     * 
     * @param webId
     * @param timeType
     * @param time
     * @param userFilter
     */
    public List<EntryPageStats> getWebStatsForEntryPage(int webId, int timeType, String time, UserFilter userFilter) throws org.apache.thrift.TException;

    /**
     * 获取基于系统环境的统计指标
     * 
     * @param webId
     * @param timeType
     * @param time
     * @param sysType
     * @param userFilter
     */
    public List<WebStats> getWebStatsForSysEnv(int webId, int timeType, String time, int sysType, UserFilter userFilter) throws org.apache.thrift.TException;

    /**
     * 获取基于小时段的统计指标
     * 
     * @param webId
     * @param timeType
     * @param time
     * @param userFilter
     */
    public List<WebStats> getWebStatsForHour(int webId, int timeType, String time, UserFilter userFilter) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void getWebSiteStats(int webId, int timeType, String time, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getUserInfos(int webId, int timeType, String time, UserFilter userFilter, int startIndex, int offset, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getUserLog(int webId, int timeType, String time, UserFilter userFilter, LogFilter logFilter, int startIndex, int offset, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getWebStatsForDate(int webId, int timeType, List<String> times, UserFilter userFilter, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getWebStatsForReferrer(int webId, int timeType, String time, ReferrerFilter refFilter, UserFilter userFilter, int startIndex, int offset, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getWebStatsForKeyword(int webId, int timeType, String time, int seDomainId, UserFilter userFilter, int startIndex, int offset, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getWebStatsForArea(int webId, int timeType, String time, UserFilter userFilter, AreaFilter areaFilter, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getWebStatsForPage(int webId, int timeType, String time, UserFilter userFilter, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getWebStatsForEntryPage(int webId, int timeType, String time, UserFilter userFilter, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getWebStatsForSysEnv(int webId, int timeType, String time, int sysType, UserFilter userFilter, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getWebStatsForHour(int webId, int timeType, String time, UserFilter userFilter, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public Map<String,WebStats> getWebSiteStats(int webId, int timeType, String time) throws org.apache.thrift.TException
    {
      send_getWebSiteStats(webId, timeType, time);
      return recv_getWebSiteStats();
    }

    public void send_getWebSiteStats(int webId, int timeType, String time) throws org.apache.thrift.TException
    {
      getWebSiteStats_args args = new getWebSiteStats_args();
      args.setWebId(webId);
      args.setTimeType(timeType);
      args.setTime(time);
      sendBase("getWebSiteStats", args);
    }

    public Map<String,WebStats> recv_getWebSiteStats() throws org.apache.thrift.TException
    {
      getWebSiteStats_result result = new getWebSiteStats_result();
      receiveBase(result, "getWebSiteStats");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getWebSiteStats failed: unknown result");
    }

    public UserInfoResult getUserInfos(int webId, int timeType, String time, UserFilter userFilter, int startIndex, int offset) throws org.apache.thrift.TException
    {
      send_getUserInfos(webId, timeType, time, userFilter, startIndex, offset);
      return recv_getUserInfos();
    }

    public void send_getUserInfos(int webId, int timeType, String time, UserFilter userFilter, int startIndex, int offset) throws org.apache.thrift.TException
    {
      getUserInfos_args args = new getUserInfos_args();
      args.setWebId(webId);
      args.setTimeType(timeType);
      args.setTime(time);
      args.setUserFilter(userFilter);
      args.setStartIndex(startIndex);
      args.setOffset(offset);
      sendBase("getUserInfos", args);
    }

    public UserInfoResult recv_getUserInfos() throws org.apache.thrift.TException
    {
      getUserInfos_result result = new getUserInfos_result();
      receiveBase(result, "getUserInfos");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getUserInfos failed: unknown result");
    }

    public UserLogResult getUserLog(int webId, int timeType, String time, UserFilter userFilter, LogFilter logFilter, int startIndex, int offset) throws org.apache.thrift.TException
    {
      send_getUserLog(webId, timeType, time, userFilter, logFilter, startIndex, offset);
      return recv_getUserLog();
    }

    public void send_getUserLog(int webId, int timeType, String time, UserFilter userFilter, LogFilter logFilter, int startIndex, int offset) throws org.apache.thrift.TException
    {
      getUserLog_args args = new getUserLog_args();
      args.setWebId(webId);
      args.setTimeType(timeType);
      args.setTime(time);
      args.setUserFilter(userFilter);
      args.setLogFilter(logFilter);
      args.setStartIndex(startIndex);
      args.setOffset(offset);
      sendBase("getUserLog", args);
    }

    public UserLogResult recv_getUserLog() throws org.apache.thrift.TException
    {
      getUserLog_result result = new getUserLog_result();
      receiveBase(result, "getUserLog");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getUserLog failed: unknown result");
    }

    public List<WebStats> getWebStatsForDate(int webId, int timeType, List<String> times, UserFilter userFilter) throws org.apache.thrift.TException
    {
      send_getWebStatsForDate(webId, timeType, times, userFilter);
      return recv_getWebStatsForDate();
    }

    public void send_getWebStatsForDate(int webId, int timeType, List<String> times, UserFilter userFilter) throws org.apache.thrift.TException
    {
      getWebStatsForDate_args args = new getWebStatsForDate_args();
      args.setWebId(webId);
      args.setTimeType(timeType);
      args.setTimes(times);
      args.setUserFilter(userFilter);
      sendBase("getWebStatsForDate", args);
    }

    public List<WebStats> recv_getWebStatsForDate() throws org.apache.thrift.TException
    {
      getWebStatsForDate_result result = new getWebStatsForDate_result();
      receiveBase(result, "getWebStatsForDate");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getWebStatsForDate failed: unknown result");
    }

    public List<WebStats> getWebStatsForReferrer(int webId, int timeType, String time, ReferrerFilter refFilter, UserFilter userFilter, int startIndex, int offset) throws org.apache.thrift.TException
    {
      send_getWebStatsForReferrer(webId, timeType, time, refFilter, userFilter, startIndex, offset);
      return recv_getWebStatsForReferrer();
    }

    public void send_getWebStatsForReferrer(int webId, int timeType, String time, ReferrerFilter refFilter, UserFilter userFilter, int startIndex, int offset) throws org.apache.thrift.TException
    {
      getWebStatsForReferrer_args args = new getWebStatsForReferrer_args();
      args.setWebId(webId);
      args.setTimeType(timeType);
      args.setTime(time);
      args.setRefFilter(refFilter);
      args.setUserFilter(userFilter);
      args.setStartIndex(startIndex);
      args.setOffset(offset);
      sendBase("getWebStatsForReferrer", args);
    }

    public List<WebStats> recv_getWebStatsForReferrer() throws org.apache.thrift.TException
    {
      getWebStatsForReferrer_result result = new getWebStatsForReferrer_result();
      receiveBase(result, "getWebStatsForReferrer");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getWebStatsForReferrer failed: unknown result");
    }

    public List<WebStats> getWebStatsForKeyword(int webId, int timeType, String time, int seDomainId, UserFilter userFilter, int startIndex, int offset) throws org.apache.thrift.TException
    {
      send_getWebStatsForKeyword(webId, timeType, time, seDomainId, userFilter, startIndex, offset);
      return recv_getWebStatsForKeyword();
    }

    public void send_getWebStatsForKeyword(int webId, int timeType, String time, int seDomainId, UserFilter userFilter, int startIndex, int offset) throws org.apache.thrift.TException
    {
      getWebStatsForKeyword_args args = new getWebStatsForKeyword_args();
      args.setWebId(webId);
      args.setTimeType(timeType);
      args.setTime(time);
      args.setSeDomainId(seDomainId);
      args.setUserFilter(userFilter);
      args.setStartIndex(startIndex);
      args.setOffset(offset);
      sendBase("getWebStatsForKeyword", args);
    }

    public List<WebStats> recv_getWebStatsForKeyword() throws org.apache.thrift.TException
    {
      getWebStatsForKeyword_result result = new getWebStatsForKeyword_result();
      receiveBase(result, "getWebStatsForKeyword");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getWebStatsForKeyword failed: unknown result");
    }

    public List<WebStats> getWebStatsForArea(int webId, int timeType, String time, UserFilter userFilter, AreaFilter areaFilter) throws org.apache.thrift.TException
    {
      send_getWebStatsForArea(webId, timeType, time, userFilter, areaFilter);
      return recv_getWebStatsForArea();
    }

    public void send_getWebStatsForArea(int webId, int timeType, String time, UserFilter userFilter, AreaFilter areaFilter) throws org.apache.thrift.TException
    {
      getWebStatsForArea_args args = new getWebStatsForArea_args();
      args.setWebId(webId);
      args.setTimeType(timeType);
      args.setTime(time);
      args.setUserFilter(userFilter);
      args.setAreaFilter(areaFilter);
      sendBase("getWebStatsForArea", args);
    }

    public List<WebStats> recv_getWebStatsForArea() throws org.apache.thrift.TException
    {
      getWebStatsForArea_result result = new getWebStatsForArea_result();
      receiveBase(result, "getWebStatsForArea");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getWebStatsForArea failed: unknown result");
    }

    public List<PageStats> getWebStatsForPage(int webId, int timeType, String time, UserFilter userFilter) throws org.apache.thrift.TException
    {
      send_getWebStatsForPage(webId, timeType, time, userFilter);
      return recv_getWebStatsForPage();
    }

    public void send_getWebStatsForPage(int webId, int timeType, String time, UserFilter userFilter) throws org.apache.thrift.TException
    {
      getWebStatsForPage_args args = new getWebStatsForPage_args();
      args.setWebId(webId);
      args.setTimeType(timeType);
      args.setTime(time);
      args.setUserFilter(userFilter);
      sendBase("getWebStatsForPage", args);
    }

    public List<PageStats> recv_getWebStatsForPage() throws org.apache.thrift.TException
    {
      getWebStatsForPage_result result = new getWebStatsForPage_result();
      receiveBase(result, "getWebStatsForPage");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getWebStatsForPage failed: unknown result");
    }

    public List<EntryPageStats> getWebStatsForEntryPage(int webId, int timeType, String time, UserFilter userFilter) throws org.apache.thrift.TException
    {
      send_getWebStatsForEntryPage(webId, timeType, time, userFilter);
      return recv_getWebStatsForEntryPage();
    }

    public void send_getWebStatsForEntryPage(int webId, int timeType, String time, UserFilter userFilter) throws org.apache.thrift.TException
    {
      getWebStatsForEntryPage_args args = new getWebStatsForEntryPage_args();
      args.setWebId(webId);
      args.setTimeType(timeType);
      args.setTime(time);
      args.setUserFilter(userFilter);
      sendBase("getWebStatsForEntryPage", args);
    }

    public List<EntryPageStats> recv_getWebStatsForEntryPage() throws org.apache.thrift.TException
    {
      getWebStatsForEntryPage_result result = new getWebStatsForEntryPage_result();
      receiveBase(result, "getWebStatsForEntryPage");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getWebStatsForEntryPage failed: unknown result");
    }

    public List<WebStats> getWebStatsForSysEnv(int webId, int timeType, String time, int sysType, UserFilter userFilter) throws org.apache.thrift.TException
    {
      send_getWebStatsForSysEnv(webId, timeType, time, sysType, userFilter);
      return recv_getWebStatsForSysEnv();
    }

    public void send_getWebStatsForSysEnv(int webId, int timeType, String time, int sysType, UserFilter userFilter) throws org.apache.thrift.TException
    {
      getWebStatsForSysEnv_args args = new getWebStatsForSysEnv_args();
      args.setWebId(webId);
      args.setTimeType(timeType);
      args.setTime(time);
      args.setSysType(sysType);
      args.setUserFilter(userFilter);
      sendBase("getWebStatsForSysEnv", args);
    }

    public List<WebStats> recv_getWebStatsForSysEnv() throws org.apache.thrift.TException
    {
      getWebStatsForSysEnv_result result = new getWebStatsForSysEnv_result();
      receiveBase(result, "getWebStatsForSysEnv");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getWebStatsForSysEnv failed: unknown result");
    }

    public List<WebStats> getWebStatsForHour(int webId, int timeType, String time, UserFilter userFilter) throws org.apache.thrift.TException
    {
      send_getWebStatsForHour(webId, timeType, time, userFilter);
      return recv_getWebStatsForHour();
    }

    public void send_getWebStatsForHour(int webId, int timeType, String time, UserFilter userFilter) throws org.apache.thrift.TException
    {
      getWebStatsForHour_args args = new getWebStatsForHour_args();
      args.setWebId(webId);
      args.setTimeType(timeType);
      args.setTime(time);
      args.setUserFilter(userFilter);
      sendBase("getWebStatsForHour", args);
    }

    public List<WebStats> recv_getWebStatsForHour() throws org.apache.thrift.TException
    {
      getWebStatsForHour_result result = new getWebStatsForHour_result();
      receiveBase(result, "getWebStatsForHour");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getWebStatsForHour failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void getWebSiteStats(int webId, int timeType, String time, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getWebSiteStats_call method_call = new getWebSiteStats_call(webId, timeType, time, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getWebSiteStats_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int webId;
      private int timeType;
      private String time;
      public getWebSiteStats_call(int webId, int timeType, String time, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.webId = webId;
        this.timeType = timeType;
        this.time = time;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getWebSiteStats", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getWebSiteStats_args args = new getWebSiteStats_args();
        args.setWebId(webId);
        args.setTimeType(timeType);
        args.setTime(time);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Map<String,WebStats> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getWebSiteStats();
      }
    }

    public void getUserInfos(int webId, int timeType, String time, UserFilter userFilter, int startIndex, int offset, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getUserInfos_call method_call = new getUserInfos_call(webId, timeType, time, userFilter, startIndex, offset, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getUserInfos_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int webId;
      private int timeType;
      private String time;
      private UserFilter userFilter;
      private int startIndex;
      private int offset;
      public getUserInfos_call(int webId, int timeType, String time, UserFilter userFilter, int startIndex, int offset, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.webId = webId;
        this.timeType = timeType;
        this.time = time;
        this.userFilter = userFilter;
        this.startIndex = startIndex;
        this.offset = offset;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getUserInfos", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getUserInfos_args args = new getUserInfos_args();
        args.setWebId(webId);
        args.setTimeType(timeType);
        args.setTime(time);
        args.setUserFilter(userFilter);
        args.setStartIndex(startIndex);
        args.setOffset(offset);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public UserInfoResult getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getUserInfos();
      }
    }

    public void getUserLog(int webId, int timeType, String time, UserFilter userFilter, LogFilter logFilter, int startIndex, int offset, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getUserLog_call method_call = new getUserLog_call(webId, timeType, time, userFilter, logFilter, startIndex, offset, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getUserLog_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int webId;
      private int timeType;
      private String time;
      private UserFilter userFilter;
      private LogFilter logFilter;
      private int startIndex;
      private int offset;
      public getUserLog_call(int webId, int timeType, String time, UserFilter userFilter, LogFilter logFilter, int startIndex, int offset, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.webId = webId;
        this.timeType = timeType;
        this.time = time;
        this.userFilter = userFilter;
        this.logFilter = logFilter;
        this.startIndex = startIndex;
        this.offset = offset;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getUserLog", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getUserLog_args args = new getUserLog_args();
        args.setWebId(webId);
        args.setTimeType(timeType);
        args.setTime(time);
        args.setUserFilter(userFilter);
        args.setLogFilter(logFilter);
        args.setStartIndex(startIndex);
        args.setOffset(offset);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public UserLogResult getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getUserLog();
      }
    }

    public void getWebStatsForDate(int webId, int timeType, List<String> times, UserFilter userFilter, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getWebStatsForDate_call method_call = new getWebStatsForDate_call(webId, timeType, times, userFilter, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getWebStatsForDate_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int webId;
      private int timeType;
      private List<String> times;
      private UserFilter userFilter;
      public getWebStatsForDate_call(int webId, int timeType, List<String> times, UserFilter userFilter, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.webId = webId;
        this.timeType = timeType;
        this.times = times;
        this.userFilter = userFilter;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getWebStatsForDate", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getWebStatsForDate_args args = new getWebStatsForDate_args();
        args.setWebId(webId);
        args.setTimeType(timeType);
        args.setTimes(times);
        args.setUserFilter(userFilter);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<WebStats> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getWebStatsForDate();
      }
    }

    public void getWebStatsForReferrer(int webId, int timeType, String time, ReferrerFilter refFilter, UserFilter userFilter, int startIndex, int offset, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getWebStatsForReferrer_call method_call = new getWebStatsForReferrer_call(webId, timeType, time, refFilter, userFilter, startIndex, offset, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getWebStatsForReferrer_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int webId;
      private int timeType;
      private String time;
      private ReferrerFilter refFilter;
      private UserFilter userFilter;
      private int startIndex;
      private int offset;
      public getWebStatsForReferrer_call(int webId, int timeType, String time, ReferrerFilter refFilter, UserFilter userFilter, int startIndex, int offset, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.webId = webId;
        this.timeType = timeType;
        this.time = time;
        this.refFilter = refFilter;
        this.userFilter = userFilter;
        this.startIndex = startIndex;
        this.offset = offset;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getWebStatsForReferrer", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getWebStatsForReferrer_args args = new getWebStatsForReferrer_args();
        args.setWebId(webId);
        args.setTimeType(timeType);
        args.setTime(time);
        args.setRefFilter(refFilter);
        args.setUserFilter(userFilter);
        args.setStartIndex(startIndex);
        args.setOffset(offset);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<WebStats> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getWebStatsForReferrer();
      }
    }

    public void getWebStatsForKeyword(int webId, int timeType, String time, int seDomainId, UserFilter userFilter, int startIndex, int offset, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getWebStatsForKeyword_call method_call = new getWebStatsForKeyword_call(webId, timeType, time, seDomainId, userFilter, startIndex, offset, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getWebStatsForKeyword_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int webId;
      private int timeType;
      private String time;
      private int seDomainId;
      private UserFilter userFilter;
      private int startIndex;
      private int offset;
      public getWebStatsForKeyword_call(int webId, int timeType, String time, int seDomainId, UserFilter userFilter, int startIndex, int offset, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.webId = webId;
        this.timeType = timeType;
        this.time = time;
        this.seDomainId = seDomainId;
        this.userFilter = userFilter;
        this.startIndex = startIndex;
        this.offset = offset;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getWebStatsForKeyword", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getWebStatsForKeyword_args args = new getWebStatsForKeyword_args();
        args.setWebId(webId);
        args.setTimeType(timeType);
        args.setTime(time);
        args.setSeDomainId(seDomainId);
        args.setUserFilter(userFilter);
        args.setStartIndex(startIndex);
        args.setOffset(offset);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<WebStats> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getWebStatsForKeyword();
      }
    }

    public void getWebStatsForArea(int webId, int timeType, String time, UserFilter userFilter, AreaFilter areaFilter, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getWebStatsForArea_call method_call = new getWebStatsForArea_call(webId, timeType, time, userFilter, areaFilter, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getWebStatsForArea_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int webId;
      private int timeType;
      private String time;
      private UserFilter userFilter;
      private AreaFilter areaFilter;
      public getWebStatsForArea_call(int webId, int timeType, String time, UserFilter userFilter, AreaFilter areaFilter, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.webId = webId;
        this.timeType = timeType;
        this.time = time;
        this.userFilter = userFilter;
        this.areaFilter = areaFilter;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getWebStatsForArea", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getWebStatsForArea_args args = new getWebStatsForArea_args();
        args.setWebId(webId);
        args.setTimeType(timeType);
        args.setTime(time);
        args.setUserFilter(userFilter);
        args.setAreaFilter(areaFilter);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<WebStats> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getWebStatsForArea();
      }
    }

    public void getWebStatsForPage(int webId, int timeType, String time, UserFilter userFilter, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getWebStatsForPage_call method_call = new getWebStatsForPage_call(webId, timeType, time, userFilter, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getWebStatsForPage_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int webId;
      private int timeType;
      private String time;
      private UserFilter userFilter;
      public getWebStatsForPage_call(int webId, int timeType, String time, UserFilter userFilter, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.webId = webId;
        this.timeType = timeType;
        this.time = time;
        this.userFilter = userFilter;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getWebStatsForPage", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getWebStatsForPage_args args = new getWebStatsForPage_args();
        args.setWebId(webId);
        args.setTimeType(timeType);
        args.setTime(time);
        args.setUserFilter(userFilter);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<PageStats> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getWebStatsForPage();
      }
    }

    public void getWebStatsForEntryPage(int webId, int timeType, String time, UserFilter userFilter, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getWebStatsForEntryPage_call method_call = new getWebStatsForEntryPage_call(webId, timeType, time, userFilter, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getWebStatsForEntryPage_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int webId;
      private int timeType;
      private String time;
      private UserFilter userFilter;
      public getWebStatsForEntryPage_call(int webId, int timeType, String time, UserFilter userFilter, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.webId = webId;
        this.timeType = timeType;
        this.time = time;
        this.userFilter = userFilter;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getWebStatsForEntryPage", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getWebStatsForEntryPage_args args = new getWebStatsForEntryPage_args();
        args.setWebId(webId);
        args.setTimeType(timeType);
        args.setTime(time);
        args.setUserFilter(userFilter);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<EntryPageStats> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getWebStatsForEntryPage();
      }
    }

    public void getWebStatsForSysEnv(int webId, int timeType, String time, int sysType, UserFilter userFilter, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getWebStatsForSysEnv_call method_call = new getWebStatsForSysEnv_call(webId, timeType, time, sysType, userFilter, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getWebStatsForSysEnv_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int webId;
      private int timeType;
      private String time;
      private int sysType;
      private UserFilter userFilter;
      public getWebStatsForSysEnv_call(int webId, int timeType, String time, int sysType, UserFilter userFilter, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.webId = webId;
        this.timeType = timeType;
        this.time = time;
        this.sysType = sysType;
        this.userFilter = userFilter;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getWebStatsForSysEnv", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getWebStatsForSysEnv_args args = new getWebStatsForSysEnv_args();
        args.setWebId(webId);
        args.setTimeType(timeType);
        args.setTime(time);
        args.setSysType(sysType);
        args.setUserFilter(userFilter);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<WebStats> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getWebStatsForSysEnv();
      }
    }

    public void getWebStatsForHour(int webId, int timeType, String time, UserFilter userFilter, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getWebStatsForHour_call method_call = new getWebStatsForHour_call(webId, timeType, time, userFilter, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getWebStatsForHour_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int webId;
      private int timeType;
      private String time;
      private UserFilter userFilter;
      public getWebStatsForHour_call(int webId, int timeType, String time, UserFilter userFilter, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.webId = webId;
        this.timeType = timeType;
        this.time = time;
        this.userFilter = userFilter;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getWebStatsForHour", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getWebStatsForHour_args args = new getWebStatsForHour_args();
        args.setWebId(webId);
        args.setTimeType(timeType);
        args.setTime(time);
        args.setUserFilter(userFilter);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<WebStats> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getWebStatsForHour();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("getWebSiteStats", new getWebSiteStats());
      processMap.put("getUserInfos", new getUserInfos());
      processMap.put("getUserLog", new getUserLog());
      processMap.put("getWebStatsForDate", new getWebStatsForDate());
      processMap.put("getWebStatsForReferrer", new getWebStatsForReferrer());
      processMap.put("getWebStatsForKeyword", new getWebStatsForKeyword());
      processMap.put("getWebStatsForArea", new getWebStatsForArea());
      processMap.put("getWebStatsForPage", new getWebStatsForPage());
      processMap.put("getWebStatsForEntryPage", new getWebStatsForEntryPage());
      processMap.put("getWebStatsForSysEnv", new getWebStatsForSysEnv());
      processMap.put("getWebStatsForHour", new getWebStatsForHour());
      return processMap;
    }

    public static class getWebSiteStats<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getWebSiteStats_args> {
      public getWebSiteStats() {
        super("getWebSiteStats");
      }

      public getWebSiteStats_args getEmptyArgsInstance() {
        return new getWebSiteStats_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getWebSiteStats_result getResult(I iface, getWebSiteStats_args args) throws org.apache.thrift.TException {
        getWebSiteStats_result result = new getWebSiteStats_result();
        result.success = iface.getWebSiteStats(args.webId, args.timeType, args.time);
        return result;
      }
    }

    public static class getUserInfos<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getUserInfos_args> {
      public getUserInfos() {
        super("getUserInfos");
      }

      public getUserInfos_args getEmptyArgsInstance() {
        return new getUserInfos_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getUserInfos_result getResult(I iface, getUserInfos_args args) throws org.apache.thrift.TException {
        getUserInfos_result result = new getUserInfos_result();
        result.success = iface.getUserInfos(args.webId, args.timeType, args.time, args.userFilter, args.startIndex, args.offset);
        return result;
      }
    }

    public static class getUserLog<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getUserLog_args> {
      public getUserLog() {
        super("getUserLog");
      }

      public getUserLog_args getEmptyArgsInstance() {
        return new getUserLog_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getUserLog_result getResult(I iface, getUserLog_args args) throws org.apache.thrift.TException {
        getUserLog_result result = new getUserLog_result();
        result.success = iface.getUserLog(args.webId, args.timeType, args.time, args.userFilter, args.logFilter, args.startIndex, args.offset);
        return result;
      }
    }

    public static class getWebStatsForDate<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getWebStatsForDate_args> {
      public getWebStatsForDate() {
        super("getWebStatsForDate");
      }

      public getWebStatsForDate_args getEmptyArgsInstance() {
        return new getWebStatsForDate_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getWebStatsForDate_result getResult(I iface, getWebStatsForDate_args args) throws org.apache.thrift.TException {
        getWebStatsForDate_result result = new getWebStatsForDate_result();
        result.success = iface.getWebStatsForDate(args.webId, args.timeType, args.times, args.userFilter);
        return result;
      }
    }

    public static class getWebStatsForReferrer<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getWebStatsForReferrer_args> {
      public getWebStatsForReferrer() {
        super("getWebStatsForReferrer");
      }

      public getWebStatsForReferrer_args getEmptyArgsInstance() {
        return new getWebStatsForReferrer_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getWebStatsForReferrer_result getResult(I iface, getWebStatsForReferrer_args args) throws org.apache.thrift.TException {
        getWebStatsForReferrer_result result = new getWebStatsForReferrer_result();
        result.success = iface.getWebStatsForReferrer(args.webId, args.timeType, args.time, args.refFilter, args.userFilter, args.startIndex, args.offset);
        return result;
      }
    }

    public static class getWebStatsForKeyword<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getWebStatsForKeyword_args> {
      public getWebStatsForKeyword() {
        super("getWebStatsForKeyword");
      }

      public getWebStatsForKeyword_args getEmptyArgsInstance() {
        return new getWebStatsForKeyword_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getWebStatsForKeyword_result getResult(I iface, getWebStatsForKeyword_args args) throws org.apache.thrift.TException {
        getWebStatsForKeyword_result result = new getWebStatsForKeyword_result();
        result.success = iface.getWebStatsForKeyword(args.webId, args.timeType, args.time, args.seDomainId, args.userFilter, args.startIndex, args.offset);
        return result;
      }
    }

    public static class getWebStatsForArea<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getWebStatsForArea_args> {
      public getWebStatsForArea() {
        super("getWebStatsForArea");
      }

      public getWebStatsForArea_args getEmptyArgsInstance() {
        return new getWebStatsForArea_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getWebStatsForArea_result getResult(I iface, getWebStatsForArea_args args) throws org.apache.thrift.TException {
        getWebStatsForArea_result result = new getWebStatsForArea_result();
        result.success = iface.getWebStatsForArea(args.webId, args.timeType, args.time, args.userFilter, args.areaFilter);
        return result;
      }
    }

    public static class getWebStatsForPage<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getWebStatsForPage_args> {
      public getWebStatsForPage() {
        super("getWebStatsForPage");
      }

      public getWebStatsForPage_args getEmptyArgsInstance() {
        return new getWebStatsForPage_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getWebStatsForPage_result getResult(I iface, getWebStatsForPage_args args) throws org.apache.thrift.TException {
        getWebStatsForPage_result result = new getWebStatsForPage_result();
        result.success = iface.getWebStatsForPage(args.webId, args.timeType, args.time, args.userFilter);
        return result;
      }
    }

    public static class getWebStatsForEntryPage<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getWebStatsForEntryPage_args> {
      public getWebStatsForEntryPage() {
        super("getWebStatsForEntryPage");
      }

      public getWebStatsForEntryPage_args getEmptyArgsInstance() {
        return new getWebStatsForEntryPage_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getWebStatsForEntryPage_result getResult(I iface, getWebStatsForEntryPage_args args) throws org.apache.thrift.TException {
        getWebStatsForEntryPage_result result = new getWebStatsForEntryPage_result();
        result.success = iface.getWebStatsForEntryPage(args.webId, args.timeType, args.time, args.userFilter);
        return result;
      }
    }

    public static class getWebStatsForSysEnv<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getWebStatsForSysEnv_args> {
      public getWebStatsForSysEnv() {
        super("getWebStatsForSysEnv");
      }

      public getWebStatsForSysEnv_args getEmptyArgsInstance() {
        return new getWebStatsForSysEnv_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getWebStatsForSysEnv_result getResult(I iface, getWebStatsForSysEnv_args args) throws org.apache.thrift.TException {
        getWebStatsForSysEnv_result result = new getWebStatsForSysEnv_result();
        result.success = iface.getWebStatsForSysEnv(args.webId, args.timeType, args.time, args.sysType, args.userFilter);
        return result;
      }
    }

    public static class getWebStatsForHour<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getWebStatsForHour_args> {
      public getWebStatsForHour() {
        super("getWebStatsForHour");
      }

      public getWebStatsForHour_args getEmptyArgsInstance() {
        return new getWebStatsForHour_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getWebStatsForHour_result getResult(I iface, getWebStatsForHour_args args) throws org.apache.thrift.TException {
        getWebStatsForHour_result result = new getWebStatsForHour_result();
        result.success = iface.getWebStatsForHour(args.webId, args.timeType, args.time, args.userFilter);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("getWebSiteStats", new getWebSiteStats());
      processMap.put("getUserInfos", new getUserInfos());
      processMap.put("getUserLog", new getUserLog());
      processMap.put("getWebStatsForDate", new getWebStatsForDate());
      processMap.put("getWebStatsForReferrer", new getWebStatsForReferrer());
      processMap.put("getWebStatsForKeyword", new getWebStatsForKeyword());
      processMap.put("getWebStatsForArea", new getWebStatsForArea());
      processMap.put("getWebStatsForPage", new getWebStatsForPage());
      processMap.put("getWebStatsForEntryPage", new getWebStatsForEntryPage());
      processMap.put("getWebStatsForSysEnv", new getWebStatsForSysEnv());
      processMap.put("getWebStatsForHour", new getWebStatsForHour());
      return processMap;
    }

    public static class getWebSiteStats<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getWebSiteStats_args, Map<String,WebStats>> {
      public getWebSiteStats() {
        super("getWebSiteStats");
      }

      public getWebSiteStats_args getEmptyArgsInstance() {
        return new getWebSiteStats_args();
      }

      public AsyncMethodCallback<Map<String,WebStats>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Map<String,WebStats>>() { 
          public void onComplete(Map<String,WebStats> o) {
            getWebSiteStats_result result = new getWebSiteStats_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getWebSiteStats_result result = new getWebSiteStats_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getWebSiteStats_args args, org.apache.thrift.async.AsyncMethodCallback<Map<String,WebStats>> resultHandler) throws TException {
        iface.getWebSiteStats(args.webId, args.timeType, args.time,resultHandler);
      }
    }

    public static class getUserInfos<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getUserInfos_args, UserInfoResult> {
      public getUserInfos() {
        super("getUserInfos");
      }

      public getUserInfos_args getEmptyArgsInstance() {
        return new getUserInfos_args();
      }

      public AsyncMethodCallback<UserInfoResult> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<UserInfoResult>() { 
          public void onComplete(UserInfoResult o) {
            getUserInfos_result result = new getUserInfos_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getUserInfos_result result = new getUserInfos_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getUserInfos_args args, org.apache.thrift.async.AsyncMethodCallback<UserInfoResult> resultHandler) throws TException {
        iface.getUserInfos(args.webId, args.timeType, args.time, args.userFilter, args.startIndex, args.offset,resultHandler);
      }
    }

    public static class getUserLog<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getUserLog_args, UserLogResult> {
      public getUserLog() {
        super("getUserLog");
      }

      public getUserLog_args getEmptyArgsInstance() {
        return new getUserLog_args();
      }

      public AsyncMethodCallback<UserLogResult> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<UserLogResult>() { 
          public void onComplete(UserLogResult o) {
            getUserLog_result result = new getUserLog_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getUserLog_result result = new getUserLog_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getUserLog_args args, org.apache.thrift.async.AsyncMethodCallback<UserLogResult> resultHandler) throws TException {
        iface.getUserLog(args.webId, args.timeType, args.time, args.userFilter, args.logFilter, args.startIndex, args.offset,resultHandler);
      }
    }

    public static class getWebStatsForDate<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getWebStatsForDate_args, List<WebStats>> {
      public getWebStatsForDate() {
        super("getWebStatsForDate");
      }

      public getWebStatsForDate_args getEmptyArgsInstance() {
        return new getWebStatsForDate_args();
      }

      public AsyncMethodCallback<List<WebStats>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<WebStats>>() { 
          public void onComplete(List<WebStats> o) {
            getWebStatsForDate_result result = new getWebStatsForDate_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getWebStatsForDate_result result = new getWebStatsForDate_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getWebStatsForDate_args args, org.apache.thrift.async.AsyncMethodCallback<List<WebStats>> resultHandler) throws TException {
        iface.getWebStatsForDate(args.webId, args.timeType, args.times, args.userFilter,resultHandler);
      }
    }

    public static class getWebStatsForReferrer<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getWebStatsForReferrer_args, List<WebStats>> {
      public getWebStatsForReferrer() {
        super("getWebStatsForReferrer");
      }

      public getWebStatsForReferrer_args getEmptyArgsInstance() {
        return new getWebStatsForReferrer_args();
      }

      public AsyncMethodCallback<List<WebStats>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<WebStats>>() { 
          public void onComplete(List<WebStats> o) {
            getWebStatsForReferrer_result result = new getWebStatsForReferrer_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getWebStatsForReferrer_result result = new getWebStatsForReferrer_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getWebStatsForReferrer_args args, org.apache.thrift.async.AsyncMethodCallback<List<WebStats>> resultHandler) throws TException {
        iface.getWebStatsForReferrer(args.webId, args.timeType, args.time, args.refFilter, args.userFilter, args.startIndex, args.offset,resultHandler);
      }
    }

    public static class getWebStatsForKeyword<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getWebStatsForKeyword_args, List<WebStats>> {
      public getWebStatsForKeyword() {
        super("getWebStatsForKeyword");
      }

      public getWebStatsForKeyword_args getEmptyArgsInstance() {
        return new getWebStatsForKeyword_args();
      }

      public AsyncMethodCallback<List<WebStats>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<WebStats>>() { 
          public void onComplete(List<WebStats> o) {
            getWebStatsForKeyword_result result = new getWebStatsForKeyword_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getWebStatsForKeyword_result result = new getWebStatsForKeyword_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getWebStatsForKeyword_args args, org.apache.thrift.async.AsyncMethodCallback<List<WebStats>> resultHandler) throws TException {
        iface.getWebStatsForKeyword(args.webId, args.timeType, args.time, args.seDomainId, args.userFilter, args.startIndex, args.offset,resultHandler);
      }
    }

    public static class getWebStatsForArea<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getWebStatsForArea_args, List<WebStats>> {
      public getWebStatsForArea() {
        super("getWebStatsForArea");
      }

      public getWebStatsForArea_args getEmptyArgsInstance() {
        return new getWebStatsForArea_args();
      }

      public AsyncMethodCallback<List<WebStats>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<WebStats>>() { 
          public void onComplete(List<WebStats> o) {
            getWebStatsForArea_result result = new getWebStatsForArea_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getWebStatsForArea_result result = new getWebStatsForArea_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getWebStatsForArea_args args, org.apache.thrift.async.AsyncMethodCallback<List<WebStats>> resultHandler) throws TException {
        iface.getWebStatsForArea(args.webId, args.timeType, args.time, args.userFilter, args.areaFilter,resultHandler);
      }
    }

    public static class getWebStatsForPage<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getWebStatsForPage_args, List<PageStats>> {
      public getWebStatsForPage() {
        super("getWebStatsForPage");
      }

      public getWebStatsForPage_args getEmptyArgsInstance() {
        return new getWebStatsForPage_args();
      }

      public AsyncMethodCallback<List<PageStats>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<PageStats>>() { 
          public void onComplete(List<PageStats> o) {
            getWebStatsForPage_result result = new getWebStatsForPage_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getWebStatsForPage_result result = new getWebStatsForPage_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getWebStatsForPage_args args, org.apache.thrift.async.AsyncMethodCallback<List<PageStats>> resultHandler) throws TException {
        iface.getWebStatsForPage(args.webId, args.timeType, args.time, args.userFilter,resultHandler);
      }
    }

    public static class getWebStatsForEntryPage<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getWebStatsForEntryPage_args, List<EntryPageStats>> {
      public getWebStatsForEntryPage() {
        super("getWebStatsForEntryPage");
      }

      public getWebStatsForEntryPage_args getEmptyArgsInstance() {
        return new getWebStatsForEntryPage_args();
      }

      public AsyncMethodCallback<List<EntryPageStats>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<EntryPageStats>>() { 
          public void onComplete(List<EntryPageStats> o) {
            getWebStatsForEntryPage_result result = new getWebStatsForEntryPage_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getWebStatsForEntryPage_result result = new getWebStatsForEntryPage_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getWebStatsForEntryPage_args args, org.apache.thrift.async.AsyncMethodCallback<List<EntryPageStats>> resultHandler) throws TException {
        iface.getWebStatsForEntryPage(args.webId, args.timeType, args.time, args.userFilter,resultHandler);
      }
    }

    public static class getWebStatsForSysEnv<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getWebStatsForSysEnv_args, List<WebStats>> {
      public getWebStatsForSysEnv() {
        super("getWebStatsForSysEnv");
      }

      public getWebStatsForSysEnv_args getEmptyArgsInstance() {
        return new getWebStatsForSysEnv_args();
      }

      public AsyncMethodCallback<List<WebStats>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<WebStats>>() { 
          public void onComplete(List<WebStats> o) {
            getWebStatsForSysEnv_result result = new getWebStatsForSysEnv_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getWebStatsForSysEnv_result result = new getWebStatsForSysEnv_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getWebStatsForSysEnv_args args, org.apache.thrift.async.AsyncMethodCallback<List<WebStats>> resultHandler) throws TException {
        iface.getWebStatsForSysEnv(args.webId, args.timeType, args.time, args.sysType, args.userFilter,resultHandler);
      }
    }

    public static class getWebStatsForHour<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getWebStatsForHour_args, List<WebStats>> {
      public getWebStatsForHour() {
        super("getWebStatsForHour");
      }

      public getWebStatsForHour_args getEmptyArgsInstance() {
        return new getWebStatsForHour_args();
      }

      public AsyncMethodCallback<List<WebStats>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<WebStats>>() { 
          public void onComplete(List<WebStats> o) {
            getWebStatsForHour_result result = new getWebStatsForHour_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getWebStatsForHour_result result = new getWebStatsForHour_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getWebStatsForHour_args args, org.apache.thrift.async.AsyncMethodCallback<List<WebStats>> resultHandler) throws TException {
        iface.getWebStatsForHour(args.webId, args.timeType, args.time, args.userFilter,resultHandler);
      }
    }

  }

  public static class getWebSiteStats_args implements org.apache.thrift.TBase<getWebSiteStats_args, getWebSiteStats_args._Fields>, java.io.Serializable, Cloneable, Comparable<getWebSiteStats_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getWebSiteStats_args");

    private static final org.apache.thrift.protocol.TField WEB_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("webId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField TIME_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("timeType", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("time", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getWebSiteStats_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getWebSiteStats_argsTupleSchemeFactory());
    }

    public int webId; // required
    public int timeType; // required
    public String time; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      WEB_ID((short)1, "webId"),
      TIME_TYPE((short)2, "timeType"),
      TIME((short)3, "time");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // WEB_ID
            return WEB_ID;
          case 2: // TIME_TYPE
            return TIME_TYPE;
          case 3: // TIME
            return TIME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __WEBID_ISSET_ID = 0;
    private static final int __TIMETYPE_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.WEB_ID, new org.apache.thrift.meta_data.FieldMetaData("webId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.TIME_TYPE, new org.apache.thrift.meta_data.FieldMetaData("timeType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.TIME, new org.apache.thrift.meta_data.FieldMetaData("time", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getWebSiteStats_args.class, metaDataMap);
    }

    public getWebSiteStats_args() {
    }

    public getWebSiteStats_args(
      int webId,
      int timeType,
      String time)
    {
      this();
      this.webId = webId;
      setWebIdIsSet(true);
      this.timeType = timeType;
      setTimeTypeIsSet(true);
      this.time = time;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getWebSiteStats_args(getWebSiteStats_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.webId = other.webId;
      this.timeType = other.timeType;
      if (other.isSetTime()) {
        this.time = other.time;
      }
    }

    public getWebSiteStats_args deepCopy() {
      return new getWebSiteStats_args(this);
    }

    @Override
    public void clear() {
      setWebIdIsSet(false);
      this.webId = 0;
      setTimeTypeIsSet(false);
      this.timeType = 0;
      this.time = null;
    }

    public int getWebId() {
      return this.webId;
    }

    public getWebSiteStats_args setWebId(int webId) {
      this.webId = webId;
      setWebIdIsSet(true);
      return this;
    }

    public void unsetWebId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __WEBID_ISSET_ID);
    }

    /** Returns true if field webId is set (has been assigned a value) and false otherwise */
    public boolean isSetWebId() {
      return EncodingUtils.testBit(__isset_bitfield, __WEBID_ISSET_ID);
    }

    public void setWebIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __WEBID_ISSET_ID, value);
    }

    public int getTimeType() {
      return this.timeType;
    }

    public getWebSiteStats_args setTimeType(int timeType) {
      this.timeType = timeType;
      setTimeTypeIsSet(true);
      return this;
    }

    public void unsetTimeType() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TIMETYPE_ISSET_ID);
    }

    /** Returns true if field timeType is set (has been assigned a value) and false otherwise */
    public boolean isSetTimeType() {
      return EncodingUtils.testBit(__isset_bitfield, __TIMETYPE_ISSET_ID);
    }

    public void setTimeTypeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TIMETYPE_ISSET_ID, value);
    }

    public String getTime() {
      return this.time;
    }

    public getWebSiteStats_args setTime(String time) {
      this.time = time;
      return this;
    }

    public void unsetTime() {
      this.time = null;
    }

    /** Returns true if field time is set (has been assigned a value) and false otherwise */
    public boolean isSetTime() {
      return this.time != null;
    }

    public void setTimeIsSet(boolean value) {
      if (!value) {
        this.time = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case WEB_ID:
        if (value == null) {
          unsetWebId();
        } else {
          setWebId((Integer)value);
        }
        break;

      case TIME_TYPE:
        if (value == null) {
          unsetTimeType();
        } else {
          setTimeType((Integer)value);
        }
        break;

      case TIME:
        if (value == null) {
          unsetTime();
        } else {
          setTime((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case WEB_ID:
        return Integer.valueOf(getWebId());

      case TIME_TYPE:
        return Integer.valueOf(getTimeType());

      case TIME:
        return getTime();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case WEB_ID:
        return isSetWebId();
      case TIME_TYPE:
        return isSetTimeType();
      case TIME:
        return isSetTime();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getWebSiteStats_args)
        return this.equals((getWebSiteStats_args)that);
      return false;
    }

    public boolean equals(getWebSiteStats_args that) {
      if (that == null)
        return false;

      boolean this_present_webId = true;
      boolean that_present_webId = true;
      if (this_present_webId || that_present_webId) {
        if (!(this_present_webId && that_present_webId))
          return false;
        if (this.webId != that.webId)
          return false;
      }

      boolean this_present_timeType = true;
      boolean that_present_timeType = true;
      if (this_present_timeType || that_present_timeType) {
        if (!(this_present_timeType && that_present_timeType))
          return false;
        if (this.timeType != that.timeType)
          return false;
      }

      boolean this_present_time = true && this.isSetTime();
      boolean that_present_time = true && that.isSetTime();
      if (this_present_time || that_present_time) {
        if (!(this_present_time && that_present_time))
          return false;
        if (!this.time.equals(that.time))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getWebSiteStats_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetWebId()).compareTo(other.isSetWebId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetWebId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.webId, other.webId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTimeType()).compareTo(other.isSetTimeType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTimeType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timeType, other.timeType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTime()).compareTo(other.isSetTime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTime()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.time, other.time);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getWebSiteStats_args(");
      boolean first = true;

      sb.append("webId:");
      sb.append(this.webId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("timeType:");
      sb.append(this.timeType);
      first = false;
      if (!first) sb.append(", ");
      sb.append("time:");
      if (this.time == null) {
        sb.append("null");
      } else {
        sb.append(this.time);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getWebSiteStats_argsStandardSchemeFactory implements SchemeFactory {
      public getWebSiteStats_argsStandardScheme getScheme() {
        return new getWebSiteStats_argsStandardScheme();
      }
    }

    private static class getWebSiteStats_argsStandardScheme extends StandardScheme<getWebSiteStats_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getWebSiteStats_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // WEB_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.webId = iprot.readI32();
                struct.setWebIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TIME_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.timeType = iprot.readI32();
                struct.setTimeTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // TIME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.time = iprot.readString();
                struct.setTimeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getWebSiteStats_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(WEB_ID_FIELD_DESC);
        oprot.writeI32(struct.webId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(TIME_TYPE_FIELD_DESC);
        oprot.writeI32(struct.timeType);
        oprot.writeFieldEnd();
        if (struct.time != null) {
          oprot.writeFieldBegin(TIME_FIELD_DESC);
          oprot.writeString(struct.time);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getWebSiteStats_argsTupleSchemeFactory implements SchemeFactory {
      public getWebSiteStats_argsTupleScheme getScheme() {
        return new getWebSiteStats_argsTupleScheme();
      }
    }

    private static class getWebSiteStats_argsTupleScheme extends TupleScheme<getWebSiteStats_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getWebSiteStats_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetWebId()) {
          optionals.set(0);
        }
        if (struct.isSetTimeType()) {
          optionals.set(1);
        }
        if (struct.isSetTime()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetWebId()) {
          oprot.writeI32(struct.webId);
        }
        if (struct.isSetTimeType()) {
          oprot.writeI32(struct.timeType);
        }
        if (struct.isSetTime()) {
          oprot.writeString(struct.time);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getWebSiteStats_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.webId = iprot.readI32();
          struct.setWebIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.timeType = iprot.readI32();
          struct.setTimeTypeIsSet(true);
        }
        if (incoming.get(2)) {
          struct.time = iprot.readString();
          struct.setTimeIsSet(true);
        }
      }
    }

  }

  public static class getWebSiteStats_result implements org.apache.thrift.TBase<getWebSiteStats_result, getWebSiteStats_result._Fields>, java.io.Serializable, Cloneable, Comparable<getWebSiteStats_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getWebSiteStats_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.MAP, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getWebSiteStats_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getWebSiteStats_resultTupleSchemeFactory());
    }

    public Map<String,WebStats> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, WebStats.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getWebSiteStats_result.class, metaDataMap);
    }

    public getWebSiteStats_result() {
    }

    public getWebSiteStats_result(
      Map<String,WebStats> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getWebSiteStats_result(getWebSiteStats_result other) {
      if (other.isSetSuccess()) {
        Map<String,WebStats> __this__success = new HashMap<String,WebStats>(other.success.size());
        for (Map.Entry<String, WebStats> other_element : other.success.entrySet()) {

          String other_element_key = other_element.getKey();
          WebStats other_element_value = other_element.getValue();

          String __this__success_copy_key = other_element_key;

          WebStats __this__success_copy_value = new WebStats(other_element_value);

          __this__success.put(__this__success_copy_key, __this__success_copy_value);
        }
        this.success = __this__success;
      }
    }

    public getWebSiteStats_result deepCopy() {
      return new getWebSiteStats_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(String key, WebStats val) {
      if (this.success == null) {
        this.success = new HashMap<String,WebStats>();
      }
      this.success.put(key, val);
    }

    public Map<String,WebStats> getSuccess() {
      return this.success;
    }

    public getWebSiteStats_result setSuccess(Map<String,WebStats> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Map<String,WebStats>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getWebSiteStats_result)
        return this.equals((getWebSiteStats_result)that);
      return false;
    }

    public boolean equals(getWebSiteStats_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getWebSiteStats_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getWebSiteStats_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getWebSiteStats_resultStandardSchemeFactory implements SchemeFactory {
      public getWebSiteStats_resultStandardScheme getScheme() {
        return new getWebSiteStats_resultStandardScheme();
      }
    }

    private static class getWebSiteStats_resultStandardScheme extends StandardScheme<getWebSiteStats_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getWebSiteStats_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map16 = iprot.readMapBegin();
                  struct.success = new HashMap<String,WebStats>(2*_map16.size);
                  for (int _i17 = 0; _i17 < _map16.size; ++_i17)
                  {
                    String _key18;
                    WebStats _val19;
                    _key18 = iprot.readString();
                    _val19 = new WebStats();
                    _val19.read(iprot);
                    struct.success.put(_key18, _val19);
                  }
                  iprot.readMapEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getWebSiteStats_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (Map.Entry<String, WebStats> _iter20 : struct.success.entrySet())
            {
              oprot.writeString(_iter20.getKey());
              _iter20.getValue().write(oprot);
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getWebSiteStats_resultTupleSchemeFactory implements SchemeFactory {
      public getWebSiteStats_resultTupleScheme getScheme() {
        return new getWebSiteStats_resultTupleScheme();
      }
    }

    private static class getWebSiteStats_resultTupleScheme extends TupleScheme<getWebSiteStats_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getWebSiteStats_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Map.Entry<String, WebStats> _iter21 : struct.success.entrySet())
            {
              oprot.writeString(_iter21.getKey());
              _iter21.getValue().write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getWebSiteStats_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map22 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new HashMap<String,WebStats>(2*_map22.size);
            for (int _i23 = 0; _i23 < _map22.size; ++_i23)
            {
              String _key24;
              WebStats _val25;
              _key24 = iprot.readString();
              _val25 = new WebStats();
              _val25.read(iprot);
              struct.success.put(_key24, _val25);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getUserInfos_args implements org.apache.thrift.TBase<getUserInfos_args, getUserInfos_args._Fields>, java.io.Serializable, Cloneable, Comparable<getUserInfos_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getUserInfos_args");

    private static final org.apache.thrift.protocol.TField WEB_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("webId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField TIME_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("timeType", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("time", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField USER_FILTER_FIELD_DESC = new org.apache.thrift.protocol.TField("userFilter", org.apache.thrift.protocol.TType.STRUCT, (short)4);
    private static final org.apache.thrift.protocol.TField START_INDEX_FIELD_DESC = new org.apache.thrift.protocol.TField("startIndex", org.apache.thrift.protocol.TType.I32, (short)5);
    private static final org.apache.thrift.protocol.TField OFFSET_FIELD_DESC = new org.apache.thrift.protocol.TField("offset", org.apache.thrift.protocol.TType.I32, (short)6);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getUserInfos_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getUserInfos_argsTupleSchemeFactory());
    }

    public int webId; // required
    public int timeType; // required
    public String time; // required
    public UserFilter userFilter; // required
    public int startIndex; // required
    public int offset; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      WEB_ID((short)1, "webId"),
      TIME_TYPE((short)2, "timeType"),
      TIME((short)3, "time"),
      USER_FILTER((short)4, "userFilter"),
      START_INDEX((short)5, "startIndex"),
      OFFSET((short)6, "offset");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // WEB_ID
            return WEB_ID;
          case 2: // TIME_TYPE
            return TIME_TYPE;
          case 3: // TIME
            return TIME;
          case 4: // USER_FILTER
            return USER_FILTER;
          case 5: // START_INDEX
            return START_INDEX;
          case 6: // OFFSET
            return OFFSET;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __WEBID_ISSET_ID = 0;
    private static final int __TIMETYPE_ISSET_ID = 1;
    private static final int __STARTINDEX_ISSET_ID = 2;
    private static final int __OFFSET_ISSET_ID = 3;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.WEB_ID, new org.apache.thrift.meta_data.FieldMetaData("webId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.TIME_TYPE, new org.apache.thrift.meta_data.FieldMetaData("timeType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.TIME, new org.apache.thrift.meta_data.FieldMetaData("time", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.USER_FILTER, new org.apache.thrift.meta_data.FieldMetaData("userFilter", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, UserFilter.class)));
      tmpMap.put(_Fields.START_INDEX, new org.apache.thrift.meta_data.FieldMetaData("startIndex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.OFFSET, new org.apache.thrift.meta_data.FieldMetaData("offset", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getUserInfos_args.class, metaDataMap);
    }

    public getUserInfos_args() {
    }

    public getUserInfos_args(
      int webId,
      int timeType,
      String time,
      UserFilter userFilter,
      int startIndex,
      int offset)
    {
      this();
      this.webId = webId;
      setWebIdIsSet(true);
      this.timeType = timeType;
      setTimeTypeIsSet(true);
      this.time = time;
      this.userFilter = userFilter;
      this.startIndex = startIndex;
      setStartIndexIsSet(true);
      this.offset = offset;
      setOffsetIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getUserInfos_args(getUserInfos_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.webId = other.webId;
      this.timeType = other.timeType;
      if (other.isSetTime()) {
        this.time = other.time;
      }
      if (other.isSetUserFilter()) {
        this.userFilter = new UserFilter(other.userFilter);
      }
      this.startIndex = other.startIndex;
      this.offset = other.offset;
    }

    public getUserInfos_args deepCopy() {
      return new getUserInfos_args(this);
    }

    @Override
    public void clear() {
      setWebIdIsSet(false);
      this.webId = 0;
      setTimeTypeIsSet(false);
      this.timeType = 0;
      this.time = null;
      this.userFilter = null;
      setStartIndexIsSet(false);
      this.startIndex = 0;
      setOffsetIsSet(false);
      this.offset = 0;
    }

    public int getWebId() {
      return this.webId;
    }

    public getUserInfos_args setWebId(int webId) {
      this.webId = webId;
      setWebIdIsSet(true);
      return this;
    }

    public void unsetWebId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __WEBID_ISSET_ID);
    }

    /** Returns true if field webId is set (has been assigned a value) and false otherwise */
    public boolean isSetWebId() {
      return EncodingUtils.testBit(__isset_bitfield, __WEBID_ISSET_ID);
    }

    public void setWebIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __WEBID_ISSET_ID, value);
    }

    public int getTimeType() {
      return this.timeType;
    }

    public getUserInfos_args setTimeType(int timeType) {
      this.timeType = timeType;
      setTimeTypeIsSet(true);
      return this;
    }

    public void unsetTimeType() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TIMETYPE_ISSET_ID);
    }

    /** Returns true if field timeType is set (has been assigned a value) and false otherwise */
    public boolean isSetTimeType() {
      return EncodingUtils.testBit(__isset_bitfield, __TIMETYPE_ISSET_ID);
    }

    public void setTimeTypeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TIMETYPE_ISSET_ID, value);
    }

    public String getTime() {
      return this.time;
    }

    public getUserInfos_args setTime(String time) {
      this.time = time;
      return this;
    }

    public void unsetTime() {
      this.time = null;
    }

    /** Returns true if field time is set (has been assigned a value) and false otherwise */
    public boolean isSetTime() {
      return this.time != null;
    }

    public void setTimeIsSet(boolean value) {
      if (!value) {
        this.time = null;
      }
    }

    public UserFilter getUserFilter() {
      return this.userFilter;
    }

    public getUserInfos_args setUserFilter(UserFilter userFilter) {
      this.userFilter = userFilter;
      return this;
    }

    public void unsetUserFilter() {
      this.userFilter = null;
    }

    /** Returns true if field userFilter is set (has been assigned a value) and false otherwise */
    public boolean isSetUserFilter() {
      return this.userFilter != null;
    }

    public void setUserFilterIsSet(boolean value) {
      if (!value) {
        this.userFilter = null;
      }
    }

    public int getStartIndex() {
      return this.startIndex;
    }

    public getUserInfos_args setStartIndex(int startIndex) {
      this.startIndex = startIndex;
      setStartIndexIsSet(true);
      return this;
    }

    public void unsetStartIndex() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STARTINDEX_ISSET_ID);
    }

    /** Returns true if field startIndex is set (has been assigned a value) and false otherwise */
    public boolean isSetStartIndex() {
      return EncodingUtils.testBit(__isset_bitfield, __STARTINDEX_ISSET_ID);
    }

    public void setStartIndexIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STARTINDEX_ISSET_ID, value);
    }

    public int getOffset() {
      return this.offset;
    }

    public getUserInfos_args setOffset(int offset) {
      this.offset = offset;
      setOffsetIsSet(true);
      return this;
    }

    public void unsetOffset() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OFFSET_ISSET_ID);
    }

    /** Returns true if field offset is set (has been assigned a value) and false otherwise */
    public boolean isSetOffset() {
      return EncodingUtils.testBit(__isset_bitfield, __OFFSET_ISSET_ID);
    }

    public void setOffsetIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OFFSET_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case WEB_ID:
        if (value == null) {
          unsetWebId();
        } else {
          setWebId((Integer)value);
        }
        break;

      case TIME_TYPE:
        if (value == null) {
          unsetTimeType();
        } else {
          setTimeType((Integer)value);
        }
        break;

      case TIME:
        if (value == null) {
          unsetTime();
        } else {
          setTime((String)value);
        }
        break;

      case USER_FILTER:
        if (value == null) {
          unsetUserFilter();
        } else {
          setUserFilter((UserFilter)value);
        }
        break;

      case START_INDEX:
        if (value == null) {
          unsetStartIndex();
        } else {
          setStartIndex((Integer)value);
        }
        break;

      case OFFSET:
        if (value == null) {
          unsetOffset();
        } else {
          setOffset((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case WEB_ID:
        return Integer.valueOf(getWebId());

      case TIME_TYPE:
        return Integer.valueOf(getTimeType());

      case TIME:
        return getTime();

      case USER_FILTER:
        return getUserFilter();

      case START_INDEX:
        return Integer.valueOf(getStartIndex());

      case OFFSET:
        return Integer.valueOf(getOffset());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case WEB_ID:
        return isSetWebId();
      case TIME_TYPE:
        return isSetTimeType();
      case TIME:
        return isSetTime();
      case USER_FILTER:
        return isSetUserFilter();
      case START_INDEX:
        return isSetStartIndex();
      case OFFSET:
        return isSetOffset();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getUserInfos_args)
        return this.equals((getUserInfos_args)that);
      return false;
    }

    public boolean equals(getUserInfos_args that) {
      if (that == null)
        return false;

      boolean this_present_webId = true;
      boolean that_present_webId = true;
      if (this_present_webId || that_present_webId) {
        if (!(this_present_webId && that_present_webId))
          return false;
        if (this.webId != that.webId)
          return false;
      }

      boolean this_present_timeType = true;
      boolean that_present_timeType = true;
      if (this_present_timeType || that_present_timeType) {
        if (!(this_present_timeType && that_present_timeType))
          return false;
        if (this.timeType != that.timeType)
          return false;
      }

      boolean this_present_time = true && this.isSetTime();
      boolean that_present_time = true && that.isSetTime();
      if (this_present_time || that_present_time) {
        if (!(this_present_time && that_present_time))
          return false;
        if (!this.time.equals(that.time))
          return false;
      }

      boolean this_present_userFilter = true && this.isSetUserFilter();
      boolean that_present_userFilter = true && that.isSetUserFilter();
      if (this_present_userFilter || that_present_userFilter) {
        if (!(this_present_userFilter && that_present_userFilter))
          return false;
        if (!this.userFilter.equals(that.userFilter))
          return false;
      }

      boolean this_present_startIndex = true;
      boolean that_present_startIndex = true;
      if (this_present_startIndex || that_present_startIndex) {
        if (!(this_present_startIndex && that_present_startIndex))
          return false;
        if (this.startIndex != that.startIndex)
          return false;
      }

      boolean this_present_offset = true;
      boolean that_present_offset = true;
      if (this_present_offset || that_present_offset) {
        if (!(this_present_offset && that_present_offset))
          return false;
        if (this.offset != that.offset)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getUserInfos_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetWebId()).compareTo(other.isSetWebId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetWebId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.webId, other.webId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTimeType()).compareTo(other.isSetTimeType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTimeType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timeType, other.timeType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTime()).compareTo(other.isSetTime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTime()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.time, other.time);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUserFilter()).compareTo(other.isSetUserFilter());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserFilter()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userFilter, other.userFilter);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStartIndex()).compareTo(other.isSetStartIndex());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStartIndex()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startIndex, other.startIndex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOffset()).compareTo(other.isSetOffset());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOffset()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.offset, other.offset);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getUserInfos_args(");
      boolean first = true;

      sb.append("webId:");
      sb.append(this.webId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("timeType:");
      sb.append(this.timeType);
      first = false;
      if (!first) sb.append(", ");
      sb.append("time:");
      if (this.time == null) {
        sb.append("null");
      } else {
        sb.append(this.time);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userFilter:");
      if (this.userFilter == null) {
        sb.append("null");
      } else {
        sb.append(this.userFilter);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("startIndex:");
      sb.append(this.startIndex);
      first = false;
      if (!first) sb.append(", ");
      sb.append("offset:");
      sb.append(this.offset);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (userFilter != null) {
        userFilter.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getUserInfos_argsStandardSchemeFactory implements SchemeFactory {
      public getUserInfos_argsStandardScheme getScheme() {
        return new getUserInfos_argsStandardScheme();
      }
    }

    private static class getUserInfos_argsStandardScheme extends StandardScheme<getUserInfos_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getUserInfos_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // WEB_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.webId = iprot.readI32();
                struct.setWebIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TIME_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.timeType = iprot.readI32();
                struct.setTimeTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // TIME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.time = iprot.readString();
                struct.setTimeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // USER_FILTER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.userFilter = new UserFilter();
                struct.userFilter.read(iprot);
                struct.setUserFilterIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // START_INDEX
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.startIndex = iprot.readI32();
                struct.setStartIndexIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // OFFSET
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.offset = iprot.readI32();
                struct.setOffsetIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getUserInfos_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(WEB_ID_FIELD_DESC);
        oprot.writeI32(struct.webId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(TIME_TYPE_FIELD_DESC);
        oprot.writeI32(struct.timeType);
        oprot.writeFieldEnd();
        if (struct.time != null) {
          oprot.writeFieldBegin(TIME_FIELD_DESC);
          oprot.writeString(struct.time);
          oprot.writeFieldEnd();
        }
        if (struct.userFilter != null) {
          oprot.writeFieldBegin(USER_FILTER_FIELD_DESC);
          struct.userFilter.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(START_INDEX_FIELD_DESC);
        oprot.writeI32(struct.startIndex);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(OFFSET_FIELD_DESC);
        oprot.writeI32(struct.offset);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getUserInfos_argsTupleSchemeFactory implements SchemeFactory {
      public getUserInfos_argsTupleScheme getScheme() {
        return new getUserInfos_argsTupleScheme();
      }
    }

    private static class getUserInfos_argsTupleScheme extends TupleScheme<getUserInfos_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getUserInfos_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetWebId()) {
          optionals.set(0);
        }
        if (struct.isSetTimeType()) {
          optionals.set(1);
        }
        if (struct.isSetTime()) {
          optionals.set(2);
        }
        if (struct.isSetUserFilter()) {
          optionals.set(3);
        }
        if (struct.isSetStartIndex()) {
          optionals.set(4);
        }
        if (struct.isSetOffset()) {
          optionals.set(5);
        }
        oprot.writeBitSet(optionals, 6);
        if (struct.isSetWebId()) {
          oprot.writeI32(struct.webId);
        }
        if (struct.isSetTimeType()) {
          oprot.writeI32(struct.timeType);
        }
        if (struct.isSetTime()) {
          oprot.writeString(struct.time);
        }
        if (struct.isSetUserFilter()) {
          struct.userFilter.write(oprot);
        }
        if (struct.isSetStartIndex()) {
          oprot.writeI32(struct.startIndex);
        }
        if (struct.isSetOffset()) {
          oprot.writeI32(struct.offset);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getUserInfos_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(6);
        if (incoming.get(0)) {
          struct.webId = iprot.readI32();
          struct.setWebIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.timeType = iprot.readI32();
          struct.setTimeTypeIsSet(true);
        }
        if (incoming.get(2)) {
          struct.time = iprot.readString();
          struct.setTimeIsSet(true);
        }
        if (incoming.get(3)) {
          struct.userFilter = new UserFilter();
          struct.userFilter.read(iprot);
          struct.setUserFilterIsSet(true);
        }
        if (incoming.get(4)) {
          struct.startIndex = iprot.readI32();
          struct.setStartIndexIsSet(true);
        }
        if (incoming.get(5)) {
          struct.offset = iprot.readI32();
          struct.setOffsetIsSet(true);
        }
      }
    }

  }

  public static class getUserInfos_result implements org.apache.thrift.TBase<getUserInfos_result, getUserInfos_result._Fields>, java.io.Serializable, Cloneable, Comparable<getUserInfos_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getUserInfos_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getUserInfos_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getUserInfos_resultTupleSchemeFactory());
    }

    public UserInfoResult success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, UserInfoResult.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getUserInfos_result.class, metaDataMap);
    }

    public getUserInfos_result() {
    }

    public getUserInfos_result(
      UserInfoResult success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getUserInfos_result(getUserInfos_result other) {
      if (other.isSetSuccess()) {
        this.success = new UserInfoResult(other.success);
      }
    }

    public getUserInfos_result deepCopy() {
      return new getUserInfos_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public UserInfoResult getSuccess() {
      return this.success;
    }

    public getUserInfos_result setSuccess(UserInfoResult success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((UserInfoResult)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getUserInfos_result)
        return this.equals((getUserInfos_result)that);
      return false;
    }

    public boolean equals(getUserInfos_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getUserInfos_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getUserInfos_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getUserInfos_resultStandardSchemeFactory implements SchemeFactory {
      public getUserInfos_resultStandardScheme getScheme() {
        return new getUserInfos_resultStandardScheme();
      }
    }

    private static class getUserInfos_resultStandardScheme extends StandardScheme<getUserInfos_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getUserInfos_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new UserInfoResult();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getUserInfos_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getUserInfos_resultTupleSchemeFactory implements SchemeFactory {
      public getUserInfos_resultTupleScheme getScheme() {
        return new getUserInfos_resultTupleScheme();
      }
    }

    private static class getUserInfos_resultTupleScheme extends TupleScheme<getUserInfos_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getUserInfos_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getUserInfos_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new UserInfoResult();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getUserLog_args implements org.apache.thrift.TBase<getUserLog_args, getUserLog_args._Fields>, java.io.Serializable, Cloneable, Comparable<getUserLog_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getUserLog_args");

    private static final org.apache.thrift.protocol.TField WEB_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("webId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField TIME_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("timeType", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("time", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField USER_FILTER_FIELD_DESC = new org.apache.thrift.protocol.TField("userFilter", org.apache.thrift.protocol.TType.STRUCT, (short)4);
    private static final org.apache.thrift.protocol.TField LOG_FILTER_FIELD_DESC = new org.apache.thrift.protocol.TField("logFilter", org.apache.thrift.protocol.TType.STRUCT, (short)5);
    private static final org.apache.thrift.protocol.TField START_INDEX_FIELD_DESC = new org.apache.thrift.protocol.TField("startIndex", org.apache.thrift.protocol.TType.I32, (short)6);
    private static final org.apache.thrift.protocol.TField OFFSET_FIELD_DESC = new org.apache.thrift.protocol.TField("offset", org.apache.thrift.protocol.TType.I32, (short)7);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getUserLog_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getUserLog_argsTupleSchemeFactory());
    }

    public int webId; // required
    public int timeType; // required
    public String time; // required
    public UserFilter userFilter; // required
    public LogFilter logFilter; // required
    public int startIndex; // required
    public int offset; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      WEB_ID((short)1, "webId"),
      TIME_TYPE((short)2, "timeType"),
      TIME((short)3, "time"),
      USER_FILTER((short)4, "userFilter"),
      LOG_FILTER((short)5, "logFilter"),
      START_INDEX((short)6, "startIndex"),
      OFFSET((short)7, "offset");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // WEB_ID
            return WEB_ID;
          case 2: // TIME_TYPE
            return TIME_TYPE;
          case 3: // TIME
            return TIME;
          case 4: // USER_FILTER
            return USER_FILTER;
          case 5: // LOG_FILTER
            return LOG_FILTER;
          case 6: // START_INDEX
            return START_INDEX;
          case 7: // OFFSET
            return OFFSET;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __WEBID_ISSET_ID = 0;
    private static final int __TIMETYPE_ISSET_ID = 1;
    private static final int __STARTINDEX_ISSET_ID = 2;
    private static final int __OFFSET_ISSET_ID = 3;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.WEB_ID, new org.apache.thrift.meta_data.FieldMetaData("webId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.TIME_TYPE, new org.apache.thrift.meta_data.FieldMetaData("timeType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.TIME, new org.apache.thrift.meta_data.FieldMetaData("time", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.USER_FILTER, new org.apache.thrift.meta_data.FieldMetaData("userFilter", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, UserFilter.class)));
      tmpMap.put(_Fields.LOG_FILTER, new org.apache.thrift.meta_data.FieldMetaData("logFilter", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, LogFilter.class)));
      tmpMap.put(_Fields.START_INDEX, new org.apache.thrift.meta_data.FieldMetaData("startIndex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.OFFSET, new org.apache.thrift.meta_data.FieldMetaData("offset", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getUserLog_args.class, metaDataMap);
    }

    public getUserLog_args() {
    }

    public getUserLog_args(
      int webId,
      int timeType,
      String time,
      UserFilter userFilter,
      LogFilter logFilter,
      int startIndex,
      int offset)
    {
      this();
      this.webId = webId;
      setWebIdIsSet(true);
      this.timeType = timeType;
      setTimeTypeIsSet(true);
      this.time = time;
      this.userFilter = userFilter;
      this.logFilter = logFilter;
      this.startIndex = startIndex;
      setStartIndexIsSet(true);
      this.offset = offset;
      setOffsetIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getUserLog_args(getUserLog_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.webId = other.webId;
      this.timeType = other.timeType;
      if (other.isSetTime()) {
        this.time = other.time;
      }
      if (other.isSetUserFilter()) {
        this.userFilter = new UserFilter(other.userFilter);
      }
      if (other.isSetLogFilter()) {
        this.logFilter = new LogFilter(other.logFilter);
      }
      this.startIndex = other.startIndex;
      this.offset = other.offset;
    }

    public getUserLog_args deepCopy() {
      return new getUserLog_args(this);
    }

    @Override
    public void clear() {
      setWebIdIsSet(false);
      this.webId = 0;
      setTimeTypeIsSet(false);
      this.timeType = 0;
      this.time = null;
      this.userFilter = null;
      this.logFilter = null;
      setStartIndexIsSet(false);
      this.startIndex = 0;
      setOffsetIsSet(false);
      this.offset = 0;
    }

    public int getWebId() {
      return this.webId;
    }

    public getUserLog_args setWebId(int webId) {
      this.webId = webId;
      setWebIdIsSet(true);
      return this;
    }

    public void unsetWebId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __WEBID_ISSET_ID);
    }

    /** Returns true if field webId is set (has been assigned a value) and false otherwise */
    public boolean isSetWebId() {
      return EncodingUtils.testBit(__isset_bitfield, __WEBID_ISSET_ID);
    }

    public void setWebIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __WEBID_ISSET_ID, value);
    }

    public int getTimeType() {
      return this.timeType;
    }

    public getUserLog_args setTimeType(int timeType) {
      this.timeType = timeType;
      setTimeTypeIsSet(true);
      return this;
    }

    public void unsetTimeType() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TIMETYPE_ISSET_ID);
    }

    /** Returns true if field timeType is set (has been assigned a value) and false otherwise */
    public boolean isSetTimeType() {
      return EncodingUtils.testBit(__isset_bitfield, __TIMETYPE_ISSET_ID);
    }

    public void setTimeTypeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TIMETYPE_ISSET_ID, value);
    }

    public String getTime() {
      return this.time;
    }

    public getUserLog_args setTime(String time) {
      this.time = time;
      return this;
    }

    public void unsetTime() {
      this.time = null;
    }

    /** Returns true if field time is set (has been assigned a value) and false otherwise */
    public boolean isSetTime() {
      return this.time != null;
    }

    public void setTimeIsSet(boolean value) {
      if (!value) {
        this.time = null;
      }
    }

    public UserFilter getUserFilter() {
      return this.userFilter;
    }

    public getUserLog_args setUserFilter(UserFilter userFilter) {
      this.userFilter = userFilter;
      return this;
    }

    public void unsetUserFilter() {
      this.userFilter = null;
    }

    /** Returns true if field userFilter is set (has been assigned a value) and false otherwise */
    public boolean isSetUserFilter() {
      return this.userFilter != null;
    }

    public void setUserFilterIsSet(boolean value) {
      if (!value) {
        this.userFilter = null;
      }
    }

    public LogFilter getLogFilter() {
      return this.logFilter;
    }

    public getUserLog_args setLogFilter(LogFilter logFilter) {
      this.logFilter = logFilter;
      return this;
    }

    public void unsetLogFilter() {
      this.logFilter = null;
    }

    /** Returns true if field logFilter is set (has been assigned a value) and false otherwise */
    public boolean isSetLogFilter() {
      return this.logFilter != null;
    }

    public void setLogFilterIsSet(boolean value) {
      if (!value) {
        this.logFilter = null;
      }
    }

    public int getStartIndex() {
      return this.startIndex;
    }

    public getUserLog_args setStartIndex(int startIndex) {
      this.startIndex = startIndex;
      setStartIndexIsSet(true);
      return this;
    }

    public void unsetStartIndex() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STARTINDEX_ISSET_ID);
    }

    /** Returns true if field startIndex is set (has been assigned a value) and false otherwise */
    public boolean isSetStartIndex() {
      return EncodingUtils.testBit(__isset_bitfield, __STARTINDEX_ISSET_ID);
    }

    public void setStartIndexIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STARTINDEX_ISSET_ID, value);
    }

    public int getOffset() {
      return this.offset;
    }

    public getUserLog_args setOffset(int offset) {
      this.offset = offset;
      setOffsetIsSet(true);
      return this;
    }

    public void unsetOffset() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OFFSET_ISSET_ID);
    }

    /** Returns true if field offset is set (has been assigned a value) and false otherwise */
    public boolean isSetOffset() {
      return EncodingUtils.testBit(__isset_bitfield, __OFFSET_ISSET_ID);
    }

    public void setOffsetIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OFFSET_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case WEB_ID:
        if (value == null) {
          unsetWebId();
        } else {
          setWebId((Integer)value);
        }
        break;

      case TIME_TYPE:
        if (value == null) {
          unsetTimeType();
        } else {
          setTimeType((Integer)value);
        }
        break;

      case TIME:
        if (value == null) {
          unsetTime();
        } else {
          setTime((String)value);
        }
        break;

      case USER_FILTER:
        if (value == null) {
          unsetUserFilter();
        } else {
          setUserFilter((UserFilter)value);
        }
        break;

      case LOG_FILTER:
        if (value == null) {
          unsetLogFilter();
        } else {
          setLogFilter((LogFilter)value);
        }
        break;

      case START_INDEX:
        if (value == null) {
          unsetStartIndex();
        } else {
          setStartIndex((Integer)value);
        }
        break;

      case OFFSET:
        if (value == null) {
          unsetOffset();
        } else {
          setOffset((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case WEB_ID:
        return Integer.valueOf(getWebId());

      case TIME_TYPE:
        return Integer.valueOf(getTimeType());

      case TIME:
        return getTime();

      case USER_FILTER:
        return getUserFilter();

      case LOG_FILTER:
        return getLogFilter();

      case START_INDEX:
        return Integer.valueOf(getStartIndex());

      case OFFSET:
        return Integer.valueOf(getOffset());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case WEB_ID:
        return isSetWebId();
      case TIME_TYPE:
        return isSetTimeType();
      case TIME:
        return isSetTime();
      case USER_FILTER:
        return isSetUserFilter();
      case LOG_FILTER:
        return isSetLogFilter();
      case START_INDEX:
        return isSetStartIndex();
      case OFFSET:
        return isSetOffset();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getUserLog_args)
        return this.equals((getUserLog_args)that);
      return false;
    }

    public boolean equals(getUserLog_args that) {
      if (that == null)
        return false;

      boolean this_present_webId = true;
      boolean that_present_webId = true;
      if (this_present_webId || that_present_webId) {
        if (!(this_present_webId && that_present_webId))
          return false;
        if (this.webId != that.webId)
          return false;
      }

      boolean this_present_timeType = true;
      boolean that_present_timeType = true;
      if (this_present_timeType || that_present_timeType) {
        if (!(this_present_timeType && that_present_timeType))
          return false;
        if (this.timeType != that.timeType)
          return false;
      }

      boolean this_present_time = true && this.isSetTime();
      boolean that_present_time = true && that.isSetTime();
      if (this_present_time || that_present_time) {
        if (!(this_present_time && that_present_time))
          return false;
        if (!this.time.equals(that.time))
          return false;
      }

      boolean this_present_userFilter = true && this.isSetUserFilter();
      boolean that_present_userFilter = true && that.isSetUserFilter();
      if (this_present_userFilter || that_present_userFilter) {
        if (!(this_present_userFilter && that_present_userFilter))
          return false;
        if (!this.userFilter.equals(that.userFilter))
          return false;
      }

      boolean this_present_logFilter = true && this.isSetLogFilter();
      boolean that_present_logFilter = true && that.isSetLogFilter();
      if (this_present_logFilter || that_present_logFilter) {
        if (!(this_present_logFilter && that_present_logFilter))
          return false;
        if (!this.logFilter.equals(that.logFilter))
          return false;
      }

      boolean this_present_startIndex = true;
      boolean that_present_startIndex = true;
      if (this_present_startIndex || that_present_startIndex) {
        if (!(this_present_startIndex && that_present_startIndex))
          return false;
        if (this.startIndex != that.startIndex)
          return false;
      }

      boolean this_present_offset = true;
      boolean that_present_offset = true;
      if (this_present_offset || that_present_offset) {
        if (!(this_present_offset && that_present_offset))
          return false;
        if (this.offset != that.offset)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getUserLog_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetWebId()).compareTo(other.isSetWebId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetWebId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.webId, other.webId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTimeType()).compareTo(other.isSetTimeType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTimeType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timeType, other.timeType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTime()).compareTo(other.isSetTime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTime()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.time, other.time);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUserFilter()).compareTo(other.isSetUserFilter());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserFilter()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userFilter, other.userFilter);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetLogFilter()).compareTo(other.isSetLogFilter());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLogFilter()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.logFilter, other.logFilter);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStartIndex()).compareTo(other.isSetStartIndex());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStartIndex()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startIndex, other.startIndex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOffset()).compareTo(other.isSetOffset());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOffset()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.offset, other.offset);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getUserLog_args(");
      boolean first = true;

      sb.append("webId:");
      sb.append(this.webId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("timeType:");
      sb.append(this.timeType);
      first = false;
      if (!first) sb.append(", ");
      sb.append("time:");
      if (this.time == null) {
        sb.append("null");
      } else {
        sb.append(this.time);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userFilter:");
      if (this.userFilter == null) {
        sb.append("null");
      } else {
        sb.append(this.userFilter);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("logFilter:");
      if (this.logFilter == null) {
        sb.append("null");
      } else {
        sb.append(this.logFilter);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("startIndex:");
      sb.append(this.startIndex);
      first = false;
      if (!first) sb.append(", ");
      sb.append("offset:");
      sb.append(this.offset);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (userFilter != null) {
        userFilter.validate();
      }
      if (logFilter != null) {
        logFilter.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getUserLog_argsStandardSchemeFactory implements SchemeFactory {
      public getUserLog_argsStandardScheme getScheme() {
        return new getUserLog_argsStandardScheme();
      }
    }

    private static class getUserLog_argsStandardScheme extends StandardScheme<getUserLog_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getUserLog_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // WEB_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.webId = iprot.readI32();
                struct.setWebIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TIME_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.timeType = iprot.readI32();
                struct.setTimeTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // TIME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.time = iprot.readString();
                struct.setTimeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // USER_FILTER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.userFilter = new UserFilter();
                struct.userFilter.read(iprot);
                struct.setUserFilterIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // LOG_FILTER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.logFilter = new LogFilter();
                struct.logFilter.read(iprot);
                struct.setLogFilterIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // START_INDEX
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.startIndex = iprot.readI32();
                struct.setStartIndexIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 7: // OFFSET
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.offset = iprot.readI32();
                struct.setOffsetIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getUserLog_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(WEB_ID_FIELD_DESC);
        oprot.writeI32(struct.webId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(TIME_TYPE_FIELD_DESC);
        oprot.writeI32(struct.timeType);
        oprot.writeFieldEnd();
        if (struct.time != null) {
          oprot.writeFieldBegin(TIME_FIELD_DESC);
          oprot.writeString(struct.time);
          oprot.writeFieldEnd();
        }
        if (struct.userFilter != null) {
          oprot.writeFieldBegin(USER_FILTER_FIELD_DESC);
          struct.userFilter.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.logFilter != null) {
          oprot.writeFieldBegin(LOG_FILTER_FIELD_DESC);
          struct.logFilter.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(START_INDEX_FIELD_DESC);
        oprot.writeI32(struct.startIndex);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(OFFSET_FIELD_DESC);
        oprot.writeI32(struct.offset);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getUserLog_argsTupleSchemeFactory implements SchemeFactory {
      public getUserLog_argsTupleScheme getScheme() {
        return new getUserLog_argsTupleScheme();
      }
    }

    private static class getUserLog_argsTupleScheme extends TupleScheme<getUserLog_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getUserLog_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetWebId()) {
          optionals.set(0);
        }
        if (struct.isSetTimeType()) {
          optionals.set(1);
        }
        if (struct.isSetTime()) {
          optionals.set(2);
        }
        if (struct.isSetUserFilter()) {
          optionals.set(3);
        }
        if (struct.isSetLogFilter()) {
          optionals.set(4);
        }
        if (struct.isSetStartIndex()) {
          optionals.set(5);
        }
        if (struct.isSetOffset()) {
          optionals.set(6);
        }
        oprot.writeBitSet(optionals, 7);
        if (struct.isSetWebId()) {
          oprot.writeI32(struct.webId);
        }
        if (struct.isSetTimeType()) {
          oprot.writeI32(struct.timeType);
        }
        if (struct.isSetTime()) {
          oprot.writeString(struct.time);
        }
        if (struct.isSetUserFilter()) {
          struct.userFilter.write(oprot);
        }
        if (struct.isSetLogFilter()) {
          struct.logFilter.write(oprot);
        }
        if (struct.isSetStartIndex()) {
          oprot.writeI32(struct.startIndex);
        }
        if (struct.isSetOffset()) {
          oprot.writeI32(struct.offset);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getUserLog_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(7);
        if (incoming.get(0)) {
          struct.webId = iprot.readI32();
          struct.setWebIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.timeType = iprot.readI32();
          struct.setTimeTypeIsSet(true);
        }
        if (incoming.get(2)) {
          struct.time = iprot.readString();
          struct.setTimeIsSet(true);
        }
        if (incoming.get(3)) {
          struct.userFilter = new UserFilter();
          struct.userFilter.read(iprot);
          struct.setUserFilterIsSet(true);
        }
        if (incoming.get(4)) {
          struct.logFilter = new LogFilter();
          struct.logFilter.read(iprot);
          struct.setLogFilterIsSet(true);
        }
        if (incoming.get(5)) {
          struct.startIndex = iprot.readI32();
          struct.setStartIndexIsSet(true);
        }
        if (incoming.get(6)) {
          struct.offset = iprot.readI32();
          struct.setOffsetIsSet(true);
        }
      }
    }

  }

  public static class getUserLog_result implements org.apache.thrift.TBase<getUserLog_result, getUserLog_result._Fields>, java.io.Serializable, Cloneable, Comparable<getUserLog_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getUserLog_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getUserLog_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getUserLog_resultTupleSchemeFactory());
    }

    public UserLogResult success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, UserLogResult.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getUserLog_result.class, metaDataMap);
    }

    public getUserLog_result() {
    }

    public getUserLog_result(
      UserLogResult success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getUserLog_result(getUserLog_result other) {
      if (other.isSetSuccess()) {
        this.success = new UserLogResult(other.success);
      }
    }

    public getUserLog_result deepCopy() {
      return new getUserLog_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public UserLogResult getSuccess() {
      return this.success;
    }

    public getUserLog_result setSuccess(UserLogResult success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((UserLogResult)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getUserLog_result)
        return this.equals((getUserLog_result)that);
      return false;
    }

    public boolean equals(getUserLog_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getUserLog_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getUserLog_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getUserLog_resultStandardSchemeFactory implements SchemeFactory {
      public getUserLog_resultStandardScheme getScheme() {
        return new getUserLog_resultStandardScheme();
      }
    }

    private static class getUserLog_resultStandardScheme extends StandardScheme<getUserLog_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getUserLog_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new UserLogResult();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getUserLog_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getUserLog_resultTupleSchemeFactory implements SchemeFactory {
      public getUserLog_resultTupleScheme getScheme() {
        return new getUserLog_resultTupleScheme();
      }
    }

    private static class getUserLog_resultTupleScheme extends TupleScheme<getUserLog_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getUserLog_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getUserLog_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new UserLogResult();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getWebStatsForDate_args implements org.apache.thrift.TBase<getWebStatsForDate_args, getWebStatsForDate_args._Fields>, java.io.Serializable, Cloneable, Comparable<getWebStatsForDate_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getWebStatsForDate_args");

    private static final org.apache.thrift.protocol.TField WEB_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("webId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField TIME_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("timeType", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField TIMES_FIELD_DESC = new org.apache.thrift.protocol.TField("times", org.apache.thrift.protocol.TType.LIST, (short)3);
    private static final org.apache.thrift.protocol.TField USER_FILTER_FIELD_DESC = new org.apache.thrift.protocol.TField("userFilter", org.apache.thrift.protocol.TType.STRUCT, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getWebStatsForDate_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getWebStatsForDate_argsTupleSchemeFactory());
    }

    public int webId; // required
    public int timeType; // required
    public List<String> times; // required
    public UserFilter userFilter; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      WEB_ID((short)1, "webId"),
      TIME_TYPE((short)2, "timeType"),
      TIMES((short)3, "times"),
      USER_FILTER((short)4, "userFilter");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // WEB_ID
            return WEB_ID;
          case 2: // TIME_TYPE
            return TIME_TYPE;
          case 3: // TIMES
            return TIMES;
          case 4: // USER_FILTER
            return USER_FILTER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __WEBID_ISSET_ID = 0;
    private static final int __TIMETYPE_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.WEB_ID, new org.apache.thrift.meta_data.FieldMetaData("webId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.TIME_TYPE, new org.apache.thrift.meta_data.FieldMetaData("timeType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.TIMES, new org.apache.thrift.meta_data.FieldMetaData("times", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.USER_FILTER, new org.apache.thrift.meta_data.FieldMetaData("userFilter", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, UserFilter.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getWebStatsForDate_args.class, metaDataMap);
    }

    public getWebStatsForDate_args() {
    }

    public getWebStatsForDate_args(
      int webId,
      int timeType,
      List<String> times,
      UserFilter userFilter)
    {
      this();
      this.webId = webId;
      setWebIdIsSet(true);
      this.timeType = timeType;
      setTimeTypeIsSet(true);
      this.times = times;
      this.userFilter = userFilter;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getWebStatsForDate_args(getWebStatsForDate_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.webId = other.webId;
      this.timeType = other.timeType;
      if (other.isSetTimes()) {
        List<String> __this__times = new ArrayList<String>(other.times);
        this.times = __this__times;
      }
      if (other.isSetUserFilter()) {
        this.userFilter = new UserFilter(other.userFilter);
      }
    }

    public getWebStatsForDate_args deepCopy() {
      return new getWebStatsForDate_args(this);
    }

    @Override
    public void clear() {
      setWebIdIsSet(false);
      this.webId = 0;
      setTimeTypeIsSet(false);
      this.timeType = 0;
      this.times = null;
      this.userFilter = null;
    }

    public int getWebId() {
      return this.webId;
    }

    public getWebStatsForDate_args setWebId(int webId) {
      this.webId = webId;
      setWebIdIsSet(true);
      return this;
    }

    public void unsetWebId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __WEBID_ISSET_ID);
    }

    /** Returns true if field webId is set (has been assigned a value) and false otherwise */
    public boolean isSetWebId() {
      return EncodingUtils.testBit(__isset_bitfield, __WEBID_ISSET_ID);
    }

    public void setWebIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __WEBID_ISSET_ID, value);
    }

    public int getTimeType() {
      return this.timeType;
    }

    public getWebStatsForDate_args setTimeType(int timeType) {
      this.timeType = timeType;
      setTimeTypeIsSet(true);
      return this;
    }

    public void unsetTimeType() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TIMETYPE_ISSET_ID);
    }

    /** Returns true if field timeType is set (has been assigned a value) and false otherwise */
    public boolean isSetTimeType() {
      return EncodingUtils.testBit(__isset_bitfield, __TIMETYPE_ISSET_ID);
    }

    public void setTimeTypeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TIMETYPE_ISSET_ID, value);
    }

    public int getTimesSize() {
      return (this.times == null) ? 0 : this.times.size();
    }

    public java.util.Iterator<String> getTimesIterator() {
      return (this.times == null) ? null : this.times.iterator();
    }

    public void addToTimes(String elem) {
      if (this.times == null) {
        this.times = new ArrayList<String>();
      }
      this.times.add(elem);
    }

    public List<String> getTimes() {
      return this.times;
    }

    public getWebStatsForDate_args setTimes(List<String> times) {
      this.times = times;
      return this;
    }

    public void unsetTimes() {
      this.times = null;
    }

    /** Returns true if field times is set (has been assigned a value) and false otherwise */
    public boolean isSetTimes() {
      return this.times != null;
    }

    public void setTimesIsSet(boolean value) {
      if (!value) {
        this.times = null;
      }
    }

    public UserFilter getUserFilter() {
      return this.userFilter;
    }

    public getWebStatsForDate_args setUserFilter(UserFilter userFilter) {
      this.userFilter = userFilter;
      return this;
    }

    public void unsetUserFilter() {
      this.userFilter = null;
    }

    /** Returns true if field userFilter is set (has been assigned a value) and false otherwise */
    public boolean isSetUserFilter() {
      return this.userFilter != null;
    }

    public void setUserFilterIsSet(boolean value) {
      if (!value) {
        this.userFilter = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case WEB_ID:
        if (value == null) {
          unsetWebId();
        } else {
          setWebId((Integer)value);
        }
        break;

      case TIME_TYPE:
        if (value == null) {
          unsetTimeType();
        } else {
          setTimeType((Integer)value);
        }
        break;

      case TIMES:
        if (value == null) {
          unsetTimes();
        } else {
          setTimes((List<String>)value);
        }
        break;

      case USER_FILTER:
        if (value == null) {
          unsetUserFilter();
        } else {
          setUserFilter((UserFilter)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case WEB_ID:
        return Integer.valueOf(getWebId());

      case TIME_TYPE:
        return Integer.valueOf(getTimeType());

      case TIMES:
        return getTimes();

      case USER_FILTER:
        return getUserFilter();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case WEB_ID:
        return isSetWebId();
      case TIME_TYPE:
        return isSetTimeType();
      case TIMES:
        return isSetTimes();
      case USER_FILTER:
        return isSetUserFilter();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getWebStatsForDate_args)
        return this.equals((getWebStatsForDate_args)that);
      return false;
    }

    public boolean equals(getWebStatsForDate_args that) {
      if (that == null)
        return false;

      boolean this_present_webId = true;
      boolean that_present_webId = true;
      if (this_present_webId || that_present_webId) {
        if (!(this_present_webId && that_present_webId))
          return false;
        if (this.webId != that.webId)
          return false;
      }

      boolean this_present_timeType = true;
      boolean that_present_timeType = true;
      if (this_present_timeType || that_present_timeType) {
        if (!(this_present_timeType && that_present_timeType))
          return false;
        if (this.timeType != that.timeType)
          return false;
      }

      boolean this_present_times = true && this.isSetTimes();
      boolean that_present_times = true && that.isSetTimes();
      if (this_present_times || that_present_times) {
        if (!(this_present_times && that_present_times))
          return false;
        if (!this.times.equals(that.times))
          return false;
      }

      boolean this_present_userFilter = true && this.isSetUserFilter();
      boolean that_present_userFilter = true && that.isSetUserFilter();
      if (this_present_userFilter || that_present_userFilter) {
        if (!(this_present_userFilter && that_present_userFilter))
          return false;
        if (!this.userFilter.equals(that.userFilter))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getWebStatsForDate_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetWebId()).compareTo(other.isSetWebId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetWebId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.webId, other.webId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTimeType()).compareTo(other.isSetTimeType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTimeType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timeType, other.timeType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTimes()).compareTo(other.isSetTimes());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTimes()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.times, other.times);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUserFilter()).compareTo(other.isSetUserFilter());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserFilter()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userFilter, other.userFilter);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getWebStatsForDate_args(");
      boolean first = true;

      sb.append("webId:");
      sb.append(this.webId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("timeType:");
      sb.append(this.timeType);
      first = false;
      if (!first) sb.append(", ");
      sb.append("times:");
      if (this.times == null) {
        sb.append("null");
      } else {
        sb.append(this.times);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userFilter:");
      if (this.userFilter == null) {
        sb.append("null");
      } else {
        sb.append(this.userFilter);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (userFilter != null) {
        userFilter.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getWebStatsForDate_argsStandardSchemeFactory implements SchemeFactory {
      public getWebStatsForDate_argsStandardScheme getScheme() {
        return new getWebStatsForDate_argsStandardScheme();
      }
    }

    private static class getWebStatsForDate_argsStandardScheme extends StandardScheme<getWebStatsForDate_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getWebStatsForDate_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // WEB_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.webId = iprot.readI32();
                struct.setWebIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TIME_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.timeType = iprot.readI32();
                struct.setTimeTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // TIMES
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list26 = iprot.readListBegin();
                  struct.times = new ArrayList<String>(_list26.size);
                  for (int _i27 = 0; _i27 < _list26.size; ++_i27)
                  {
                    String _elem28;
                    _elem28 = iprot.readString();
                    struct.times.add(_elem28);
                  }
                  iprot.readListEnd();
                }
                struct.setTimesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // USER_FILTER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.userFilter = new UserFilter();
                struct.userFilter.read(iprot);
                struct.setUserFilterIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getWebStatsForDate_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(WEB_ID_FIELD_DESC);
        oprot.writeI32(struct.webId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(TIME_TYPE_FIELD_DESC);
        oprot.writeI32(struct.timeType);
        oprot.writeFieldEnd();
        if (struct.times != null) {
          oprot.writeFieldBegin(TIMES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.times.size()));
            for (String _iter29 : struct.times)
            {
              oprot.writeString(_iter29);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.userFilter != null) {
          oprot.writeFieldBegin(USER_FILTER_FIELD_DESC);
          struct.userFilter.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getWebStatsForDate_argsTupleSchemeFactory implements SchemeFactory {
      public getWebStatsForDate_argsTupleScheme getScheme() {
        return new getWebStatsForDate_argsTupleScheme();
      }
    }

    private static class getWebStatsForDate_argsTupleScheme extends TupleScheme<getWebStatsForDate_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getWebStatsForDate_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetWebId()) {
          optionals.set(0);
        }
        if (struct.isSetTimeType()) {
          optionals.set(1);
        }
        if (struct.isSetTimes()) {
          optionals.set(2);
        }
        if (struct.isSetUserFilter()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetWebId()) {
          oprot.writeI32(struct.webId);
        }
        if (struct.isSetTimeType()) {
          oprot.writeI32(struct.timeType);
        }
        if (struct.isSetTimes()) {
          {
            oprot.writeI32(struct.times.size());
            for (String _iter30 : struct.times)
            {
              oprot.writeString(_iter30);
            }
          }
        }
        if (struct.isSetUserFilter()) {
          struct.userFilter.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getWebStatsForDate_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.webId = iprot.readI32();
          struct.setWebIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.timeType = iprot.readI32();
          struct.setTimeTypeIsSet(true);
        }
        if (incoming.get(2)) {
          {
            org.apache.thrift.protocol.TList _list31 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.times = new ArrayList<String>(_list31.size);
            for (int _i32 = 0; _i32 < _list31.size; ++_i32)
            {
              String _elem33;
              _elem33 = iprot.readString();
              struct.times.add(_elem33);
            }
          }
          struct.setTimesIsSet(true);
        }
        if (incoming.get(3)) {
          struct.userFilter = new UserFilter();
          struct.userFilter.read(iprot);
          struct.setUserFilterIsSet(true);
        }
      }
    }

  }

  public static class getWebStatsForDate_result implements org.apache.thrift.TBase<getWebStatsForDate_result, getWebStatsForDate_result._Fields>, java.io.Serializable, Cloneable, Comparable<getWebStatsForDate_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getWebStatsForDate_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getWebStatsForDate_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getWebStatsForDate_resultTupleSchemeFactory());
    }

    public List<WebStats> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, WebStats.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getWebStatsForDate_result.class, metaDataMap);
    }

    public getWebStatsForDate_result() {
    }

    public getWebStatsForDate_result(
      List<WebStats> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getWebStatsForDate_result(getWebStatsForDate_result other) {
      if (other.isSetSuccess()) {
        List<WebStats> __this__success = new ArrayList<WebStats>(other.success.size());
        for (WebStats other_element : other.success) {
          __this__success.add(new WebStats(other_element));
        }
        this.success = __this__success;
      }
    }

    public getWebStatsForDate_result deepCopy() {
      return new getWebStatsForDate_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<WebStats> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(WebStats elem) {
      if (this.success == null) {
        this.success = new ArrayList<WebStats>();
      }
      this.success.add(elem);
    }

    public List<WebStats> getSuccess() {
      return this.success;
    }

    public getWebStatsForDate_result setSuccess(List<WebStats> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<WebStats>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getWebStatsForDate_result)
        return this.equals((getWebStatsForDate_result)that);
      return false;
    }

    public boolean equals(getWebStatsForDate_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getWebStatsForDate_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getWebStatsForDate_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getWebStatsForDate_resultStandardSchemeFactory implements SchemeFactory {
      public getWebStatsForDate_resultStandardScheme getScheme() {
        return new getWebStatsForDate_resultStandardScheme();
      }
    }

    private static class getWebStatsForDate_resultStandardScheme extends StandardScheme<getWebStatsForDate_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getWebStatsForDate_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list34 = iprot.readListBegin();
                  struct.success = new ArrayList<WebStats>(_list34.size);
                  for (int _i35 = 0; _i35 < _list34.size; ++_i35)
                  {
                    WebStats _elem36;
                    _elem36 = new WebStats();
                    _elem36.read(iprot);
                    struct.success.add(_elem36);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getWebStatsForDate_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (WebStats _iter37 : struct.success)
            {
              _iter37.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getWebStatsForDate_resultTupleSchemeFactory implements SchemeFactory {
      public getWebStatsForDate_resultTupleScheme getScheme() {
        return new getWebStatsForDate_resultTupleScheme();
      }
    }

    private static class getWebStatsForDate_resultTupleScheme extends TupleScheme<getWebStatsForDate_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getWebStatsForDate_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (WebStats _iter38 : struct.success)
            {
              _iter38.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getWebStatsForDate_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list39 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<WebStats>(_list39.size);
            for (int _i40 = 0; _i40 < _list39.size; ++_i40)
            {
              WebStats _elem41;
              _elem41 = new WebStats();
              _elem41.read(iprot);
              struct.success.add(_elem41);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getWebStatsForReferrer_args implements org.apache.thrift.TBase<getWebStatsForReferrer_args, getWebStatsForReferrer_args._Fields>, java.io.Serializable, Cloneable, Comparable<getWebStatsForReferrer_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getWebStatsForReferrer_args");

    private static final org.apache.thrift.protocol.TField WEB_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("webId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField TIME_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("timeType", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("time", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField REF_FILTER_FIELD_DESC = new org.apache.thrift.protocol.TField("refFilter", org.apache.thrift.protocol.TType.STRUCT, (short)4);
    private static final org.apache.thrift.protocol.TField USER_FILTER_FIELD_DESC = new org.apache.thrift.protocol.TField("userFilter", org.apache.thrift.protocol.TType.STRUCT, (short)5);
    private static final org.apache.thrift.protocol.TField START_INDEX_FIELD_DESC = new org.apache.thrift.protocol.TField("startIndex", org.apache.thrift.protocol.TType.I32, (short)6);
    private static final org.apache.thrift.protocol.TField OFFSET_FIELD_DESC = new org.apache.thrift.protocol.TField("offset", org.apache.thrift.protocol.TType.I32, (short)7);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getWebStatsForReferrer_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getWebStatsForReferrer_argsTupleSchemeFactory());
    }

    public int webId; // required
    public int timeType; // required
    public String time; // required
    public ReferrerFilter refFilter; // required
    public UserFilter userFilter; // required
    public int startIndex; // required
    public int offset; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      WEB_ID((short)1, "webId"),
      TIME_TYPE((short)2, "timeType"),
      TIME((short)3, "time"),
      REF_FILTER((short)4, "refFilter"),
      USER_FILTER((short)5, "userFilter"),
      START_INDEX((short)6, "startIndex"),
      OFFSET((short)7, "offset");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // WEB_ID
            return WEB_ID;
          case 2: // TIME_TYPE
            return TIME_TYPE;
          case 3: // TIME
            return TIME;
          case 4: // REF_FILTER
            return REF_FILTER;
          case 5: // USER_FILTER
            return USER_FILTER;
          case 6: // START_INDEX
            return START_INDEX;
          case 7: // OFFSET
            return OFFSET;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __WEBID_ISSET_ID = 0;
    private static final int __TIMETYPE_ISSET_ID = 1;
    private static final int __STARTINDEX_ISSET_ID = 2;
    private static final int __OFFSET_ISSET_ID = 3;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.WEB_ID, new org.apache.thrift.meta_data.FieldMetaData("webId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.TIME_TYPE, new org.apache.thrift.meta_data.FieldMetaData("timeType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.TIME, new org.apache.thrift.meta_data.FieldMetaData("time", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.REF_FILTER, new org.apache.thrift.meta_data.FieldMetaData("refFilter", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ReferrerFilter.class)));
      tmpMap.put(_Fields.USER_FILTER, new org.apache.thrift.meta_data.FieldMetaData("userFilter", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, UserFilter.class)));
      tmpMap.put(_Fields.START_INDEX, new org.apache.thrift.meta_data.FieldMetaData("startIndex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.OFFSET, new org.apache.thrift.meta_data.FieldMetaData("offset", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getWebStatsForReferrer_args.class, metaDataMap);
    }

    public getWebStatsForReferrer_args() {
    }

    public getWebStatsForReferrer_args(
      int webId,
      int timeType,
      String time,
      ReferrerFilter refFilter,
      UserFilter userFilter,
      int startIndex,
      int offset)
    {
      this();
      this.webId = webId;
      setWebIdIsSet(true);
      this.timeType = timeType;
      setTimeTypeIsSet(true);
      this.time = time;
      this.refFilter = refFilter;
      this.userFilter = userFilter;
      this.startIndex = startIndex;
      setStartIndexIsSet(true);
      this.offset = offset;
      setOffsetIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getWebStatsForReferrer_args(getWebStatsForReferrer_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.webId = other.webId;
      this.timeType = other.timeType;
      if (other.isSetTime()) {
        this.time = other.time;
      }
      if (other.isSetRefFilter()) {
        this.refFilter = new ReferrerFilter(other.refFilter);
      }
      if (other.isSetUserFilter()) {
        this.userFilter = new UserFilter(other.userFilter);
      }
      this.startIndex = other.startIndex;
      this.offset = other.offset;
    }

    public getWebStatsForReferrer_args deepCopy() {
      return new getWebStatsForReferrer_args(this);
    }

    @Override
    public void clear() {
      setWebIdIsSet(false);
      this.webId = 0;
      setTimeTypeIsSet(false);
      this.timeType = 0;
      this.time = null;
      this.refFilter = null;
      this.userFilter = null;
      setStartIndexIsSet(false);
      this.startIndex = 0;
      setOffsetIsSet(false);
      this.offset = 0;
    }

    public int getWebId() {
      return this.webId;
    }

    public getWebStatsForReferrer_args setWebId(int webId) {
      this.webId = webId;
      setWebIdIsSet(true);
      return this;
    }

    public void unsetWebId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __WEBID_ISSET_ID);
    }

    /** Returns true if field webId is set (has been assigned a value) and false otherwise */
    public boolean isSetWebId() {
      return EncodingUtils.testBit(__isset_bitfield, __WEBID_ISSET_ID);
    }

    public void setWebIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __WEBID_ISSET_ID, value);
    }

    public int getTimeType() {
      return this.timeType;
    }

    public getWebStatsForReferrer_args setTimeType(int timeType) {
      this.timeType = timeType;
      setTimeTypeIsSet(true);
      return this;
    }

    public void unsetTimeType() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TIMETYPE_ISSET_ID);
    }

    /** Returns true if field timeType is set (has been assigned a value) and false otherwise */
    public boolean isSetTimeType() {
      return EncodingUtils.testBit(__isset_bitfield, __TIMETYPE_ISSET_ID);
    }

    public void setTimeTypeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TIMETYPE_ISSET_ID, value);
    }

    public String getTime() {
      return this.time;
    }

    public getWebStatsForReferrer_args setTime(String time) {
      this.time = time;
      return this;
    }

    public void unsetTime() {
      this.time = null;
    }

    /** Returns true if field time is set (has been assigned a value) and false otherwise */
    public boolean isSetTime() {
      return this.time != null;
    }

    public void setTimeIsSet(boolean value) {
      if (!value) {
        this.time = null;
      }
    }

    public ReferrerFilter getRefFilter() {
      return this.refFilter;
    }

    public getWebStatsForReferrer_args setRefFilter(ReferrerFilter refFilter) {
      this.refFilter = refFilter;
      return this;
    }

    public void unsetRefFilter() {
      this.refFilter = null;
    }

    /** Returns true if field refFilter is set (has been assigned a value) and false otherwise */
    public boolean isSetRefFilter() {
      return this.refFilter != null;
    }

    public void setRefFilterIsSet(boolean value) {
      if (!value) {
        this.refFilter = null;
      }
    }

    public UserFilter getUserFilter() {
      return this.userFilter;
    }

    public getWebStatsForReferrer_args setUserFilter(UserFilter userFilter) {
      this.userFilter = userFilter;
      return this;
    }

    public void unsetUserFilter() {
      this.userFilter = null;
    }

    /** Returns true if field userFilter is set (has been assigned a value) and false otherwise */
    public boolean isSetUserFilter() {
      return this.userFilter != null;
    }

    public void setUserFilterIsSet(boolean value) {
      if (!value) {
        this.userFilter = null;
      }
    }

    public int getStartIndex() {
      return this.startIndex;
    }

    public getWebStatsForReferrer_args setStartIndex(int startIndex) {
      this.startIndex = startIndex;
      setStartIndexIsSet(true);
      return this;
    }

    public void unsetStartIndex() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STARTINDEX_ISSET_ID);
    }

    /** Returns true if field startIndex is set (has been assigned a value) and false otherwise */
    public boolean isSetStartIndex() {
      return EncodingUtils.testBit(__isset_bitfield, __STARTINDEX_ISSET_ID);
    }

    public void setStartIndexIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STARTINDEX_ISSET_ID, value);
    }

    public int getOffset() {
      return this.offset;
    }

    public getWebStatsForReferrer_args setOffset(int offset) {
      this.offset = offset;
      setOffsetIsSet(true);
      return this;
    }

    public void unsetOffset() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OFFSET_ISSET_ID);
    }

    /** Returns true if field offset is set (has been assigned a value) and false otherwise */
    public boolean isSetOffset() {
      return EncodingUtils.testBit(__isset_bitfield, __OFFSET_ISSET_ID);
    }

    public void setOffsetIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OFFSET_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case WEB_ID:
        if (value == null) {
          unsetWebId();
        } else {
          setWebId((Integer)value);
        }
        break;

      case TIME_TYPE:
        if (value == null) {
          unsetTimeType();
        } else {
          setTimeType((Integer)value);
        }
        break;

      case TIME:
        if (value == null) {
          unsetTime();
        } else {
          setTime((String)value);
        }
        break;

      case REF_FILTER:
        if (value == null) {
          unsetRefFilter();
        } else {
          setRefFilter((ReferrerFilter)value);
        }
        break;

      case USER_FILTER:
        if (value == null) {
          unsetUserFilter();
        } else {
          setUserFilter((UserFilter)value);
        }
        break;

      case START_INDEX:
        if (value == null) {
          unsetStartIndex();
        } else {
          setStartIndex((Integer)value);
        }
        break;

      case OFFSET:
        if (value == null) {
          unsetOffset();
        } else {
          setOffset((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case WEB_ID:
        return Integer.valueOf(getWebId());

      case TIME_TYPE:
        return Integer.valueOf(getTimeType());

      case TIME:
        return getTime();

      case REF_FILTER:
        return getRefFilter();

      case USER_FILTER:
        return getUserFilter();

      case START_INDEX:
        return Integer.valueOf(getStartIndex());

      case OFFSET:
        return Integer.valueOf(getOffset());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case WEB_ID:
        return isSetWebId();
      case TIME_TYPE:
        return isSetTimeType();
      case TIME:
        return isSetTime();
      case REF_FILTER:
        return isSetRefFilter();
      case USER_FILTER:
        return isSetUserFilter();
      case START_INDEX:
        return isSetStartIndex();
      case OFFSET:
        return isSetOffset();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getWebStatsForReferrer_args)
        return this.equals((getWebStatsForReferrer_args)that);
      return false;
    }

    public boolean equals(getWebStatsForReferrer_args that) {
      if (that == null)
        return false;

      boolean this_present_webId = true;
      boolean that_present_webId = true;
      if (this_present_webId || that_present_webId) {
        if (!(this_present_webId && that_present_webId))
          return false;
        if (this.webId != that.webId)
          return false;
      }

      boolean this_present_timeType = true;
      boolean that_present_timeType = true;
      if (this_present_timeType || that_present_timeType) {
        if (!(this_present_timeType && that_present_timeType))
          return false;
        if (this.timeType != that.timeType)
          return false;
      }

      boolean this_present_time = true && this.isSetTime();
      boolean that_present_time = true && that.isSetTime();
      if (this_present_time || that_present_time) {
        if (!(this_present_time && that_present_time))
          return false;
        if (!this.time.equals(that.time))
          return false;
      }

      boolean this_present_refFilter = true && this.isSetRefFilter();
      boolean that_present_refFilter = true && that.isSetRefFilter();
      if (this_present_refFilter || that_present_refFilter) {
        if (!(this_present_refFilter && that_present_refFilter))
          return false;
        if (!this.refFilter.equals(that.refFilter))
          return false;
      }

      boolean this_present_userFilter = true && this.isSetUserFilter();
      boolean that_present_userFilter = true && that.isSetUserFilter();
      if (this_present_userFilter || that_present_userFilter) {
        if (!(this_present_userFilter && that_present_userFilter))
          return false;
        if (!this.userFilter.equals(that.userFilter))
          return false;
      }

      boolean this_present_startIndex = true;
      boolean that_present_startIndex = true;
      if (this_present_startIndex || that_present_startIndex) {
        if (!(this_present_startIndex && that_present_startIndex))
          return false;
        if (this.startIndex != that.startIndex)
          return false;
      }

      boolean this_present_offset = true;
      boolean that_present_offset = true;
      if (this_present_offset || that_present_offset) {
        if (!(this_present_offset && that_present_offset))
          return false;
        if (this.offset != that.offset)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getWebStatsForReferrer_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetWebId()).compareTo(other.isSetWebId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetWebId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.webId, other.webId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTimeType()).compareTo(other.isSetTimeType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTimeType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timeType, other.timeType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTime()).compareTo(other.isSetTime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTime()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.time, other.time);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRefFilter()).compareTo(other.isSetRefFilter());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRefFilter()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.refFilter, other.refFilter);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUserFilter()).compareTo(other.isSetUserFilter());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserFilter()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userFilter, other.userFilter);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStartIndex()).compareTo(other.isSetStartIndex());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStartIndex()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startIndex, other.startIndex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOffset()).compareTo(other.isSetOffset());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOffset()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.offset, other.offset);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getWebStatsForReferrer_args(");
      boolean first = true;

      sb.append("webId:");
      sb.append(this.webId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("timeType:");
      sb.append(this.timeType);
      first = false;
      if (!first) sb.append(", ");
      sb.append("time:");
      if (this.time == null) {
        sb.append("null");
      } else {
        sb.append(this.time);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("refFilter:");
      if (this.refFilter == null) {
        sb.append("null");
      } else {
        sb.append(this.refFilter);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userFilter:");
      if (this.userFilter == null) {
        sb.append("null");
      } else {
        sb.append(this.userFilter);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("startIndex:");
      sb.append(this.startIndex);
      first = false;
      if (!first) sb.append(", ");
      sb.append("offset:");
      sb.append(this.offset);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (refFilter != null) {
        refFilter.validate();
      }
      if (userFilter != null) {
        userFilter.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getWebStatsForReferrer_argsStandardSchemeFactory implements SchemeFactory {
      public getWebStatsForReferrer_argsStandardScheme getScheme() {
        return new getWebStatsForReferrer_argsStandardScheme();
      }
    }

    private static class getWebStatsForReferrer_argsStandardScheme extends StandardScheme<getWebStatsForReferrer_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getWebStatsForReferrer_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // WEB_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.webId = iprot.readI32();
                struct.setWebIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TIME_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.timeType = iprot.readI32();
                struct.setTimeTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // TIME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.time = iprot.readString();
                struct.setTimeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // REF_FILTER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.refFilter = new ReferrerFilter();
                struct.refFilter.read(iprot);
                struct.setRefFilterIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // USER_FILTER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.userFilter = new UserFilter();
                struct.userFilter.read(iprot);
                struct.setUserFilterIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // START_INDEX
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.startIndex = iprot.readI32();
                struct.setStartIndexIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 7: // OFFSET
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.offset = iprot.readI32();
                struct.setOffsetIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getWebStatsForReferrer_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(WEB_ID_FIELD_DESC);
        oprot.writeI32(struct.webId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(TIME_TYPE_FIELD_DESC);
        oprot.writeI32(struct.timeType);
        oprot.writeFieldEnd();
        if (struct.time != null) {
          oprot.writeFieldBegin(TIME_FIELD_DESC);
          oprot.writeString(struct.time);
          oprot.writeFieldEnd();
        }
        if (struct.refFilter != null) {
          oprot.writeFieldBegin(REF_FILTER_FIELD_DESC);
          struct.refFilter.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.userFilter != null) {
          oprot.writeFieldBegin(USER_FILTER_FIELD_DESC);
          struct.userFilter.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(START_INDEX_FIELD_DESC);
        oprot.writeI32(struct.startIndex);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(OFFSET_FIELD_DESC);
        oprot.writeI32(struct.offset);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getWebStatsForReferrer_argsTupleSchemeFactory implements SchemeFactory {
      public getWebStatsForReferrer_argsTupleScheme getScheme() {
        return new getWebStatsForReferrer_argsTupleScheme();
      }
    }

    private static class getWebStatsForReferrer_argsTupleScheme extends TupleScheme<getWebStatsForReferrer_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getWebStatsForReferrer_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetWebId()) {
          optionals.set(0);
        }
        if (struct.isSetTimeType()) {
          optionals.set(1);
        }
        if (struct.isSetTime()) {
          optionals.set(2);
        }
        if (struct.isSetRefFilter()) {
          optionals.set(3);
        }
        if (struct.isSetUserFilter()) {
          optionals.set(4);
        }
        if (struct.isSetStartIndex()) {
          optionals.set(5);
        }
        if (struct.isSetOffset()) {
          optionals.set(6);
        }
        oprot.writeBitSet(optionals, 7);
        if (struct.isSetWebId()) {
          oprot.writeI32(struct.webId);
        }
        if (struct.isSetTimeType()) {
          oprot.writeI32(struct.timeType);
        }
        if (struct.isSetTime()) {
          oprot.writeString(struct.time);
        }
        if (struct.isSetRefFilter()) {
          struct.refFilter.write(oprot);
        }
        if (struct.isSetUserFilter()) {
          struct.userFilter.write(oprot);
        }
        if (struct.isSetStartIndex()) {
          oprot.writeI32(struct.startIndex);
        }
        if (struct.isSetOffset()) {
          oprot.writeI32(struct.offset);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getWebStatsForReferrer_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(7);
        if (incoming.get(0)) {
          struct.webId = iprot.readI32();
          struct.setWebIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.timeType = iprot.readI32();
          struct.setTimeTypeIsSet(true);
        }
        if (incoming.get(2)) {
          struct.time = iprot.readString();
          struct.setTimeIsSet(true);
        }
        if (incoming.get(3)) {
          struct.refFilter = new ReferrerFilter();
          struct.refFilter.read(iprot);
          struct.setRefFilterIsSet(true);
        }
        if (incoming.get(4)) {
          struct.userFilter = new UserFilter();
          struct.userFilter.read(iprot);
          struct.setUserFilterIsSet(true);
        }
        if (incoming.get(5)) {
          struct.startIndex = iprot.readI32();
          struct.setStartIndexIsSet(true);
        }
        if (incoming.get(6)) {
          struct.offset = iprot.readI32();
          struct.setOffsetIsSet(true);
        }
      }
    }

  }

  public static class getWebStatsForReferrer_result implements org.apache.thrift.TBase<getWebStatsForReferrer_result, getWebStatsForReferrer_result._Fields>, java.io.Serializable, Cloneable, Comparable<getWebStatsForReferrer_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getWebStatsForReferrer_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getWebStatsForReferrer_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getWebStatsForReferrer_resultTupleSchemeFactory());
    }

    public List<WebStats> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, WebStats.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getWebStatsForReferrer_result.class, metaDataMap);
    }

    public getWebStatsForReferrer_result() {
    }

    public getWebStatsForReferrer_result(
      List<WebStats> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getWebStatsForReferrer_result(getWebStatsForReferrer_result other) {
      if (other.isSetSuccess()) {
        List<WebStats> __this__success = new ArrayList<WebStats>(other.success.size());
        for (WebStats other_element : other.success) {
          __this__success.add(new WebStats(other_element));
        }
        this.success = __this__success;
      }
    }

    public getWebStatsForReferrer_result deepCopy() {
      return new getWebStatsForReferrer_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<WebStats> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(WebStats elem) {
      if (this.success == null) {
        this.success = new ArrayList<WebStats>();
      }
      this.success.add(elem);
    }

    public List<WebStats> getSuccess() {
      return this.success;
    }

    public getWebStatsForReferrer_result setSuccess(List<WebStats> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<WebStats>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getWebStatsForReferrer_result)
        return this.equals((getWebStatsForReferrer_result)that);
      return false;
    }

    public boolean equals(getWebStatsForReferrer_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getWebStatsForReferrer_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getWebStatsForReferrer_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getWebStatsForReferrer_resultStandardSchemeFactory implements SchemeFactory {
      public getWebStatsForReferrer_resultStandardScheme getScheme() {
        return new getWebStatsForReferrer_resultStandardScheme();
      }
    }

    private static class getWebStatsForReferrer_resultStandardScheme extends StandardScheme<getWebStatsForReferrer_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getWebStatsForReferrer_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list42 = iprot.readListBegin();
                  struct.success = new ArrayList<WebStats>(_list42.size);
                  for (int _i43 = 0; _i43 < _list42.size; ++_i43)
                  {
                    WebStats _elem44;
                    _elem44 = new WebStats();
                    _elem44.read(iprot);
                    struct.success.add(_elem44);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getWebStatsForReferrer_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (WebStats _iter45 : struct.success)
            {
              _iter45.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getWebStatsForReferrer_resultTupleSchemeFactory implements SchemeFactory {
      public getWebStatsForReferrer_resultTupleScheme getScheme() {
        return new getWebStatsForReferrer_resultTupleScheme();
      }
    }

    private static class getWebStatsForReferrer_resultTupleScheme extends TupleScheme<getWebStatsForReferrer_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getWebStatsForReferrer_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (WebStats _iter46 : struct.success)
            {
              _iter46.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getWebStatsForReferrer_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list47 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<WebStats>(_list47.size);
            for (int _i48 = 0; _i48 < _list47.size; ++_i48)
            {
              WebStats _elem49;
              _elem49 = new WebStats();
              _elem49.read(iprot);
              struct.success.add(_elem49);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getWebStatsForKeyword_args implements org.apache.thrift.TBase<getWebStatsForKeyword_args, getWebStatsForKeyword_args._Fields>, java.io.Serializable, Cloneable, Comparable<getWebStatsForKeyword_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getWebStatsForKeyword_args");

    private static final org.apache.thrift.protocol.TField WEB_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("webId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField TIME_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("timeType", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("time", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField SE_DOMAIN_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("seDomainId", org.apache.thrift.protocol.TType.I32, (short)4);
    private static final org.apache.thrift.protocol.TField USER_FILTER_FIELD_DESC = new org.apache.thrift.protocol.TField("userFilter", org.apache.thrift.protocol.TType.STRUCT, (short)5);
    private static final org.apache.thrift.protocol.TField START_INDEX_FIELD_DESC = new org.apache.thrift.protocol.TField("startIndex", org.apache.thrift.protocol.TType.I32, (short)6);
    private static final org.apache.thrift.protocol.TField OFFSET_FIELD_DESC = new org.apache.thrift.protocol.TField("offset", org.apache.thrift.protocol.TType.I32, (short)7);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getWebStatsForKeyword_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getWebStatsForKeyword_argsTupleSchemeFactory());
    }

    public int webId; // required
    public int timeType; // required
    public String time; // required
    public int seDomainId; // required
    public UserFilter userFilter; // required
    public int startIndex; // required
    public int offset; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      WEB_ID((short)1, "webId"),
      TIME_TYPE((short)2, "timeType"),
      TIME((short)3, "time"),
      SE_DOMAIN_ID((short)4, "seDomainId"),
      USER_FILTER((short)5, "userFilter"),
      START_INDEX((short)6, "startIndex"),
      OFFSET((short)7, "offset");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // WEB_ID
            return WEB_ID;
          case 2: // TIME_TYPE
            return TIME_TYPE;
          case 3: // TIME
            return TIME;
          case 4: // SE_DOMAIN_ID
            return SE_DOMAIN_ID;
          case 5: // USER_FILTER
            return USER_FILTER;
          case 6: // START_INDEX
            return START_INDEX;
          case 7: // OFFSET
            return OFFSET;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __WEBID_ISSET_ID = 0;
    private static final int __TIMETYPE_ISSET_ID = 1;
    private static final int __SEDOMAINID_ISSET_ID = 2;
    private static final int __STARTINDEX_ISSET_ID = 3;
    private static final int __OFFSET_ISSET_ID = 4;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.WEB_ID, new org.apache.thrift.meta_data.FieldMetaData("webId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.TIME_TYPE, new org.apache.thrift.meta_data.FieldMetaData("timeType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.TIME, new org.apache.thrift.meta_data.FieldMetaData("time", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SE_DOMAIN_ID, new org.apache.thrift.meta_data.FieldMetaData("seDomainId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.USER_FILTER, new org.apache.thrift.meta_data.FieldMetaData("userFilter", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, UserFilter.class)));
      tmpMap.put(_Fields.START_INDEX, new org.apache.thrift.meta_data.FieldMetaData("startIndex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.OFFSET, new org.apache.thrift.meta_data.FieldMetaData("offset", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getWebStatsForKeyword_args.class, metaDataMap);
    }

    public getWebStatsForKeyword_args() {
    }

    public getWebStatsForKeyword_args(
      int webId,
      int timeType,
      String time,
      int seDomainId,
      UserFilter userFilter,
      int startIndex,
      int offset)
    {
      this();
      this.webId = webId;
      setWebIdIsSet(true);
      this.timeType = timeType;
      setTimeTypeIsSet(true);
      this.time = time;
      this.seDomainId = seDomainId;
      setSeDomainIdIsSet(true);
      this.userFilter = userFilter;
      this.startIndex = startIndex;
      setStartIndexIsSet(true);
      this.offset = offset;
      setOffsetIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getWebStatsForKeyword_args(getWebStatsForKeyword_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.webId = other.webId;
      this.timeType = other.timeType;
      if (other.isSetTime()) {
        this.time = other.time;
      }
      this.seDomainId = other.seDomainId;
      if (other.isSetUserFilter()) {
        this.userFilter = new UserFilter(other.userFilter);
      }
      this.startIndex = other.startIndex;
      this.offset = other.offset;
    }

    public getWebStatsForKeyword_args deepCopy() {
      return new getWebStatsForKeyword_args(this);
    }

    @Override
    public void clear() {
      setWebIdIsSet(false);
      this.webId = 0;
      setTimeTypeIsSet(false);
      this.timeType = 0;
      this.time = null;
      setSeDomainIdIsSet(false);
      this.seDomainId = 0;
      this.userFilter = null;
      setStartIndexIsSet(false);
      this.startIndex = 0;
      setOffsetIsSet(false);
      this.offset = 0;
    }

    public int getWebId() {
      return this.webId;
    }

    public getWebStatsForKeyword_args setWebId(int webId) {
      this.webId = webId;
      setWebIdIsSet(true);
      return this;
    }

    public void unsetWebId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __WEBID_ISSET_ID);
    }

    /** Returns true if field webId is set (has been assigned a value) and false otherwise */
    public boolean isSetWebId() {
      return EncodingUtils.testBit(__isset_bitfield, __WEBID_ISSET_ID);
    }

    public void setWebIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __WEBID_ISSET_ID, value);
    }

    public int getTimeType() {
      return this.timeType;
    }

    public getWebStatsForKeyword_args setTimeType(int timeType) {
      this.timeType = timeType;
      setTimeTypeIsSet(true);
      return this;
    }

    public void unsetTimeType() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TIMETYPE_ISSET_ID);
    }

    /** Returns true if field timeType is set (has been assigned a value) and false otherwise */
    public boolean isSetTimeType() {
      return EncodingUtils.testBit(__isset_bitfield, __TIMETYPE_ISSET_ID);
    }

    public void setTimeTypeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TIMETYPE_ISSET_ID, value);
    }

    public String getTime() {
      return this.time;
    }

    public getWebStatsForKeyword_args setTime(String time) {
      this.time = time;
      return this;
    }

    public void unsetTime() {
      this.time = null;
    }

    /** Returns true if field time is set (has been assigned a value) and false otherwise */
    public boolean isSetTime() {
      return this.time != null;
    }

    public void setTimeIsSet(boolean value) {
      if (!value) {
        this.time = null;
      }
    }

    public int getSeDomainId() {
      return this.seDomainId;
    }

    public getWebStatsForKeyword_args setSeDomainId(int seDomainId) {
      this.seDomainId = seDomainId;
      setSeDomainIdIsSet(true);
      return this;
    }

    public void unsetSeDomainId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SEDOMAINID_ISSET_ID);
    }

    /** Returns true if field seDomainId is set (has been assigned a value) and false otherwise */
    public boolean isSetSeDomainId() {
      return EncodingUtils.testBit(__isset_bitfield, __SEDOMAINID_ISSET_ID);
    }

    public void setSeDomainIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SEDOMAINID_ISSET_ID, value);
    }

    public UserFilter getUserFilter() {
      return this.userFilter;
    }

    public getWebStatsForKeyword_args setUserFilter(UserFilter userFilter) {
      this.userFilter = userFilter;
      return this;
    }

    public void unsetUserFilter() {
      this.userFilter = null;
    }

    /** Returns true if field userFilter is set (has been assigned a value) and false otherwise */
    public boolean isSetUserFilter() {
      return this.userFilter != null;
    }

    public void setUserFilterIsSet(boolean value) {
      if (!value) {
        this.userFilter = null;
      }
    }

    public int getStartIndex() {
      return this.startIndex;
    }

    public getWebStatsForKeyword_args setStartIndex(int startIndex) {
      this.startIndex = startIndex;
      setStartIndexIsSet(true);
      return this;
    }

    public void unsetStartIndex() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STARTINDEX_ISSET_ID);
    }

    /** Returns true if field startIndex is set (has been assigned a value) and false otherwise */
    public boolean isSetStartIndex() {
      return EncodingUtils.testBit(__isset_bitfield, __STARTINDEX_ISSET_ID);
    }

    public void setStartIndexIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STARTINDEX_ISSET_ID, value);
    }

    public int getOffset() {
      return this.offset;
    }

    public getWebStatsForKeyword_args setOffset(int offset) {
      this.offset = offset;
      setOffsetIsSet(true);
      return this;
    }

    public void unsetOffset() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OFFSET_ISSET_ID);
    }

    /** Returns true if field offset is set (has been assigned a value) and false otherwise */
    public boolean isSetOffset() {
      return EncodingUtils.testBit(__isset_bitfield, __OFFSET_ISSET_ID);
    }

    public void setOffsetIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OFFSET_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case WEB_ID:
        if (value == null) {
          unsetWebId();
        } else {
          setWebId((Integer)value);
        }
        break;

      case TIME_TYPE:
        if (value == null) {
          unsetTimeType();
        } else {
          setTimeType((Integer)value);
        }
        break;

      case TIME:
        if (value == null) {
          unsetTime();
        } else {
          setTime((String)value);
        }
        break;

      case SE_DOMAIN_ID:
        if (value == null) {
          unsetSeDomainId();
        } else {
          setSeDomainId((Integer)value);
        }
        break;

      case USER_FILTER:
        if (value == null) {
          unsetUserFilter();
        } else {
          setUserFilter((UserFilter)value);
        }
        break;

      case START_INDEX:
        if (value == null) {
          unsetStartIndex();
        } else {
          setStartIndex((Integer)value);
        }
        break;

      case OFFSET:
        if (value == null) {
          unsetOffset();
        } else {
          setOffset((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case WEB_ID:
        return Integer.valueOf(getWebId());

      case TIME_TYPE:
        return Integer.valueOf(getTimeType());

      case TIME:
        return getTime();

      case SE_DOMAIN_ID:
        return Integer.valueOf(getSeDomainId());

      case USER_FILTER:
        return getUserFilter();

      case START_INDEX:
        return Integer.valueOf(getStartIndex());

      case OFFSET:
        return Integer.valueOf(getOffset());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case WEB_ID:
        return isSetWebId();
      case TIME_TYPE:
        return isSetTimeType();
      case TIME:
        return isSetTime();
      case SE_DOMAIN_ID:
        return isSetSeDomainId();
      case USER_FILTER:
        return isSetUserFilter();
      case START_INDEX:
        return isSetStartIndex();
      case OFFSET:
        return isSetOffset();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getWebStatsForKeyword_args)
        return this.equals((getWebStatsForKeyword_args)that);
      return false;
    }

    public boolean equals(getWebStatsForKeyword_args that) {
      if (that == null)
        return false;

      boolean this_present_webId = true;
      boolean that_present_webId = true;
      if (this_present_webId || that_present_webId) {
        if (!(this_present_webId && that_present_webId))
          return false;
        if (this.webId != that.webId)
          return false;
      }

      boolean this_present_timeType = true;
      boolean that_present_timeType = true;
      if (this_present_timeType || that_present_timeType) {
        if (!(this_present_timeType && that_present_timeType))
          return false;
        if (this.timeType != that.timeType)
          return false;
      }

      boolean this_present_time = true && this.isSetTime();
      boolean that_present_time = true && that.isSetTime();
      if (this_present_time || that_present_time) {
        if (!(this_present_time && that_present_time))
          return false;
        if (!this.time.equals(that.time))
          return false;
      }

      boolean this_present_seDomainId = true;
      boolean that_present_seDomainId = true;
      if (this_present_seDomainId || that_present_seDomainId) {
        if (!(this_present_seDomainId && that_present_seDomainId))
          return false;
        if (this.seDomainId != that.seDomainId)
          return false;
      }

      boolean this_present_userFilter = true && this.isSetUserFilter();
      boolean that_present_userFilter = true && that.isSetUserFilter();
      if (this_present_userFilter || that_present_userFilter) {
        if (!(this_present_userFilter && that_present_userFilter))
          return false;
        if (!this.userFilter.equals(that.userFilter))
          return false;
      }

      boolean this_present_startIndex = true;
      boolean that_present_startIndex = true;
      if (this_present_startIndex || that_present_startIndex) {
        if (!(this_present_startIndex && that_present_startIndex))
          return false;
        if (this.startIndex != that.startIndex)
          return false;
      }

      boolean this_present_offset = true;
      boolean that_present_offset = true;
      if (this_present_offset || that_present_offset) {
        if (!(this_present_offset && that_present_offset))
          return false;
        if (this.offset != that.offset)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getWebStatsForKeyword_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetWebId()).compareTo(other.isSetWebId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetWebId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.webId, other.webId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTimeType()).compareTo(other.isSetTimeType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTimeType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timeType, other.timeType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTime()).compareTo(other.isSetTime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTime()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.time, other.time);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSeDomainId()).compareTo(other.isSetSeDomainId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSeDomainId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.seDomainId, other.seDomainId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUserFilter()).compareTo(other.isSetUserFilter());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserFilter()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userFilter, other.userFilter);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStartIndex()).compareTo(other.isSetStartIndex());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStartIndex()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startIndex, other.startIndex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOffset()).compareTo(other.isSetOffset());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOffset()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.offset, other.offset);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getWebStatsForKeyword_args(");
      boolean first = true;

      sb.append("webId:");
      sb.append(this.webId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("timeType:");
      sb.append(this.timeType);
      first = false;
      if (!first) sb.append(", ");
      sb.append("time:");
      if (this.time == null) {
        sb.append("null");
      } else {
        sb.append(this.time);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("seDomainId:");
      sb.append(this.seDomainId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("userFilter:");
      if (this.userFilter == null) {
        sb.append("null");
      } else {
        sb.append(this.userFilter);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("startIndex:");
      sb.append(this.startIndex);
      first = false;
      if (!first) sb.append(", ");
      sb.append("offset:");
      sb.append(this.offset);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (userFilter != null) {
        userFilter.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getWebStatsForKeyword_argsStandardSchemeFactory implements SchemeFactory {
      public getWebStatsForKeyword_argsStandardScheme getScheme() {
        return new getWebStatsForKeyword_argsStandardScheme();
      }
    }

    private static class getWebStatsForKeyword_argsStandardScheme extends StandardScheme<getWebStatsForKeyword_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getWebStatsForKeyword_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // WEB_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.webId = iprot.readI32();
                struct.setWebIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TIME_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.timeType = iprot.readI32();
                struct.setTimeTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // TIME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.time = iprot.readString();
                struct.setTimeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // SE_DOMAIN_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.seDomainId = iprot.readI32();
                struct.setSeDomainIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // USER_FILTER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.userFilter = new UserFilter();
                struct.userFilter.read(iprot);
                struct.setUserFilterIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // START_INDEX
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.startIndex = iprot.readI32();
                struct.setStartIndexIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 7: // OFFSET
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.offset = iprot.readI32();
                struct.setOffsetIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getWebStatsForKeyword_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(WEB_ID_FIELD_DESC);
        oprot.writeI32(struct.webId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(TIME_TYPE_FIELD_DESC);
        oprot.writeI32(struct.timeType);
        oprot.writeFieldEnd();
        if (struct.time != null) {
          oprot.writeFieldBegin(TIME_FIELD_DESC);
          oprot.writeString(struct.time);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(SE_DOMAIN_ID_FIELD_DESC);
        oprot.writeI32(struct.seDomainId);
        oprot.writeFieldEnd();
        if (struct.userFilter != null) {
          oprot.writeFieldBegin(USER_FILTER_FIELD_DESC);
          struct.userFilter.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(START_INDEX_FIELD_DESC);
        oprot.writeI32(struct.startIndex);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(OFFSET_FIELD_DESC);
        oprot.writeI32(struct.offset);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getWebStatsForKeyword_argsTupleSchemeFactory implements SchemeFactory {
      public getWebStatsForKeyword_argsTupleScheme getScheme() {
        return new getWebStatsForKeyword_argsTupleScheme();
      }
    }

    private static class getWebStatsForKeyword_argsTupleScheme extends TupleScheme<getWebStatsForKeyword_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getWebStatsForKeyword_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetWebId()) {
          optionals.set(0);
        }
        if (struct.isSetTimeType()) {
          optionals.set(1);
        }
        if (struct.isSetTime()) {
          optionals.set(2);
        }
        if (struct.isSetSeDomainId()) {
          optionals.set(3);
        }
        if (struct.isSetUserFilter()) {
          optionals.set(4);
        }
        if (struct.isSetStartIndex()) {
          optionals.set(5);
        }
        if (struct.isSetOffset()) {
          optionals.set(6);
        }
        oprot.writeBitSet(optionals, 7);
        if (struct.isSetWebId()) {
          oprot.writeI32(struct.webId);
        }
        if (struct.isSetTimeType()) {
          oprot.writeI32(struct.timeType);
        }
        if (struct.isSetTime()) {
          oprot.writeString(struct.time);
        }
        if (struct.isSetSeDomainId()) {
          oprot.writeI32(struct.seDomainId);
        }
        if (struct.isSetUserFilter()) {
          struct.userFilter.write(oprot);
        }
        if (struct.isSetStartIndex()) {
          oprot.writeI32(struct.startIndex);
        }
        if (struct.isSetOffset()) {
          oprot.writeI32(struct.offset);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getWebStatsForKeyword_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(7);
        if (incoming.get(0)) {
          struct.webId = iprot.readI32();
          struct.setWebIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.timeType = iprot.readI32();
          struct.setTimeTypeIsSet(true);
        }
        if (incoming.get(2)) {
          struct.time = iprot.readString();
          struct.setTimeIsSet(true);
        }
        if (incoming.get(3)) {
          struct.seDomainId = iprot.readI32();
          struct.setSeDomainIdIsSet(true);
        }
        if (incoming.get(4)) {
          struct.userFilter = new UserFilter();
          struct.userFilter.read(iprot);
          struct.setUserFilterIsSet(true);
        }
        if (incoming.get(5)) {
          struct.startIndex = iprot.readI32();
          struct.setStartIndexIsSet(true);
        }
        if (incoming.get(6)) {
          struct.offset = iprot.readI32();
          struct.setOffsetIsSet(true);
        }
      }
    }

  }

  public static class getWebStatsForKeyword_result implements org.apache.thrift.TBase<getWebStatsForKeyword_result, getWebStatsForKeyword_result._Fields>, java.io.Serializable, Cloneable, Comparable<getWebStatsForKeyword_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getWebStatsForKeyword_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getWebStatsForKeyword_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getWebStatsForKeyword_resultTupleSchemeFactory());
    }

    public List<WebStats> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, WebStats.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getWebStatsForKeyword_result.class, metaDataMap);
    }

    public getWebStatsForKeyword_result() {
    }

    public getWebStatsForKeyword_result(
      List<WebStats> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getWebStatsForKeyword_result(getWebStatsForKeyword_result other) {
      if (other.isSetSuccess()) {
        List<WebStats> __this__success = new ArrayList<WebStats>(other.success.size());
        for (WebStats other_element : other.success) {
          __this__success.add(new WebStats(other_element));
        }
        this.success = __this__success;
      }
    }

    public getWebStatsForKeyword_result deepCopy() {
      return new getWebStatsForKeyword_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<WebStats> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(WebStats elem) {
      if (this.success == null) {
        this.success = new ArrayList<WebStats>();
      }
      this.success.add(elem);
    }

    public List<WebStats> getSuccess() {
      return this.success;
    }

    public getWebStatsForKeyword_result setSuccess(List<WebStats> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<WebStats>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getWebStatsForKeyword_result)
        return this.equals((getWebStatsForKeyword_result)that);
      return false;
    }

    public boolean equals(getWebStatsForKeyword_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getWebStatsForKeyword_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getWebStatsForKeyword_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getWebStatsForKeyword_resultStandardSchemeFactory implements SchemeFactory {
      public getWebStatsForKeyword_resultStandardScheme getScheme() {
        return new getWebStatsForKeyword_resultStandardScheme();
      }
    }

    private static class getWebStatsForKeyword_resultStandardScheme extends StandardScheme<getWebStatsForKeyword_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getWebStatsForKeyword_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list50 = iprot.readListBegin();
                  struct.success = new ArrayList<WebStats>(_list50.size);
                  for (int _i51 = 0; _i51 < _list50.size; ++_i51)
                  {
                    WebStats _elem52;
                    _elem52 = new WebStats();
                    _elem52.read(iprot);
                    struct.success.add(_elem52);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getWebStatsForKeyword_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (WebStats _iter53 : struct.success)
            {
              _iter53.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getWebStatsForKeyword_resultTupleSchemeFactory implements SchemeFactory {
      public getWebStatsForKeyword_resultTupleScheme getScheme() {
        return new getWebStatsForKeyword_resultTupleScheme();
      }
    }

    private static class getWebStatsForKeyword_resultTupleScheme extends TupleScheme<getWebStatsForKeyword_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getWebStatsForKeyword_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (WebStats _iter54 : struct.success)
            {
              _iter54.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getWebStatsForKeyword_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list55 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<WebStats>(_list55.size);
            for (int _i56 = 0; _i56 < _list55.size; ++_i56)
            {
              WebStats _elem57;
              _elem57 = new WebStats();
              _elem57.read(iprot);
              struct.success.add(_elem57);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getWebStatsForArea_args implements org.apache.thrift.TBase<getWebStatsForArea_args, getWebStatsForArea_args._Fields>, java.io.Serializable, Cloneable, Comparable<getWebStatsForArea_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getWebStatsForArea_args");

    private static final org.apache.thrift.protocol.TField WEB_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("webId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField TIME_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("timeType", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("time", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField USER_FILTER_FIELD_DESC = new org.apache.thrift.protocol.TField("userFilter", org.apache.thrift.protocol.TType.STRUCT, (short)4);
    private static final org.apache.thrift.protocol.TField AREA_FILTER_FIELD_DESC = new org.apache.thrift.protocol.TField("areaFilter", org.apache.thrift.protocol.TType.STRUCT, (short)5);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getWebStatsForArea_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getWebStatsForArea_argsTupleSchemeFactory());
    }

    public int webId; // required
    public int timeType; // required
    public String time; // required
    public UserFilter userFilter; // required
    public AreaFilter areaFilter; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      WEB_ID((short)1, "webId"),
      TIME_TYPE((short)2, "timeType"),
      TIME((short)3, "time"),
      USER_FILTER((short)4, "userFilter"),
      AREA_FILTER((short)5, "areaFilter");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // WEB_ID
            return WEB_ID;
          case 2: // TIME_TYPE
            return TIME_TYPE;
          case 3: // TIME
            return TIME;
          case 4: // USER_FILTER
            return USER_FILTER;
          case 5: // AREA_FILTER
            return AREA_FILTER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __WEBID_ISSET_ID = 0;
    private static final int __TIMETYPE_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.WEB_ID, new org.apache.thrift.meta_data.FieldMetaData("webId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.TIME_TYPE, new org.apache.thrift.meta_data.FieldMetaData("timeType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.TIME, new org.apache.thrift.meta_data.FieldMetaData("time", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.USER_FILTER, new org.apache.thrift.meta_data.FieldMetaData("userFilter", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, UserFilter.class)));
      tmpMap.put(_Fields.AREA_FILTER, new org.apache.thrift.meta_data.FieldMetaData("areaFilter", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, AreaFilter.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getWebStatsForArea_args.class, metaDataMap);
    }

    public getWebStatsForArea_args() {
    }

    public getWebStatsForArea_args(
      int webId,
      int timeType,
      String time,
      UserFilter userFilter,
      AreaFilter areaFilter)
    {
      this();
      this.webId = webId;
      setWebIdIsSet(true);
      this.timeType = timeType;
      setTimeTypeIsSet(true);
      this.time = time;
      this.userFilter = userFilter;
      this.areaFilter = areaFilter;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getWebStatsForArea_args(getWebStatsForArea_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.webId = other.webId;
      this.timeType = other.timeType;
      if (other.isSetTime()) {
        this.time = other.time;
      }
      if (other.isSetUserFilter()) {
        this.userFilter = new UserFilter(other.userFilter);
      }
      if (other.isSetAreaFilter()) {
        this.areaFilter = new AreaFilter(other.areaFilter);
      }
    }

    public getWebStatsForArea_args deepCopy() {
      return new getWebStatsForArea_args(this);
    }

    @Override
    public void clear() {
      setWebIdIsSet(false);
      this.webId = 0;
      setTimeTypeIsSet(false);
      this.timeType = 0;
      this.time = null;
      this.userFilter = null;
      this.areaFilter = null;
    }

    public int getWebId() {
      return this.webId;
    }

    public getWebStatsForArea_args setWebId(int webId) {
      this.webId = webId;
      setWebIdIsSet(true);
      return this;
    }

    public void unsetWebId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __WEBID_ISSET_ID);
    }

    /** Returns true if field webId is set (has been assigned a value) and false otherwise */
    public boolean isSetWebId() {
      return EncodingUtils.testBit(__isset_bitfield, __WEBID_ISSET_ID);
    }

    public void setWebIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __WEBID_ISSET_ID, value);
    }

    public int getTimeType() {
      return this.timeType;
    }

    public getWebStatsForArea_args setTimeType(int timeType) {
      this.timeType = timeType;
      setTimeTypeIsSet(true);
      return this;
    }

    public void unsetTimeType() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TIMETYPE_ISSET_ID);
    }

    /** Returns true if field timeType is set (has been assigned a value) and false otherwise */
    public boolean isSetTimeType() {
      return EncodingUtils.testBit(__isset_bitfield, __TIMETYPE_ISSET_ID);
    }

    public void setTimeTypeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TIMETYPE_ISSET_ID, value);
    }

    public String getTime() {
      return this.time;
    }

    public getWebStatsForArea_args setTime(String time) {
      this.time = time;
      return this;
    }

    public void unsetTime() {
      this.time = null;
    }

    /** Returns true if field time is set (has been assigned a value) and false otherwise */
    public boolean isSetTime() {
      return this.time != null;
    }

    public void setTimeIsSet(boolean value) {
      if (!value) {
        this.time = null;
      }
    }

    public UserFilter getUserFilter() {
      return this.userFilter;
    }

    public getWebStatsForArea_args setUserFilter(UserFilter userFilter) {
      this.userFilter = userFilter;
      return this;
    }

    public void unsetUserFilter() {
      this.userFilter = null;
    }

    /** Returns true if field userFilter is set (has been assigned a value) and false otherwise */
    public boolean isSetUserFilter() {
      return this.userFilter != null;
    }

    public void setUserFilterIsSet(boolean value) {
      if (!value) {
        this.userFilter = null;
      }
    }

    public AreaFilter getAreaFilter() {
      return this.areaFilter;
    }

    public getWebStatsForArea_args setAreaFilter(AreaFilter areaFilter) {
      this.areaFilter = areaFilter;
      return this;
    }

    public void unsetAreaFilter() {
      this.areaFilter = null;
    }

    /** Returns true if field areaFilter is set (has been assigned a value) and false otherwise */
    public boolean isSetAreaFilter() {
      return this.areaFilter != null;
    }

    public void setAreaFilterIsSet(boolean value) {
      if (!value) {
        this.areaFilter = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case WEB_ID:
        if (value == null) {
          unsetWebId();
        } else {
          setWebId((Integer)value);
        }
        break;

      case TIME_TYPE:
        if (value == null) {
          unsetTimeType();
        } else {
          setTimeType((Integer)value);
        }
        break;

      case TIME:
        if (value == null) {
          unsetTime();
        } else {
          setTime((String)value);
        }
        break;

      case USER_FILTER:
        if (value == null) {
          unsetUserFilter();
        } else {
          setUserFilter((UserFilter)value);
        }
        break;

      case AREA_FILTER:
        if (value == null) {
          unsetAreaFilter();
        } else {
          setAreaFilter((AreaFilter)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case WEB_ID:
        return Integer.valueOf(getWebId());

      case TIME_TYPE:
        return Integer.valueOf(getTimeType());

      case TIME:
        return getTime();

      case USER_FILTER:
        return getUserFilter();

      case AREA_FILTER:
        return getAreaFilter();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case WEB_ID:
        return isSetWebId();
      case TIME_TYPE:
        return isSetTimeType();
      case TIME:
        return isSetTime();
      case USER_FILTER:
        return isSetUserFilter();
      case AREA_FILTER:
        return isSetAreaFilter();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getWebStatsForArea_args)
        return this.equals((getWebStatsForArea_args)that);
      return false;
    }

    public boolean equals(getWebStatsForArea_args that) {
      if (that == null)
        return false;

      boolean this_present_webId = true;
      boolean that_present_webId = true;
      if (this_present_webId || that_present_webId) {
        if (!(this_present_webId && that_present_webId))
          return false;
        if (this.webId != that.webId)
          return false;
      }

      boolean this_present_timeType = true;
      boolean that_present_timeType = true;
      if (this_present_timeType || that_present_timeType) {
        if (!(this_present_timeType && that_present_timeType))
          return false;
        if (this.timeType != that.timeType)
          return false;
      }

      boolean this_present_time = true && this.isSetTime();
      boolean that_present_time = true && that.isSetTime();
      if (this_present_time || that_present_time) {
        if (!(this_present_time && that_present_time))
          return false;
        if (!this.time.equals(that.time))
          return false;
      }

      boolean this_present_userFilter = true && this.isSetUserFilter();
      boolean that_present_userFilter = true && that.isSetUserFilter();
      if (this_present_userFilter || that_present_userFilter) {
        if (!(this_present_userFilter && that_present_userFilter))
          return false;
        if (!this.userFilter.equals(that.userFilter))
          return false;
      }

      boolean this_present_areaFilter = true && this.isSetAreaFilter();
      boolean that_present_areaFilter = true && that.isSetAreaFilter();
      if (this_present_areaFilter || that_present_areaFilter) {
        if (!(this_present_areaFilter && that_present_areaFilter))
          return false;
        if (!this.areaFilter.equals(that.areaFilter))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getWebStatsForArea_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetWebId()).compareTo(other.isSetWebId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetWebId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.webId, other.webId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTimeType()).compareTo(other.isSetTimeType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTimeType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timeType, other.timeType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTime()).compareTo(other.isSetTime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTime()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.time, other.time);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUserFilter()).compareTo(other.isSetUserFilter());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserFilter()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userFilter, other.userFilter);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAreaFilter()).compareTo(other.isSetAreaFilter());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAreaFilter()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.areaFilter, other.areaFilter);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getWebStatsForArea_args(");
      boolean first = true;

      sb.append("webId:");
      sb.append(this.webId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("timeType:");
      sb.append(this.timeType);
      first = false;
      if (!first) sb.append(", ");
      sb.append("time:");
      if (this.time == null) {
        sb.append("null");
      } else {
        sb.append(this.time);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userFilter:");
      if (this.userFilter == null) {
        sb.append("null");
      } else {
        sb.append(this.userFilter);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("areaFilter:");
      if (this.areaFilter == null) {
        sb.append("null");
      } else {
        sb.append(this.areaFilter);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (userFilter != null) {
        userFilter.validate();
      }
      if (areaFilter != null) {
        areaFilter.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getWebStatsForArea_argsStandardSchemeFactory implements SchemeFactory {
      public getWebStatsForArea_argsStandardScheme getScheme() {
        return new getWebStatsForArea_argsStandardScheme();
      }
    }

    private static class getWebStatsForArea_argsStandardScheme extends StandardScheme<getWebStatsForArea_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getWebStatsForArea_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // WEB_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.webId = iprot.readI32();
                struct.setWebIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TIME_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.timeType = iprot.readI32();
                struct.setTimeTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // TIME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.time = iprot.readString();
                struct.setTimeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // USER_FILTER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.userFilter = new UserFilter();
                struct.userFilter.read(iprot);
                struct.setUserFilterIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // AREA_FILTER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.areaFilter = new AreaFilter();
                struct.areaFilter.read(iprot);
                struct.setAreaFilterIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getWebStatsForArea_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(WEB_ID_FIELD_DESC);
        oprot.writeI32(struct.webId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(TIME_TYPE_FIELD_DESC);
        oprot.writeI32(struct.timeType);
        oprot.writeFieldEnd();
        if (struct.time != null) {
          oprot.writeFieldBegin(TIME_FIELD_DESC);
          oprot.writeString(struct.time);
          oprot.writeFieldEnd();
        }
        if (struct.userFilter != null) {
          oprot.writeFieldBegin(USER_FILTER_FIELD_DESC);
          struct.userFilter.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.areaFilter != null) {
          oprot.writeFieldBegin(AREA_FILTER_FIELD_DESC);
          struct.areaFilter.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getWebStatsForArea_argsTupleSchemeFactory implements SchemeFactory {
      public getWebStatsForArea_argsTupleScheme getScheme() {
        return new getWebStatsForArea_argsTupleScheme();
      }
    }

    private static class getWebStatsForArea_argsTupleScheme extends TupleScheme<getWebStatsForArea_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getWebStatsForArea_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetWebId()) {
          optionals.set(0);
        }
        if (struct.isSetTimeType()) {
          optionals.set(1);
        }
        if (struct.isSetTime()) {
          optionals.set(2);
        }
        if (struct.isSetUserFilter()) {
          optionals.set(3);
        }
        if (struct.isSetAreaFilter()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetWebId()) {
          oprot.writeI32(struct.webId);
        }
        if (struct.isSetTimeType()) {
          oprot.writeI32(struct.timeType);
        }
        if (struct.isSetTime()) {
          oprot.writeString(struct.time);
        }
        if (struct.isSetUserFilter()) {
          struct.userFilter.write(oprot);
        }
        if (struct.isSetAreaFilter()) {
          struct.areaFilter.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getWebStatsForArea_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.webId = iprot.readI32();
          struct.setWebIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.timeType = iprot.readI32();
          struct.setTimeTypeIsSet(true);
        }
        if (incoming.get(2)) {
          struct.time = iprot.readString();
          struct.setTimeIsSet(true);
        }
        if (incoming.get(3)) {
          struct.userFilter = new UserFilter();
          struct.userFilter.read(iprot);
          struct.setUserFilterIsSet(true);
        }
        if (incoming.get(4)) {
          struct.areaFilter = new AreaFilter();
          struct.areaFilter.read(iprot);
          struct.setAreaFilterIsSet(true);
        }
      }
    }

  }

  public static class getWebStatsForArea_result implements org.apache.thrift.TBase<getWebStatsForArea_result, getWebStatsForArea_result._Fields>, java.io.Serializable, Cloneable, Comparable<getWebStatsForArea_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getWebStatsForArea_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getWebStatsForArea_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getWebStatsForArea_resultTupleSchemeFactory());
    }

    public List<WebStats> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, WebStats.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getWebStatsForArea_result.class, metaDataMap);
    }

    public getWebStatsForArea_result() {
    }

    public getWebStatsForArea_result(
      List<WebStats> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getWebStatsForArea_result(getWebStatsForArea_result other) {
      if (other.isSetSuccess()) {
        List<WebStats> __this__success = new ArrayList<WebStats>(other.success.size());
        for (WebStats other_element : other.success) {
          __this__success.add(new WebStats(other_element));
        }
        this.success = __this__success;
      }
    }

    public getWebStatsForArea_result deepCopy() {
      return new getWebStatsForArea_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<WebStats> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(WebStats elem) {
      if (this.success == null) {
        this.success = new ArrayList<WebStats>();
      }
      this.success.add(elem);
    }

    public List<WebStats> getSuccess() {
      return this.success;
    }

    public getWebStatsForArea_result setSuccess(List<WebStats> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<WebStats>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getWebStatsForArea_result)
        return this.equals((getWebStatsForArea_result)that);
      return false;
    }

    public boolean equals(getWebStatsForArea_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getWebStatsForArea_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getWebStatsForArea_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getWebStatsForArea_resultStandardSchemeFactory implements SchemeFactory {
      public getWebStatsForArea_resultStandardScheme getScheme() {
        return new getWebStatsForArea_resultStandardScheme();
      }
    }

    private static class getWebStatsForArea_resultStandardScheme extends StandardScheme<getWebStatsForArea_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getWebStatsForArea_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list58 = iprot.readListBegin();
                  struct.success = new ArrayList<WebStats>(_list58.size);
                  for (int _i59 = 0; _i59 < _list58.size; ++_i59)
                  {
                    WebStats _elem60;
                    _elem60 = new WebStats();
                    _elem60.read(iprot);
                    struct.success.add(_elem60);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getWebStatsForArea_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (WebStats _iter61 : struct.success)
            {
              _iter61.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getWebStatsForArea_resultTupleSchemeFactory implements SchemeFactory {
      public getWebStatsForArea_resultTupleScheme getScheme() {
        return new getWebStatsForArea_resultTupleScheme();
      }
    }

    private static class getWebStatsForArea_resultTupleScheme extends TupleScheme<getWebStatsForArea_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getWebStatsForArea_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (WebStats _iter62 : struct.success)
            {
              _iter62.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getWebStatsForArea_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list63 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<WebStats>(_list63.size);
            for (int _i64 = 0; _i64 < _list63.size; ++_i64)
            {
              WebStats _elem65;
              _elem65 = new WebStats();
              _elem65.read(iprot);
              struct.success.add(_elem65);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getWebStatsForPage_args implements org.apache.thrift.TBase<getWebStatsForPage_args, getWebStatsForPage_args._Fields>, java.io.Serializable, Cloneable, Comparable<getWebStatsForPage_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getWebStatsForPage_args");

    private static final org.apache.thrift.protocol.TField WEB_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("webId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField TIME_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("timeType", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("time", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField USER_FILTER_FIELD_DESC = new org.apache.thrift.protocol.TField("userFilter", org.apache.thrift.protocol.TType.STRUCT, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getWebStatsForPage_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getWebStatsForPage_argsTupleSchemeFactory());
    }

    public int webId; // required
    public int timeType; // required
    public String time; // required
    public UserFilter userFilter; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      WEB_ID((short)1, "webId"),
      TIME_TYPE((short)2, "timeType"),
      TIME((short)3, "time"),
      USER_FILTER((short)4, "userFilter");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // WEB_ID
            return WEB_ID;
          case 2: // TIME_TYPE
            return TIME_TYPE;
          case 3: // TIME
            return TIME;
          case 4: // USER_FILTER
            return USER_FILTER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __WEBID_ISSET_ID = 0;
    private static final int __TIMETYPE_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.WEB_ID, new org.apache.thrift.meta_data.FieldMetaData("webId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.TIME_TYPE, new org.apache.thrift.meta_data.FieldMetaData("timeType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.TIME, new org.apache.thrift.meta_data.FieldMetaData("time", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.USER_FILTER, new org.apache.thrift.meta_data.FieldMetaData("userFilter", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, UserFilter.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getWebStatsForPage_args.class, metaDataMap);
    }

    public getWebStatsForPage_args() {
    }

    public getWebStatsForPage_args(
      int webId,
      int timeType,
      String time,
      UserFilter userFilter)
    {
      this();
      this.webId = webId;
      setWebIdIsSet(true);
      this.timeType = timeType;
      setTimeTypeIsSet(true);
      this.time = time;
      this.userFilter = userFilter;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getWebStatsForPage_args(getWebStatsForPage_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.webId = other.webId;
      this.timeType = other.timeType;
      if (other.isSetTime()) {
        this.time = other.time;
      }
      if (other.isSetUserFilter()) {
        this.userFilter = new UserFilter(other.userFilter);
      }
    }

    public getWebStatsForPage_args deepCopy() {
      return new getWebStatsForPage_args(this);
    }

    @Override
    public void clear() {
      setWebIdIsSet(false);
      this.webId = 0;
      setTimeTypeIsSet(false);
      this.timeType = 0;
      this.time = null;
      this.userFilter = null;
    }

    public int getWebId() {
      return this.webId;
    }

    public getWebStatsForPage_args setWebId(int webId) {
      this.webId = webId;
      setWebIdIsSet(true);
      return this;
    }

    public void unsetWebId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __WEBID_ISSET_ID);
    }

    /** Returns true if field webId is set (has been assigned a value) and false otherwise */
    public boolean isSetWebId() {
      return EncodingUtils.testBit(__isset_bitfield, __WEBID_ISSET_ID);
    }

    public void setWebIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __WEBID_ISSET_ID, value);
    }

    public int getTimeType() {
      return this.timeType;
    }

    public getWebStatsForPage_args setTimeType(int timeType) {
      this.timeType = timeType;
      setTimeTypeIsSet(true);
      return this;
    }

    public void unsetTimeType() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TIMETYPE_ISSET_ID);
    }

    /** Returns true if field timeType is set (has been assigned a value) and false otherwise */
    public boolean isSetTimeType() {
      return EncodingUtils.testBit(__isset_bitfield, __TIMETYPE_ISSET_ID);
    }

    public void setTimeTypeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TIMETYPE_ISSET_ID, value);
    }

    public String getTime() {
      return this.time;
    }

    public getWebStatsForPage_args setTime(String time) {
      this.time = time;
      return this;
    }

    public void unsetTime() {
      this.time = null;
    }

    /** Returns true if field time is set (has been assigned a value) and false otherwise */
    public boolean isSetTime() {
      return this.time != null;
    }

    public void setTimeIsSet(boolean value) {
      if (!value) {
        this.time = null;
      }
    }

    public UserFilter getUserFilter() {
      return this.userFilter;
    }

    public getWebStatsForPage_args setUserFilter(UserFilter userFilter) {
      this.userFilter = userFilter;
      return this;
    }

    public void unsetUserFilter() {
      this.userFilter = null;
    }

    /** Returns true if field userFilter is set (has been assigned a value) and false otherwise */
    public boolean isSetUserFilter() {
      return this.userFilter != null;
    }

    public void setUserFilterIsSet(boolean value) {
      if (!value) {
        this.userFilter = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case WEB_ID:
        if (value == null) {
          unsetWebId();
        } else {
          setWebId((Integer)value);
        }
        break;

      case TIME_TYPE:
        if (value == null) {
          unsetTimeType();
        } else {
          setTimeType((Integer)value);
        }
        break;

      case TIME:
        if (value == null) {
          unsetTime();
        } else {
          setTime((String)value);
        }
        break;

      case USER_FILTER:
        if (value == null) {
          unsetUserFilter();
        } else {
          setUserFilter((UserFilter)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case WEB_ID:
        return Integer.valueOf(getWebId());

      case TIME_TYPE:
        return Integer.valueOf(getTimeType());

      case TIME:
        return getTime();

      case USER_FILTER:
        return getUserFilter();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case WEB_ID:
        return isSetWebId();
      case TIME_TYPE:
        return isSetTimeType();
      case TIME:
        return isSetTime();
      case USER_FILTER:
        return isSetUserFilter();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getWebStatsForPage_args)
        return this.equals((getWebStatsForPage_args)that);
      return false;
    }

    public boolean equals(getWebStatsForPage_args that) {
      if (that == null)
        return false;

      boolean this_present_webId = true;
      boolean that_present_webId = true;
      if (this_present_webId || that_present_webId) {
        if (!(this_present_webId && that_present_webId))
          return false;
        if (this.webId != that.webId)
          return false;
      }

      boolean this_present_timeType = true;
      boolean that_present_timeType = true;
      if (this_present_timeType || that_present_timeType) {
        if (!(this_present_timeType && that_present_timeType))
          return false;
        if (this.timeType != that.timeType)
          return false;
      }

      boolean this_present_time = true && this.isSetTime();
      boolean that_present_time = true && that.isSetTime();
      if (this_present_time || that_present_time) {
        if (!(this_present_time && that_present_time))
          return false;
        if (!this.time.equals(that.time))
          return false;
      }

      boolean this_present_userFilter = true && this.isSetUserFilter();
      boolean that_present_userFilter = true && that.isSetUserFilter();
      if (this_present_userFilter || that_present_userFilter) {
        if (!(this_present_userFilter && that_present_userFilter))
          return false;
        if (!this.userFilter.equals(that.userFilter))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getWebStatsForPage_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetWebId()).compareTo(other.isSetWebId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetWebId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.webId, other.webId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTimeType()).compareTo(other.isSetTimeType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTimeType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timeType, other.timeType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTime()).compareTo(other.isSetTime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTime()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.time, other.time);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUserFilter()).compareTo(other.isSetUserFilter());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserFilter()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userFilter, other.userFilter);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getWebStatsForPage_args(");
      boolean first = true;

      sb.append("webId:");
      sb.append(this.webId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("timeType:");
      sb.append(this.timeType);
      first = false;
      if (!first) sb.append(", ");
      sb.append("time:");
      if (this.time == null) {
        sb.append("null");
      } else {
        sb.append(this.time);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userFilter:");
      if (this.userFilter == null) {
        sb.append("null");
      } else {
        sb.append(this.userFilter);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (userFilter != null) {
        userFilter.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getWebStatsForPage_argsStandardSchemeFactory implements SchemeFactory {
      public getWebStatsForPage_argsStandardScheme getScheme() {
        return new getWebStatsForPage_argsStandardScheme();
      }
    }

    private static class getWebStatsForPage_argsStandardScheme extends StandardScheme<getWebStatsForPage_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getWebStatsForPage_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // WEB_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.webId = iprot.readI32();
                struct.setWebIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TIME_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.timeType = iprot.readI32();
                struct.setTimeTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // TIME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.time = iprot.readString();
                struct.setTimeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // USER_FILTER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.userFilter = new UserFilter();
                struct.userFilter.read(iprot);
                struct.setUserFilterIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getWebStatsForPage_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(WEB_ID_FIELD_DESC);
        oprot.writeI32(struct.webId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(TIME_TYPE_FIELD_DESC);
        oprot.writeI32(struct.timeType);
        oprot.writeFieldEnd();
        if (struct.time != null) {
          oprot.writeFieldBegin(TIME_FIELD_DESC);
          oprot.writeString(struct.time);
          oprot.writeFieldEnd();
        }
        if (struct.userFilter != null) {
          oprot.writeFieldBegin(USER_FILTER_FIELD_DESC);
          struct.userFilter.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getWebStatsForPage_argsTupleSchemeFactory implements SchemeFactory {
      public getWebStatsForPage_argsTupleScheme getScheme() {
        return new getWebStatsForPage_argsTupleScheme();
      }
    }

    private static class getWebStatsForPage_argsTupleScheme extends TupleScheme<getWebStatsForPage_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getWebStatsForPage_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetWebId()) {
          optionals.set(0);
        }
        if (struct.isSetTimeType()) {
          optionals.set(1);
        }
        if (struct.isSetTime()) {
          optionals.set(2);
        }
        if (struct.isSetUserFilter()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetWebId()) {
          oprot.writeI32(struct.webId);
        }
        if (struct.isSetTimeType()) {
          oprot.writeI32(struct.timeType);
        }
        if (struct.isSetTime()) {
          oprot.writeString(struct.time);
        }
        if (struct.isSetUserFilter()) {
          struct.userFilter.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getWebStatsForPage_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.webId = iprot.readI32();
          struct.setWebIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.timeType = iprot.readI32();
          struct.setTimeTypeIsSet(true);
        }
        if (incoming.get(2)) {
          struct.time = iprot.readString();
          struct.setTimeIsSet(true);
        }
        if (incoming.get(3)) {
          struct.userFilter = new UserFilter();
          struct.userFilter.read(iprot);
          struct.setUserFilterIsSet(true);
        }
      }
    }

  }

  public static class getWebStatsForPage_result implements org.apache.thrift.TBase<getWebStatsForPage_result, getWebStatsForPage_result._Fields>, java.io.Serializable, Cloneable, Comparable<getWebStatsForPage_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getWebStatsForPage_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getWebStatsForPage_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getWebStatsForPage_resultTupleSchemeFactory());
    }

    public List<PageStats> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PageStats.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getWebStatsForPage_result.class, metaDataMap);
    }

    public getWebStatsForPage_result() {
    }

    public getWebStatsForPage_result(
      List<PageStats> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getWebStatsForPage_result(getWebStatsForPage_result other) {
      if (other.isSetSuccess()) {
        List<PageStats> __this__success = new ArrayList<PageStats>(other.success.size());
        for (PageStats other_element : other.success) {
          __this__success.add(new PageStats(other_element));
        }
        this.success = __this__success;
      }
    }

    public getWebStatsForPage_result deepCopy() {
      return new getWebStatsForPage_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<PageStats> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(PageStats elem) {
      if (this.success == null) {
        this.success = new ArrayList<PageStats>();
      }
      this.success.add(elem);
    }

    public List<PageStats> getSuccess() {
      return this.success;
    }

    public getWebStatsForPage_result setSuccess(List<PageStats> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<PageStats>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getWebStatsForPage_result)
        return this.equals((getWebStatsForPage_result)that);
      return false;
    }

    public boolean equals(getWebStatsForPage_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getWebStatsForPage_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getWebStatsForPage_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getWebStatsForPage_resultStandardSchemeFactory implements SchemeFactory {
      public getWebStatsForPage_resultStandardScheme getScheme() {
        return new getWebStatsForPage_resultStandardScheme();
      }
    }

    private static class getWebStatsForPage_resultStandardScheme extends StandardScheme<getWebStatsForPage_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getWebStatsForPage_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list66 = iprot.readListBegin();
                  struct.success = new ArrayList<PageStats>(_list66.size);
                  for (int _i67 = 0; _i67 < _list66.size; ++_i67)
                  {
                    PageStats _elem68;
                    _elem68 = new PageStats();
                    _elem68.read(iprot);
                    struct.success.add(_elem68);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getWebStatsForPage_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (PageStats _iter69 : struct.success)
            {
              _iter69.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getWebStatsForPage_resultTupleSchemeFactory implements SchemeFactory {
      public getWebStatsForPage_resultTupleScheme getScheme() {
        return new getWebStatsForPage_resultTupleScheme();
      }
    }

    private static class getWebStatsForPage_resultTupleScheme extends TupleScheme<getWebStatsForPage_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getWebStatsForPage_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (PageStats _iter70 : struct.success)
            {
              _iter70.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getWebStatsForPage_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list71 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<PageStats>(_list71.size);
            for (int _i72 = 0; _i72 < _list71.size; ++_i72)
            {
              PageStats _elem73;
              _elem73 = new PageStats();
              _elem73.read(iprot);
              struct.success.add(_elem73);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getWebStatsForEntryPage_args implements org.apache.thrift.TBase<getWebStatsForEntryPage_args, getWebStatsForEntryPage_args._Fields>, java.io.Serializable, Cloneable, Comparable<getWebStatsForEntryPage_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getWebStatsForEntryPage_args");

    private static final org.apache.thrift.protocol.TField WEB_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("webId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField TIME_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("timeType", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("time", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField USER_FILTER_FIELD_DESC = new org.apache.thrift.protocol.TField("userFilter", org.apache.thrift.protocol.TType.STRUCT, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getWebStatsForEntryPage_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getWebStatsForEntryPage_argsTupleSchemeFactory());
    }

    public int webId; // required
    public int timeType; // required
    public String time; // required
    public UserFilter userFilter; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      WEB_ID((short)1, "webId"),
      TIME_TYPE((short)2, "timeType"),
      TIME((short)3, "time"),
      USER_FILTER((short)4, "userFilter");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // WEB_ID
            return WEB_ID;
          case 2: // TIME_TYPE
            return TIME_TYPE;
          case 3: // TIME
            return TIME;
          case 4: // USER_FILTER
            return USER_FILTER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __WEBID_ISSET_ID = 0;
    private static final int __TIMETYPE_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.WEB_ID, new org.apache.thrift.meta_data.FieldMetaData("webId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.TIME_TYPE, new org.apache.thrift.meta_data.FieldMetaData("timeType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.TIME, new org.apache.thrift.meta_data.FieldMetaData("time", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.USER_FILTER, new org.apache.thrift.meta_data.FieldMetaData("userFilter", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, UserFilter.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getWebStatsForEntryPage_args.class, metaDataMap);
    }

    public getWebStatsForEntryPage_args() {
    }

    public getWebStatsForEntryPage_args(
      int webId,
      int timeType,
      String time,
      UserFilter userFilter)
    {
      this();
      this.webId = webId;
      setWebIdIsSet(true);
      this.timeType = timeType;
      setTimeTypeIsSet(true);
      this.time = time;
      this.userFilter = userFilter;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getWebStatsForEntryPage_args(getWebStatsForEntryPage_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.webId = other.webId;
      this.timeType = other.timeType;
      if (other.isSetTime()) {
        this.time = other.time;
      }
      if (other.isSetUserFilter()) {
        this.userFilter = new UserFilter(other.userFilter);
      }
    }

    public getWebStatsForEntryPage_args deepCopy() {
      return new getWebStatsForEntryPage_args(this);
    }

    @Override
    public void clear() {
      setWebIdIsSet(false);
      this.webId = 0;
      setTimeTypeIsSet(false);
      this.timeType = 0;
      this.time = null;
      this.userFilter = null;
    }

    public int getWebId() {
      return this.webId;
    }

    public getWebStatsForEntryPage_args setWebId(int webId) {
      this.webId = webId;
      setWebIdIsSet(true);
      return this;
    }

    public void unsetWebId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __WEBID_ISSET_ID);
    }

    /** Returns true if field webId is set (has been assigned a value) and false otherwise */
    public boolean isSetWebId() {
      return EncodingUtils.testBit(__isset_bitfield, __WEBID_ISSET_ID);
    }

    public void setWebIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __WEBID_ISSET_ID, value);
    }

    public int getTimeType() {
      return this.timeType;
    }

    public getWebStatsForEntryPage_args setTimeType(int timeType) {
      this.timeType = timeType;
      setTimeTypeIsSet(true);
      return this;
    }

    public void unsetTimeType() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TIMETYPE_ISSET_ID);
    }

    /** Returns true if field timeType is set (has been assigned a value) and false otherwise */
    public boolean isSetTimeType() {
      return EncodingUtils.testBit(__isset_bitfield, __TIMETYPE_ISSET_ID);
    }

    public void setTimeTypeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TIMETYPE_ISSET_ID, value);
    }

    public String getTime() {
      return this.time;
    }

    public getWebStatsForEntryPage_args setTime(String time) {
      this.time = time;
      return this;
    }

    public void unsetTime() {
      this.time = null;
    }

    /** Returns true if field time is set (has been assigned a value) and false otherwise */
    public boolean isSetTime() {
      return this.time != null;
    }

    public void setTimeIsSet(boolean value) {
      if (!value) {
        this.time = null;
      }
    }

    public UserFilter getUserFilter() {
      return this.userFilter;
    }

    public getWebStatsForEntryPage_args setUserFilter(UserFilter userFilter) {
      this.userFilter = userFilter;
      return this;
    }

    public void unsetUserFilter() {
      this.userFilter = null;
    }

    /** Returns true if field userFilter is set (has been assigned a value) and false otherwise */
    public boolean isSetUserFilter() {
      return this.userFilter != null;
    }

    public void setUserFilterIsSet(boolean value) {
      if (!value) {
        this.userFilter = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case WEB_ID:
        if (value == null) {
          unsetWebId();
        } else {
          setWebId((Integer)value);
        }
        break;

      case TIME_TYPE:
        if (value == null) {
          unsetTimeType();
        } else {
          setTimeType((Integer)value);
        }
        break;

      case TIME:
        if (value == null) {
          unsetTime();
        } else {
          setTime((String)value);
        }
        break;

      case USER_FILTER:
        if (value == null) {
          unsetUserFilter();
        } else {
          setUserFilter((UserFilter)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case WEB_ID:
        return Integer.valueOf(getWebId());

      case TIME_TYPE:
        return Integer.valueOf(getTimeType());

      case TIME:
        return getTime();

      case USER_FILTER:
        return getUserFilter();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case WEB_ID:
        return isSetWebId();
      case TIME_TYPE:
        return isSetTimeType();
      case TIME:
        return isSetTime();
      case USER_FILTER:
        return isSetUserFilter();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getWebStatsForEntryPage_args)
        return this.equals((getWebStatsForEntryPage_args)that);
      return false;
    }

    public boolean equals(getWebStatsForEntryPage_args that) {
      if (that == null)
        return false;

      boolean this_present_webId = true;
      boolean that_present_webId = true;
      if (this_present_webId || that_present_webId) {
        if (!(this_present_webId && that_present_webId))
          return false;
        if (this.webId != that.webId)
          return false;
      }

      boolean this_present_timeType = true;
      boolean that_present_timeType = true;
      if (this_present_timeType || that_present_timeType) {
        if (!(this_present_timeType && that_present_timeType))
          return false;
        if (this.timeType != that.timeType)
          return false;
      }

      boolean this_present_time = true && this.isSetTime();
      boolean that_present_time = true && that.isSetTime();
      if (this_present_time || that_present_time) {
        if (!(this_present_time && that_present_time))
          return false;
        if (!this.time.equals(that.time))
          return false;
      }

      boolean this_present_userFilter = true && this.isSetUserFilter();
      boolean that_present_userFilter = true && that.isSetUserFilter();
      if (this_present_userFilter || that_present_userFilter) {
        if (!(this_present_userFilter && that_present_userFilter))
          return false;
        if (!this.userFilter.equals(that.userFilter))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getWebStatsForEntryPage_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetWebId()).compareTo(other.isSetWebId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetWebId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.webId, other.webId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTimeType()).compareTo(other.isSetTimeType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTimeType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timeType, other.timeType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTime()).compareTo(other.isSetTime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTime()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.time, other.time);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUserFilter()).compareTo(other.isSetUserFilter());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserFilter()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userFilter, other.userFilter);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getWebStatsForEntryPage_args(");
      boolean first = true;

      sb.append("webId:");
      sb.append(this.webId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("timeType:");
      sb.append(this.timeType);
      first = false;
      if (!first) sb.append(", ");
      sb.append("time:");
      if (this.time == null) {
        sb.append("null");
      } else {
        sb.append(this.time);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userFilter:");
      if (this.userFilter == null) {
        sb.append("null");
      } else {
        sb.append(this.userFilter);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (userFilter != null) {
        userFilter.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getWebStatsForEntryPage_argsStandardSchemeFactory implements SchemeFactory {
      public getWebStatsForEntryPage_argsStandardScheme getScheme() {
        return new getWebStatsForEntryPage_argsStandardScheme();
      }
    }

    private static class getWebStatsForEntryPage_argsStandardScheme extends StandardScheme<getWebStatsForEntryPage_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getWebStatsForEntryPage_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // WEB_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.webId = iprot.readI32();
                struct.setWebIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TIME_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.timeType = iprot.readI32();
                struct.setTimeTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // TIME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.time = iprot.readString();
                struct.setTimeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // USER_FILTER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.userFilter = new UserFilter();
                struct.userFilter.read(iprot);
                struct.setUserFilterIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getWebStatsForEntryPage_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(WEB_ID_FIELD_DESC);
        oprot.writeI32(struct.webId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(TIME_TYPE_FIELD_DESC);
        oprot.writeI32(struct.timeType);
        oprot.writeFieldEnd();
        if (struct.time != null) {
          oprot.writeFieldBegin(TIME_FIELD_DESC);
          oprot.writeString(struct.time);
          oprot.writeFieldEnd();
        }
        if (struct.userFilter != null) {
          oprot.writeFieldBegin(USER_FILTER_FIELD_DESC);
          struct.userFilter.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getWebStatsForEntryPage_argsTupleSchemeFactory implements SchemeFactory {
      public getWebStatsForEntryPage_argsTupleScheme getScheme() {
        return new getWebStatsForEntryPage_argsTupleScheme();
      }
    }

    private static class getWebStatsForEntryPage_argsTupleScheme extends TupleScheme<getWebStatsForEntryPage_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getWebStatsForEntryPage_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetWebId()) {
          optionals.set(0);
        }
        if (struct.isSetTimeType()) {
          optionals.set(1);
        }
        if (struct.isSetTime()) {
          optionals.set(2);
        }
        if (struct.isSetUserFilter()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetWebId()) {
          oprot.writeI32(struct.webId);
        }
        if (struct.isSetTimeType()) {
          oprot.writeI32(struct.timeType);
        }
        if (struct.isSetTime()) {
          oprot.writeString(struct.time);
        }
        if (struct.isSetUserFilter()) {
          struct.userFilter.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getWebStatsForEntryPage_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.webId = iprot.readI32();
          struct.setWebIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.timeType = iprot.readI32();
          struct.setTimeTypeIsSet(true);
        }
        if (incoming.get(2)) {
          struct.time = iprot.readString();
          struct.setTimeIsSet(true);
        }
        if (incoming.get(3)) {
          struct.userFilter = new UserFilter();
          struct.userFilter.read(iprot);
          struct.setUserFilterIsSet(true);
        }
      }
    }

  }

  public static class getWebStatsForEntryPage_result implements org.apache.thrift.TBase<getWebStatsForEntryPage_result, getWebStatsForEntryPage_result._Fields>, java.io.Serializable, Cloneable, Comparable<getWebStatsForEntryPage_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getWebStatsForEntryPage_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getWebStatsForEntryPage_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getWebStatsForEntryPage_resultTupleSchemeFactory());
    }

    public List<EntryPageStats> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, EntryPageStats.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getWebStatsForEntryPage_result.class, metaDataMap);
    }

    public getWebStatsForEntryPage_result() {
    }

    public getWebStatsForEntryPage_result(
      List<EntryPageStats> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getWebStatsForEntryPage_result(getWebStatsForEntryPage_result other) {
      if (other.isSetSuccess()) {
        List<EntryPageStats> __this__success = new ArrayList<EntryPageStats>(other.success.size());
        for (EntryPageStats other_element : other.success) {
          __this__success.add(new EntryPageStats(other_element));
        }
        this.success = __this__success;
      }
    }

    public getWebStatsForEntryPage_result deepCopy() {
      return new getWebStatsForEntryPage_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<EntryPageStats> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(EntryPageStats elem) {
      if (this.success == null) {
        this.success = new ArrayList<EntryPageStats>();
      }
      this.success.add(elem);
    }

    public List<EntryPageStats> getSuccess() {
      return this.success;
    }

    public getWebStatsForEntryPage_result setSuccess(List<EntryPageStats> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<EntryPageStats>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getWebStatsForEntryPage_result)
        return this.equals((getWebStatsForEntryPage_result)that);
      return false;
    }

    public boolean equals(getWebStatsForEntryPage_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getWebStatsForEntryPage_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getWebStatsForEntryPage_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getWebStatsForEntryPage_resultStandardSchemeFactory implements SchemeFactory {
      public getWebStatsForEntryPage_resultStandardScheme getScheme() {
        return new getWebStatsForEntryPage_resultStandardScheme();
      }
    }

    private static class getWebStatsForEntryPage_resultStandardScheme extends StandardScheme<getWebStatsForEntryPage_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getWebStatsForEntryPage_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list74 = iprot.readListBegin();
                  struct.success = new ArrayList<EntryPageStats>(_list74.size);
                  for (int _i75 = 0; _i75 < _list74.size; ++_i75)
                  {
                    EntryPageStats _elem76;
                    _elem76 = new EntryPageStats();
                    _elem76.read(iprot);
                    struct.success.add(_elem76);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getWebStatsForEntryPage_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (EntryPageStats _iter77 : struct.success)
            {
              _iter77.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getWebStatsForEntryPage_resultTupleSchemeFactory implements SchemeFactory {
      public getWebStatsForEntryPage_resultTupleScheme getScheme() {
        return new getWebStatsForEntryPage_resultTupleScheme();
      }
    }

    private static class getWebStatsForEntryPage_resultTupleScheme extends TupleScheme<getWebStatsForEntryPage_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getWebStatsForEntryPage_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (EntryPageStats _iter78 : struct.success)
            {
              _iter78.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getWebStatsForEntryPage_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list79 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<EntryPageStats>(_list79.size);
            for (int _i80 = 0; _i80 < _list79.size; ++_i80)
            {
              EntryPageStats _elem81;
              _elem81 = new EntryPageStats();
              _elem81.read(iprot);
              struct.success.add(_elem81);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getWebStatsForSysEnv_args implements org.apache.thrift.TBase<getWebStatsForSysEnv_args, getWebStatsForSysEnv_args._Fields>, java.io.Serializable, Cloneable, Comparable<getWebStatsForSysEnv_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getWebStatsForSysEnv_args");

    private static final org.apache.thrift.protocol.TField WEB_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("webId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField TIME_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("timeType", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("time", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField SYS_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("sysType", org.apache.thrift.protocol.TType.I32, (short)4);
    private static final org.apache.thrift.protocol.TField USER_FILTER_FIELD_DESC = new org.apache.thrift.protocol.TField("userFilter", org.apache.thrift.protocol.TType.STRUCT, (short)5);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getWebStatsForSysEnv_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getWebStatsForSysEnv_argsTupleSchemeFactory());
    }

    public int webId; // required
    public int timeType; // required
    public String time; // required
    public int sysType; // required
    public UserFilter userFilter; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      WEB_ID((short)1, "webId"),
      TIME_TYPE((short)2, "timeType"),
      TIME((short)3, "time"),
      SYS_TYPE((short)4, "sysType"),
      USER_FILTER((short)5, "userFilter");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // WEB_ID
            return WEB_ID;
          case 2: // TIME_TYPE
            return TIME_TYPE;
          case 3: // TIME
            return TIME;
          case 4: // SYS_TYPE
            return SYS_TYPE;
          case 5: // USER_FILTER
            return USER_FILTER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __WEBID_ISSET_ID = 0;
    private static final int __TIMETYPE_ISSET_ID = 1;
    private static final int __SYSTYPE_ISSET_ID = 2;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.WEB_ID, new org.apache.thrift.meta_data.FieldMetaData("webId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.TIME_TYPE, new org.apache.thrift.meta_data.FieldMetaData("timeType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.TIME, new org.apache.thrift.meta_data.FieldMetaData("time", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SYS_TYPE, new org.apache.thrift.meta_data.FieldMetaData("sysType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.USER_FILTER, new org.apache.thrift.meta_data.FieldMetaData("userFilter", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, UserFilter.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getWebStatsForSysEnv_args.class, metaDataMap);
    }

    public getWebStatsForSysEnv_args() {
    }

    public getWebStatsForSysEnv_args(
      int webId,
      int timeType,
      String time,
      int sysType,
      UserFilter userFilter)
    {
      this();
      this.webId = webId;
      setWebIdIsSet(true);
      this.timeType = timeType;
      setTimeTypeIsSet(true);
      this.time = time;
      this.sysType = sysType;
      setSysTypeIsSet(true);
      this.userFilter = userFilter;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getWebStatsForSysEnv_args(getWebStatsForSysEnv_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.webId = other.webId;
      this.timeType = other.timeType;
      if (other.isSetTime()) {
        this.time = other.time;
      }
      this.sysType = other.sysType;
      if (other.isSetUserFilter()) {
        this.userFilter = new UserFilter(other.userFilter);
      }
    }

    public getWebStatsForSysEnv_args deepCopy() {
      return new getWebStatsForSysEnv_args(this);
    }

    @Override
    public void clear() {
      setWebIdIsSet(false);
      this.webId = 0;
      setTimeTypeIsSet(false);
      this.timeType = 0;
      this.time = null;
      setSysTypeIsSet(false);
      this.sysType = 0;
      this.userFilter = null;
    }

    public int getWebId() {
      return this.webId;
    }

    public getWebStatsForSysEnv_args setWebId(int webId) {
      this.webId = webId;
      setWebIdIsSet(true);
      return this;
    }

    public void unsetWebId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __WEBID_ISSET_ID);
    }

    /** Returns true if field webId is set (has been assigned a value) and false otherwise */
    public boolean isSetWebId() {
      return EncodingUtils.testBit(__isset_bitfield, __WEBID_ISSET_ID);
    }

    public void setWebIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __WEBID_ISSET_ID, value);
    }

    public int getTimeType() {
      return this.timeType;
    }

    public getWebStatsForSysEnv_args setTimeType(int timeType) {
      this.timeType = timeType;
      setTimeTypeIsSet(true);
      return this;
    }

    public void unsetTimeType() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TIMETYPE_ISSET_ID);
    }

    /** Returns true if field timeType is set (has been assigned a value) and false otherwise */
    public boolean isSetTimeType() {
      return EncodingUtils.testBit(__isset_bitfield, __TIMETYPE_ISSET_ID);
    }

    public void setTimeTypeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TIMETYPE_ISSET_ID, value);
    }

    public String getTime() {
      return this.time;
    }

    public getWebStatsForSysEnv_args setTime(String time) {
      this.time = time;
      return this;
    }

    public void unsetTime() {
      this.time = null;
    }

    /** Returns true if field time is set (has been assigned a value) and false otherwise */
    public boolean isSetTime() {
      return this.time != null;
    }

    public void setTimeIsSet(boolean value) {
      if (!value) {
        this.time = null;
      }
    }

    public int getSysType() {
      return this.sysType;
    }

    public getWebStatsForSysEnv_args setSysType(int sysType) {
      this.sysType = sysType;
      setSysTypeIsSet(true);
      return this;
    }

    public void unsetSysType() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SYSTYPE_ISSET_ID);
    }

    /** Returns true if field sysType is set (has been assigned a value) and false otherwise */
    public boolean isSetSysType() {
      return EncodingUtils.testBit(__isset_bitfield, __SYSTYPE_ISSET_ID);
    }

    public void setSysTypeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SYSTYPE_ISSET_ID, value);
    }

    public UserFilter getUserFilter() {
      return this.userFilter;
    }

    public getWebStatsForSysEnv_args setUserFilter(UserFilter userFilter) {
      this.userFilter = userFilter;
      return this;
    }

    public void unsetUserFilter() {
      this.userFilter = null;
    }

    /** Returns true if field userFilter is set (has been assigned a value) and false otherwise */
    public boolean isSetUserFilter() {
      return this.userFilter != null;
    }

    public void setUserFilterIsSet(boolean value) {
      if (!value) {
        this.userFilter = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case WEB_ID:
        if (value == null) {
          unsetWebId();
        } else {
          setWebId((Integer)value);
        }
        break;

      case TIME_TYPE:
        if (value == null) {
          unsetTimeType();
        } else {
          setTimeType((Integer)value);
        }
        break;

      case TIME:
        if (value == null) {
          unsetTime();
        } else {
          setTime((String)value);
        }
        break;

      case SYS_TYPE:
        if (value == null) {
          unsetSysType();
        } else {
          setSysType((Integer)value);
        }
        break;

      case USER_FILTER:
        if (value == null) {
          unsetUserFilter();
        } else {
          setUserFilter((UserFilter)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case WEB_ID:
        return Integer.valueOf(getWebId());

      case TIME_TYPE:
        return Integer.valueOf(getTimeType());

      case TIME:
        return getTime();

      case SYS_TYPE:
        return Integer.valueOf(getSysType());

      case USER_FILTER:
        return getUserFilter();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case WEB_ID:
        return isSetWebId();
      case TIME_TYPE:
        return isSetTimeType();
      case TIME:
        return isSetTime();
      case SYS_TYPE:
        return isSetSysType();
      case USER_FILTER:
        return isSetUserFilter();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getWebStatsForSysEnv_args)
        return this.equals((getWebStatsForSysEnv_args)that);
      return false;
    }

    public boolean equals(getWebStatsForSysEnv_args that) {
      if (that == null)
        return false;

      boolean this_present_webId = true;
      boolean that_present_webId = true;
      if (this_present_webId || that_present_webId) {
        if (!(this_present_webId && that_present_webId))
          return false;
        if (this.webId != that.webId)
          return false;
      }

      boolean this_present_timeType = true;
      boolean that_present_timeType = true;
      if (this_present_timeType || that_present_timeType) {
        if (!(this_present_timeType && that_present_timeType))
          return false;
        if (this.timeType != that.timeType)
          return false;
      }

      boolean this_present_time = true && this.isSetTime();
      boolean that_present_time = true && that.isSetTime();
      if (this_present_time || that_present_time) {
        if (!(this_present_time && that_present_time))
          return false;
        if (!this.time.equals(that.time))
          return false;
      }

      boolean this_present_sysType = true;
      boolean that_present_sysType = true;
      if (this_present_sysType || that_present_sysType) {
        if (!(this_present_sysType && that_present_sysType))
          return false;
        if (this.sysType != that.sysType)
          return false;
      }

      boolean this_present_userFilter = true && this.isSetUserFilter();
      boolean that_present_userFilter = true && that.isSetUserFilter();
      if (this_present_userFilter || that_present_userFilter) {
        if (!(this_present_userFilter && that_present_userFilter))
          return false;
        if (!this.userFilter.equals(that.userFilter))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getWebStatsForSysEnv_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetWebId()).compareTo(other.isSetWebId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetWebId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.webId, other.webId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTimeType()).compareTo(other.isSetTimeType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTimeType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timeType, other.timeType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTime()).compareTo(other.isSetTime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTime()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.time, other.time);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSysType()).compareTo(other.isSetSysType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSysType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sysType, other.sysType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUserFilter()).compareTo(other.isSetUserFilter());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserFilter()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userFilter, other.userFilter);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getWebStatsForSysEnv_args(");
      boolean first = true;

      sb.append("webId:");
      sb.append(this.webId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("timeType:");
      sb.append(this.timeType);
      first = false;
      if (!first) sb.append(", ");
      sb.append("time:");
      if (this.time == null) {
        sb.append("null");
      } else {
        sb.append(this.time);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("sysType:");
      sb.append(this.sysType);
      first = false;
      if (!first) sb.append(", ");
      sb.append("userFilter:");
      if (this.userFilter == null) {
        sb.append("null");
      } else {
        sb.append(this.userFilter);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (userFilter != null) {
        userFilter.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getWebStatsForSysEnv_argsStandardSchemeFactory implements SchemeFactory {
      public getWebStatsForSysEnv_argsStandardScheme getScheme() {
        return new getWebStatsForSysEnv_argsStandardScheme();
      }
    }

    private static class getWebStatsForSysEnv_argsStandardScheme extends StandardScheme<getWebStatsForSysEnv_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getWebStatsForSysEnv_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // WEB_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.webId = iprot.readI32();
                struct.setWebIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TIME_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.timeType = iprot.readI32();
                struct.setTimeTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // TIME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.time = iprot.readString();
                struct.setTimeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // SYS_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.sysType = iprot.readI32();
                struct.setSysTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // USER_FILTER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.userFilter = new UserFilter();
                struct.userFilter.read(iprot);
                struct.setUserFilterIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getWebStatsForSysEnv_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(WEB_ID_FIELD_DESC);
        oprot.writeI32(struct.webId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(TIME_TYPE_FIELD_DESC);
        oprot.writeI32(struct.timeType);
        oprot.writeFieldEnd();
        if (struct.time != null) {
          oprot.writeFieldBegin(TIME_FIELD_DESC);
          oprot.writeString(struct.time);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(SYS_TYPE_FIELD_DESC);
        oprot.writeI32(struct.sysType);
        oprot.writeFieldEnd();
        if (struct.userFilter != null) {
          oprot.writeFieldBegin(USER_FILTER_FIELD_DESC);
          struct.userFilter.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getWebStatsForSysEnv_argsTupleSchemeFactory implements SchemeFactory {
      public getWebStatsForSysEnv_argsTupleScheme getScheme() {
        return new getWebStatsForSysEnv_argsTupleScheme();
      }
    }

    private static class getWebStatsForSysEnv_argsTupleScheme extends TupleScheme<getWebStatsForSysEnv_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getWebStatsForSysEnv_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetWebId()) {
          optionals.set(0);
        }
        if (struct.isSetTimeType()) {
          optionals.set(1);
        }
        if (struct.isSetTime()) {
          optionals.set(2);
        }
        if (struct.isSetSysType()) {
          optionals.set(3);
        }
        if (struct.isSetUserFilter()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetWebId()) {
          oprot.writeI32(struct.webId);
        }
        if (struct.isSetTimeType()) {
          oprot.writeI32(struct.timeType);
        }
        if (struct.isSetTime()) {
          oprot.writeString(struct.time);
        }
        if (struct.isSetSysType()) {
          oprot.writeI32(struct.sysType);
        }
        if (struct.isSetUserFilter()) {
          struct.userFilter.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getWebStatsForSysEnv_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.webId = iprot.readI32();
          struct.setWebIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.timeType = iprot.readI32();
          struct.setTimeTypeIsSet(true);
        }
        if (incoming.get(2)) {
          struct.time = iprot.readString();
          struct.setTimeIsSet(true);
        }
        if (incoming.get(3)) {
          struct.sysType = iprot.readI32();
          struct.setSysTypeIsSet(true);
        }
        if (incoming.get(4)) {
          struct.userFilter = new UserFilter();
          struct.userFilter.read(iprot);
          struct.setUserFilterIsSet(true);
        }
      }
    }

  }

  public static class getWebStatsForSysEnv_result implements org.apache.thrift.TBase<getWebStatsForSysEnv_result, getWebStatsForSysEnv_result._Fields>, java.io.Serializable, Cloneable, Comparable<getWebStatsForSysEnv_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getWebStatsForSysEnv_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getWebStatsForSysEnv_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getWebStatsForSysEnv_resultTupleSchemeFactory());
    }

    public List<WebStats> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, WebStats.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getWebStatsForSysEnv_result.class, metaDataMap);
    }

    public getWebStatsForSysEnv_result() {
    }

    public getWebStatsForSysEnv_result(
      List<WebStats> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getWebStatsForSysEnv_result(getWebStatsForSysEnv_result other) {
      if (other.isSetSuccess()) {
        List<WebStats> __this__success = new ArrayList<WebStats>(other.success.size());
        for (WebStats other_element : other.success) {
          __this__success.add(new WebStats(other_element));
        }
        this.success = __this__success;
      }
    }

    public getWebStatsForSysEnv_result deepCopy() {
      return new getWebStatsForSysEnv_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<WebStats> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(WebStats elem) {
      if (this.success == null) {
        this.success = new ArrayList<WebStats>();
      }
      this.success.add(elem);
    }

    public List<WebStats> getSuccess() {
      return this.success;
    }

    public getWebStatsForSysEnv_result setSuccess(List<WebStats> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<WebStats>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getWebStatsForSysEnv_result)
        return this.equals((getWebStatsForSysEnv_result)that);
      return false;
    }

    public boolean equals(getWebStatsForSysEnv_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getWebStatsForSysEnv_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getWebStatsForSysEnv_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getWebStatsForSysEnv_resultStandardSchemeFactory implements SchemeFactory {
      public getWebStatsForSysEnv_resultStandardScheme getScheme() {
        return new getWebStatsForSysEnv_resultStandardScheme();
      }
    }

    private static class getWebStatsForSysEnv_resultStandardScheme extends StandardScheme<getWebStatsForSysEnv_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getWebStatsForSysEnv_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list82 = iprot.readListBegin();
                  struct.success = new ArrayList<WebStats>(_list82.size);
                  for (int _i83 = 0; _i83 < _list82.size; ++_i83)
                  {
                    WebStats _elem84;
                    _elem84 = new WebStats();
                    _elem84.read(iprot);
                    struct.success.add(_elem84);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getWebStatsForSysEnv_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (WebStats _iter85 : struct.success)
            {
              _iter85.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getWebStatsForSysEnv_resultTupleSchemeFactory implements SchemeFactory {
      public getWebStatsForSysEnv_resultTupleScheme getScheme() {
        return new getWebStatsForSysEnv_resultTupleScheme();
      }
    }

    private static class getWebStatsForSysEnv_resultTupleScheme extends TupleScheme<getWebStatsForSysEnv_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getWebStatsForSysEnv_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (WebStats _iter86 : struct.success)
            {
              _iter86.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getWebStatsForSysEnv_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list87 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<WebStats>(_list87.size);
            for (int _i88 = 0; _i88 < _list87.size; ++_i88)
            {
              WebStats _elem89;
              _elem89 = new WebStats();
              _elem89.read(iprot);
              struct.success.add(_elem89);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getWebStatsForHour_args implements org.apache.thrift.TBase<getWebStatsForHour_args, getWebStatsForHour_args._Fields>, java.io.Serializable, Cloneable, Comparable<getWebStatsForHour_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getWebStatsForHour_args");

    private static final org.apache.thrift.protocol.TField WEB_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("webId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField TIME_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("timeType", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("time", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField USER_FILTER_FIELD_DESC = new org.apache.thrift.protocol.TField("userFilter", org.apache.thrift.protocol.TType.STRUCT, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getWebStatsForHour_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getWebStatsForHour_argsTupleSchemeFactory());
    }

    public int webId; // required
    public int timeType; // required
    public String time; // required
    public UserFilter userFilter; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      WEB_ID((short)1, "webId"),
      TIME_TYPE((short)2, "timeType"),
      TIME((short)3, "time"),
      USER_FILTER((short)4, "userFilter");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // WEB_ID
            return WEB_ID;
          case 2: // TIME_TYPE
            return TIME_TYPE;
          case 3: // TIME
            return TIME;
          case 4: // USER_FILTER
            return USER_FILTER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __WEBID_ISSET_ID = 0;
    private static final int __TIMETYPE_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.WEB_ID, new org.apache.thrift.meta_data.FieldMetaData("webId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.TIME_TYPE, new org.apache.thrift.meta_data.FieldMetaData("timeType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.TIME, new org.apache.thrift.meta_data.FieldMetaData("time", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.USER_FILTER, new org.apache.thrift.meta_data.FieldMetaData("userFilter", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, UserFilter.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getWebStatsForHour_args.class, metaDataMap);
    }

    public getWebStatsForHour_args() {
    }

    public getWebStatsForHour_args(
      int webId,
      int timeType,
      String time,
      UserFilter userFilter)
    {
      this();
      this.webId = webId;
      setWebIdIsSet(true);
      this.timeType = timeType;
      setTimeTypeIsSet(true);
      this.time = time;
      this.userFilter = userFilter;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getWebStatsForHour_args(getWebStatsForHour_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.webId = other.webId;
      this.timeType = other.timeType;
      if (other.isSetTime()) {
        this.time = other.time;
      }
      if (other.isSetUserFilter()) {
        this.userFilter = new UserFilter(other.userFilter);
      }
    }

    public getWebStatsForHour_args deepCopy() {
      return new getWebStatsForHour_args(this);
    }

    @Override
    public void clear() {
      setWebIdIsSet(false);
      this.webId = 0;
      setTimeTypeIsSet(false);
      this.timeType = 0;
      this.time = null;
      this.userFilter = null;
    }

    public int getWebId() {
      return this.webId;
    }

    public getWebStatsForHour_args setWebId(int webId) {
      this.webId = webId;
      setWebIdIsSet(true);
      return this;
    }

    public void unsetWebId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __WEBID_ISSET_ID);
    }

    /** Returns true if field webId is set (has been assigned a value) and false otherwise */
    public boolean isSetWebId() {
      return EncodingUtils.testBit(__isset_bitfield, __WEBID_ISSET_ID);
    }

    public void setWebIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __WEBID_ISSET_ID, value);
    }

    public int getTimeType() {
      return this.timeType;
    }

    public getWebStatsForHour_args setTimeType(int timeType) {
      this.timeType = timeType;
      setTimeTypeIsSet(true);
      return this;
    }

    public void unsetTimeType() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TIMETYPE_ISSET_ID);
    }

    /** Returns true if field timeType is set (has been assigned a value) and false otherwise */
    public boolean isSetTimeType() {
      return EncodingUtils.testBit(__isset_bitfield, __TIMETYPE_ISSET_ID);
    }

    public void setTimeTypeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TIMETYPE_ISSET_ID, value);
    }

    public String getTime() {
      return this.time;
    }

    public getWebStatsForHour_args setTime(String time) {
      this.time = time;
      return this;
    }

    public void unsetTime() {
      this.time = null;
    }

    /** Returns true if field time is set (has been assigned a value) and false otherwise */
    public boolean isSetTime() {
      return this.time != null;
    }

    public void setTimeIsSet(boolean value) {
      if (!value) {
        this.time = null;
      }
    }

    public UserFilter getUserFilter() {
      return this.userFilter;
    }

    public getWebStatsForHour_args setUserFilter(UserFilter userFilter) {
      this.userFilter = userFilter;
      return this;
    }

    public void unsetUserFilter() {
      this.userFilter = null;
    }

    /** Returns true if field userFilter is set (has been assigned a value) and false otherwise */
    public boolean isSetUserFilter() {
      return this.userFilter != null;
    }

    public void setUserFilterIsSet(boolean value) {
      if (!value) {
        this.userFilter = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case WEB_ID:
        if (value == null) {
          unsetWebId();
        } else {
          setWebId((Integer)value);
        }
        break;

      case TIME_TYPE:
        if (value == null) {
          unsetTimeType();
        } else {
          setTimeType((Integer)value);
        }
        break;

      case TIME:
        if (value == null) {
          unsetTime();
        } else {
          setTime((String)value);
        }
        break;

      case USER_FILTER:
        if (value == null) {
          unsetUserFilter();
        } else {
          setUserFilter((UserFilter)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case WEB_ID:
        return Integer.valueOf(getWebId());

      case TIME_TYPE:
        return Integer.valueOf(getTimeType());

      case TIME:
        return getTime();

      case USER_FILTER:
        return getUserFilter();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case WEB_ID:
        return isSetWebId();
      case TIME_TYPE:
        return isSetTimeType();
      case TIME:
        return isSetTime();
      case USER_FILTER:
        return isSetUserFilter();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getWebStatsForHour_args)
        return this.equals((getWebStatsForHour_args)that);
      return false;
    }

    public boolean equals(getWebStatsForHour_args that) {
      if (that == null)
        return false;

      boolean this_present_webId = true;
      boolean that_present_webId = true;
      if (this_present_webId || that_present_webId) {
        if (!(this_present_webId && that_present_webId))
          return false;
        if (this.webId != that.webId)
          return false;
      }

      boolean this_present_timeType = true;
      boolean that_present_timeType = true;
      if (this_present_timeType || that_present_timeType) {
        if (!(this_present_timeType && that_present_timeType))
          return false;
        if (this.timeType != that.timeType)
          return false;
      }

      boolean this_present_time = true && this.isSetTime();
      boolean that_present_time = true && that.isSetTime();
      if (this_present_time || that_present_time) {
        if (!(this_present_time && that_present_time))
          return false;
        if (!this.time.equals(that.time))
          return false;
      }

      boolean this_present_userFilter = true && this.isSetUserFilter();
      boolean that_present_userFilter = true && that.isSetUserFilter();
      if (this_present_userFilter || that_present_userFilter) {
        if (!(this_present_userFilter && that_present_userFilter))
          return false;
        if (!this.userFilter.equals(that.userFilter))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getWebStatsForHour_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetWebId()).compareTo(other.isSetWebId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetWebId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.webId, other.webId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTimeType()).compareTo(other.isSetTimeType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTimeType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timeType, other.timeType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTime()).compareTo(other.isSetTime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTime()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.time, other.time);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUserFilter()).compareTo(other.isSetUserFilter());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserFilter()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userFilter, other.userFilter);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getWebStatsForHour_args(");
      boolean first = true;

      sb.append("webId:");
      sb.append(this.webId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("timeType:");
      sb.append(this.timeType);
      first = false;
      if (!first) sb.append(", ");
      sb.append("time:");
      if (this.time == null) {
        sb.append("null");
      } else {
        sb.append(this.time);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userFilter:");
      if (this.userFilter == null) {
        sb.append("null");
      } else {
        sb.append(this.userFilter);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (userFilter != null) {
        userFilter.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getWebStatsForHour_argsStandardSchemeFactory implements SchemeFactory {
      public getWebStatsForHour_argsStandardScheme getScheme() {
        return new getWebStatsForHour_argsStandardScheme();
      }
    }

    private static class getWebStatsForHour_argsStandardScheme extends StandardScheme<getWebStatsForHour_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getWebStatsForHour_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // WEB_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.webId = iprot.readI32();
                struct.setWebIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TIME_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.timeType = iprot.readI32();
                struct.setTimeTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // TIME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.time = iprot.readString();
                struct.setTimeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // USER_FILTER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.userFilter = new UserFilter();
                struct.userFilter.read(iprot);
                struct.setUserFilterIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getWebStatsForHour_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(WEB_ID_FIELD_DESC);
        oprot.writeI32(struct.webId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(TIME_TYPE_FIELD_DESC);
        oprot.writeI32(struct.timeType);
        oprot.writeFieldEnd();
        if (struct.time != null) {
          oprot.writeFieldBegin(TIME_FIELD_DESC);
          oprot.writeString(struct.time);
          oprot.writeFieldEnd();
        }
        if (struct.userFilter != null) {
          oprot.writeFieldBegin(USER_FILTER_FIELD_DESC);
          struct.userFilter.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getWebStatsForHour_argsTupleSchemeFactory implements SchemeFactory {
      public getWebStatsForHour_argsTupleScheme getScheme() {
        return new getWebStatsForHour_argsTupleScheme();
      }
    }

    private static class getWebStatsForHour_argsTupleScheme extends TupleScheme<getWebStatsForHour_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getWebStatsForHour_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetWebId()) {
          optionals.set(0);
        }
        if (struct.isSetTimeType()) {
          optionals.set(1);
        }
        if (struct.isSetTime()) {
          optionals.set(2);
        }
        if (struct.isSetUserFilter()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetWebId()) {
          oprot.writeI32(struct.webId);
        }
        if (struct.isSetTimeType()) {
          oprot.writeI32(struct.timeType);
        }
        if (struct.isSetTime()) {
          oprot.writeString(struct.time);
        }
        if (struct.isSetUserFilter()) {
          struct.userFilter.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getWebStatsForHour_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.webId = iprot.readI32();
          struct.setWebIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.timeType = iprot.readI32();
          struct.setTimeTypeIsSet(true);
        }
        if (incoming.get(2)) {
          struct.time = iprot.readString();
          struct.setTimeIsSet(true);
        }
        if (incoming.get(3)) {
          struct.userFilter = new UserFilter();
          struct.userFilter.read(iprot);
          struct.setUserFilterIsSet(true);
        }
      }
    }

  }

  public static class getWebStatsForHour_result implements org.apache.thrift.TBase<getWebStatsForHour_result, getWebStatsForHour_result._Fields>, java.io.Serializable, Cloneable, Comparable<getWebStatsForHour_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getWebStatsForHour_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getWebStatsForHour_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getWebStatsForHour_resultTupleSchemeFactory());
    }

    public List<WebStats> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, WebStats.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getWebStatsForHour_result.class, metaDataMap);
    }

    public getWebStatsForHour_result() {
    }

    public getWebStatsForHour_result(
      List<WebStats> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getWebStatsForHour_result(getWebStatsForHour_result other) {
      if (other.isSetSuccess()) {
        List<WebStats> __this__success = new ArrayList<WebStats>(other.success.size());
        for (WebStats other_element : other.success) {
          __this__success.add(new WebStats(other_element));
        }
        this.success = __this__success;
      }
    }

    public getWebStatsForHour_result deepCopy() {
      return new getWebStatsForHour_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<WebStats> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(WebStats elem) {
      if (this.success == null) {
        this.success = new ArrayList<WebStats>();
      }
      this.success.add(elem);
    }

    public List<WebStats> getSuccess() {
      return this.success;
    }

    public getWebStatsForHour_result setSuccess(List<WebStats> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<WebStats>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getWebStatsForHour_result)
        return this.equals((getWebStatsForHour_result)that);
      return false;
    }

    public boolean equals(getWebStatsForHour_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getWebStatsForHour_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getWebStatsForHour_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getWebStatsForHour_resultStandardSchemeFactory implements SchemeFactory {
      public getWebStatsForHour_resultStandardScheme getScheme() {
        return new getWebStatsForHour_resultStandardScheme();
      }
    }

    private static class getWebStatsForHour_resultStandardScheme extends StandardScheme<getWebStatsForHour_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getWebStatsForHour_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list90 = iprot.readListBegin();
                  struct.success = new ArrayList<WebStats>(_list90.size);
                  for (int _i91 = 0; _i91 < _list90.size; ++_i91)
                  {
                    WebStats _elem92;
                    _elem92 = new WebStats();
                    _elem92.read(iprot);
                    struct.success.add(_elem92);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getWebStatsForHour_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (WebStats _iter93 : struct.success)
            {
              _iter93.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getWebStatsForHour_resultTupleSchemeFactory implements SchemeFactory {
      public getWebStatsForHour_resultTupleScheme getScheme() {
        return new getWebStatsForHour_resultTupleScheme();
      }
    }

    private static class getWebStatsForHour_resultTupleScheme extends TupleScheme<getWebStatsForHour_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getWebStatsForHour_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (WebStats _iter94 : struct.success)
            {
              _iter94.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getWebStatsForHour_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list95 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<WebStats>(_list95.size);
            for (int _i96 = 0; _i96 < _list95.size; ++_i96)
            {
              WebStats _elem97;
              _elem97 = new WebStats();
              _elem97.read(iprot);
              struct.success.add(_elem97);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}

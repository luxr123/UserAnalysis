/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.tracker.api.thrift.web;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * 网站统计度量指标
 */
public class WebStats implements org.apache.thrift.TBase<WebStats, WebStats._Fields>, java.io.Serializable, Cloneable, Comparable<WebStats> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("WebStats");

  private static final org.apache.thrift.protocol.TField TIMES_FIELD_DESC = new org.apache.thrift.protocol.TField("times", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField SHOW_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("showName", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField FIELD_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("fieldId", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField PV_FIELD_DESC = new org.apache.thrift.protocol.TField("pv", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField UV_FIELD_DESC = new org.apache.thrift.protocol.TField("uv", org.apache.thrift.protocol.TType.I64, (short)5);
  private static final org.apache.thrift.protocol.TField IP_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("ipCount", org.apache.thrift.protocol.TType.I64, (short)6);
  private static final org.apache.thrift.protocol.TField VISIT_TIMES_FIELD_DESC = new org.apache.thrift.protocol.TField("visitTimes", org.apache.thrift.protocol.TType.I64, (short)7);
  private static final org.apache.thrift.protocol.TField JUMP_RATE_FIELD_DESC = new org.apache.thrift.protocol.TField("jumpRate", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField AVG_VISIT_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("avgVisitTime", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField AVG_VISIT_PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("avgVisitPage", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField PV_RATE_FIELD_DESC = new org.apache.thrift.protocol.TField("pvRate", org.apache.thrift.protocol.TType.STRING, (short)11);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new WebStatsStandardSchemeFactory());
    schemes.put(TupleScheme.class, new WebStatsTupleSchemeFactory());
  }

  public String times; // optional
  public String showName; // optional
  public int fieldId; // optional
  public long pv; // optional
  public long uv; // optional
  public long ipCount; // optional
  public long visitTimes; // optional
  public String jumpRate; // optional
  public String avgVisitTime; // optional
  public String avgVisitPage; // optional
  public String pvRate; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TIMES((short)1, "times"),
    SHOW_NAME((short)2, "showName"),
    FIELD_ID((short)3, "fieldId"),
    PV((short)4, "pv"),
    UV((short)5, "uv"),
    IP_COUNT((short)6, "ipCount"),
    VISIT_TIMES((short)7, "visitTimes"),
    JUMP_RATE((short)8, "jumpRate"),
    AVG_VISIT_TIME((short)9, "avgVisitTime"),
    AVG_VISIT_PAGE((short)10, "avgVisitPage"),
    PV_RATE((short)11, "pvRate");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TIMES
          return TIMES;
        case 2: // SHOW_NAME
          return SHOW_NAME;
        case 3: // FIELD_ID
          return FIELD_ID;
        case 4: // PV
          return PV;
        case 5: // UV
          return UV;
        case 6: // IP_COUNT
          return IP_COUNT;
        case 7: // VISIT_TIMES
          return VISIT_TIMES;
        case 8: // JUMP_RATE
          return JUMP_RATE;
        case 9: // AVG_VISIT_TIME
          return AVG_VISIT_TIME;
        case 10: // AVG_VISIT_PAGE
          return AVG_VISIT_PAGE;
        case 11: // PV_RATE
          return PV_RATE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __FIELDID_ISSET_ID = 0;
  private static final int __PV_ISSET_ID = 1;
  private static final int __UV_ISSET_ID = 2;
  private static final int __IPCOUNT_ISSET_ID = 3;
  private static final int __VISITTIMES_ISSET_ID = 4;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.TIMES,_Fields.SHOW_NAME,_Fields.FIELD_ID,_Fields.PV,_Fields.UV,_Fields.IP_COUNT,_Fields.VISIT_TIMES,_Fields.JUMP_RATE,_Fields.AVG_VISIT_TIME,_Fields.AVG_VISIT_PAGE,_Fields.PV_RATE};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TIMES, new org.apache.thrift.meta_data.FieldMetaData("times", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SHOW_NAME, new org.apache.thrift.meta_data.FieldMetaData("showName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FIELD_ID, new org.apache.thrift.meta_data.FieldMetaData("fieldId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PV, new org.apache.thrift.meta_data.FieldMetaData("pv", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.UV, new org.apache.thrift.meta_data.FieldMetaData("uv", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.IP_COUNT, new org.apache.thrift.meta_data.FieldMetaData("ipCount", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.VISIT_TIMES, new org.apache.thrift.meta_data.FieldMetaData("visitTimes", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.JUMP_RATE, new org.apache.thrift.meta_data.FieldMetaData("jumpRate", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.AVG_VISIT_TIME, new org.apache.thrift.meta_data.FieldMetaData("avgVisitTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.AVG_VISIT_PAGE, new org.apache.thrift.meta_data.FieldMetaData("avgVisitPage", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PV_RATE, new org.apache.thrift.meta_data.FieldMetaData("pvRate", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(WebStats.class, metaDataMap);
  }

  public WebStats() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public WebStats(WebStats other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetTimes()) {
      this.times = other.times;
    }
    if (other.isSetShowName()) {
      this.showName = other.showName;
    }
    this.fieldId = other.fieldId;
    this.pv = other.pv;
    this.uv = other.uv;
    this.ipCount = other.ipCount;
    this.visitTimes = other.visitTimes;
    if (other.isSetJumpRate()) {
      this.jumpRate = other.jumpRate;
    }
    if (other.isSetAvgVisitTime()) {
      this.avgVisitTime = other.avgVisitTime;
    }
    if (other.isSetAvgVisitPage()) {
      this.avgVisitPage = other.avgVisitPage;
    }
    if (other.isSetPvRate()) {
      this.pvRate = other.pvRate;
    }
  }

  public WebStats deepCopy() {
    return new WebStats(this);
  }

  @Override
  public void clear() {
    this.times = null;
    this.showName = null;
    setFieldIdIsSet(false);
    this.fieldId = 0;
    setPvIsSet(false);
    this.pv = 0;
    setUvIsSet(false);
    this.uv = 0;
    setIpCountIsSet(false);
    this.ipCount = 0;
    setVisitTimesIsSet(false);
    this.visitTimes = 0;
    this.jumpRate = null;
    this.avgVisitTime = null;
    this.avgVisitPage = null;
    this.pvRate = null;
  }

  public String getTimes() {
    return this.times;
  }

  public WebStats setTimes(String times) {
    this.times = times;
    return this;
  }

  public void unsetTimes() {
    this.times = null;
  }

  /** Returns true if field times is set (has been assigned a value) and false otherwise */
  public boolean isSetTimes() {
    return this.times != null;
  }

  public void setTimesIsSet(boolean value) {
    if (!value) {
      this.times = null;
    }
  }

  public String getShowName() {
    return this.showName;
  }

  public WebStats setShowName(String showName) {
    this.showName = showName;
    return this;
  }

  public void unsetShowName() {
    this.showName = null;
  }

  /** Returns true if field showName is set (has been assigned a value) and false otherwise */
  public boolean isSetShowName() {
    return this.showName != null;
  }

  public void setShowNameIsSet(boolean value) {
    if (!value) {
      this.showName = null;
    }
  }

  public int getFieldId() {
    return this.fieldId;
  }

  public WebStats setFieldId(int fieldId) {
    this.fieldId = fieldId;
    setFieldIdIsSet(true);
    return this;
  }

  public void unsetFieldId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FIELDID_ISSET_ID);
  }

  /** Returns true if field fieldId is set (has been assigned a value) and false otherwise */
  public boolean isSetFieldId() {
    return EncodingUtils.testBit(__isset_bitfield, __FIELDID_ISSET_ID);
  }

  public void setFieldIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FIELDID_ISSET_ID, value);
  }

  public long getPv() {
    return this.pv;
  }

  public WebStats setPv(long pv) {
    this.pv = pv;
    setPvIsSet(true);
    return this;
  }

  public void unsetPv() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PV_ISSET_ID);
  }

  /** Returns true if field pv is set (has been assigned a value) and false otherwise */
  public boolean isSetPv() {
    return EncodingUtils.testBit(__isset_bitfield, __PV_ISSET_ID);
  }

  public void setPvIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PV_ISSET_ID, value);
  }

  public long getUv() {
    return this.uv;
  }

  public WebStats setUv(long uv) {
    this.uv = uv;
    setUvIsSet(true);
    return this;
  }

  public void unsetUv() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UV_ISSET_ID);
  }

  /** Returns true if field uv is set (has been assigned a value) and false otherwise */
  public boolean isSetUv() {
    return EncodingUtils.testBit(__isset_bitfield, __UV_ISSET_ID);
  }

  public void setUvIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UV_ISSET_ID, value);
  }

  public long getIpCount() {
    return this.ipCount;
  }

  public WebStats setIpCount(long ipCount) {
    this.ipCount = ipCount;
    setIpCountIsSet(true);
    return this;
  }

  public void unsetIpCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __IPCOUNT_ISSET_ID);
  }

  /** Returns true if field ipCount is set (has been assigned a value) and false otherwise */
  public boolean isSetIpCount() {
    return EncodingUtils.testBit(__isset_bitfield, __IPCOUNT_ISSET_ID);
  }

  public void setIpCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __IPCOUNT_ISSET_ID, value);
  }

  public long getVisitTimes() {
    return this.visitTimes;
  }

  public WebStats setVisitTimes(long visitTimes) {
    this.visitTimes = visitTimes;
    setVisitTimesIsSet(true);
    return this;
  }

  public void unsetVisitTimes() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VISITTIMES_ISSET_ID);
  }

  /** Returns true if field visitTimes is set (has been assigned a value) and false otherwise */
  public boolean isSetVisitTimes() {
    return EncodingUtils.testBit(__isset_bitfield, __VISITTIMES_ISSET_ID);
  }

  public void setVisitTimesIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VISITTIMES_ISSET_ID, value);
  }

  public String getJumpRate() {
    return this.jumpRate;
  }

  public WebStats setJumpRate(String jumpRate) {
    this.jumpRate = jumpRate;
    return this;
  }

  public void unsetJumpRate() {
    this.jumpRate = null;
  }

  /** Returns true if field jumpRate is set (has been assigned a value) and false otherwise */
  public boolean isSetJumpRate() {
    return this.jumpRate != null;
  }

  public void setJumpRateIsSet(boolean value) {
    if (!value) {
      this.jumpRate = null;
    }
  }

  public String getAvgVisitTime() {
    return this.avgVisitTime;
  }

  public WebStats setAvgVisitTime(String avgVisitTime) {
    this.avgVisitTime = avgVisitTime;
    return this;
  }

  public void unsetAvgVisitTime() {
    this.avgVisitTime = null;
  }

  /** Returns true if field avgVisitTime is set (has been assigned a value) and false otherwise */
  public boolean isSetAvgVisitTime() {
    return this.avgVisitTime != null;
  }

  public void setAvgVisitTimeIsSet(boolean value) {
    if (!value) {
      this.avgVisitTime = null;
    }
  }

  public String getAvgVisitPage() {
    return this.avgVisitPage;
  }

  public WebStats setAvgVisitPage(String avgVisitPage) {
    this.avgVisitPage = avgVisitPage;
    return this;
  }

  public void unsetAvgVisitPage() {
    this.avgVisitPage = null;
  }

  /** Returns true if field avgVisitPage is set (has been assigned a value) and false otherwise */
  public boolean isSetAvgVisitPage() {
    return this.avgVisitPage != null;
  }

  public void setAvgVisitPageIsSet(boolean value) {
    if (!value) {
      this.avgVisitPage = null;
    }
  }

  public String getPvRate() {
    return this.pvRate;
  }

  public WebStats setPvRate(String pvRate) {
    this.pvRate = pvRate;
    return this;
  }

  public void unsetPvRate() {
    this.pvRate = null;
  }

  /** Returns true if field pvRate is set (has been assigned a value) and false otherwise */
  public boolean isSetPvRate() {
    return this.pvRate != null;
  }

  public void setPvRateIsSet(boolean value) {
    if (!value) {
      this.pvRate = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TIMES:
      if (value == null) {
        unsetTimes();
      } else {
        setTimes((String)value);
      }
      break;

    case SHOW_NAME:
      if (value == null) {
        unsetShowName();
      } else {
        setShowName((String)value);
      }
      break;

    case FIELD_ID:
      if (value == null) {
        unsetFieldId();
      } else {
        setFieldId((Integer)value);
      }
      break;

    case PV:
      if (value == null) {
        unsetPv();
      } else {
        setPv((Long)value);
      }
      break;

    case UV:
      if (value == null) {
        unsetUv();
      } else {
        setUv((Long)value);
      }
      break;

    case IP_COUNT:
      if (value == null) {
        unsetIpCount();
      } else {
        setIpCount((Long)value);
      }
      break;

    case VISIT_TIMES:
      if (value == null) {
        unsetVisitTimes();
      } else {
        setVisitTimes((Long)value);
      }
      break;

    case JUMP_RATE:
      if (value == null) {
        unsetJumpRate();
      } else {
        setJumpRate((String)value);
      }
      break;

    case AVG_VISIT_TIME:
      if (value == null) {
        unsetAvgVisitTime();
      } else {
        setAvgVisitTime((String)value);
      }
      break;

    case AVG_VISIT_PAGE:
      if (value == null) {
        unsetAvgVisitPage();
      } else {
        setAvgVisitPage((String)value);
      }
      break;

    case PV_RATE:
      if (value == null) {
        unsetPvRate();
      } else {
        setPvRate((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TIMES:
      return getTimes();

    case SHOW_NAME:
      return getShowName();

    case FIELD_ID:
      return Integer.valueOf(getFieldId());

    case PV:
      return Long.valueOf(getPv());

    case UV:
      return Long.valueOf(getUv());

    case IP_COUNT:
      return Long.valueOf(getIpCount());

    case VISIT_TIMES:
      return Long.valueOf(getVisitTimes());

    case JUMP_RATE:
      return getJumpRate();

    case AVG_VISIT_TIME:
      return getAvgVisitTime();

    case AVG_VISIT_PAGE:
      return getAvgVisitPage();

    case PV_RATE:
      return getPvRate();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TIMES:
      return isSetTimes();
    case SHOW_NAME:
      return isSetShowName();
    case FIELD_ID:
      return isSetFieldId();
    case PV:
      return isSetPv();
    case UV:
      return isSetUv();
    case IP_COUNT:
      return isSetIpCount();
    case VISIT_TIMES:
      return isSetVisitTimes();
    case JUMP_RATE:
      return isSetJumpRate();
    case AVG_VISIT_TIME:
      return isSetAvgVisitTime();
    case AVG_VISIT_PAGE:
      return isSetAvgVisitPage();
    case PV_RATE:
      return isSetPvRate();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof WebStats)
      return this.equals((WebStats)that);
    return false;
  }

  public boolean equals(WebStats that) {
    if (that == null)
      return false;

    boolean this_present_times = true && this.isSetTimes();
    boolean that_present_times = true && that.isSetTimes();
    if (this_present_times || that_present_times) {
      if (!(this_present_times && that_present_times))
        return false;
      if (!this.times.equals(that.times))
        return false;
    }

    boolean this_present_showName = true && this.isSetShowName();
    boolean that_present_showName = true && that.isSetShowName();
    if (this_present_showName || that_present_showName) {
      if (!(this_present_showName && that_present_showName))
        return false;
      if (!this.showName.equals(that.showName))
        return false;
    }

    boolean this_present_fieldId = true && this.isSetFieldId();
    boolean that_present_fieldId = true && that.isSetFieldId();
    if (this_present_fieldId || that_present_fieldId) {
      if (!(this_present_fieldId && that_present_fieldId))
        return false;
      if (this.fieldId != that.fieldId)
        return false;
    }

    boolean this_present_pv = true && this.isSetPv();
    boolean that_present_pv = true && that.isSetPv();
    if (this_present_pv || that_present_pv) {
      if (!(this_present_pv && that_present_pv))
        return false;
      if (this.pv != that.pv)
        return false;
    }

    boolean this_present_uv = true && this.isSetUv();
    boolean that_present_uv = true && that.isSetUv();
    if (this_present_uv || that_present_uv) {
      if (!(this_present_uv && that_present_uv))
        return false;
      if (this.uv != that.uv)
        return false;
    }

    boolean this_present_ipCount = true && this.isSetIpCount();
    boolean that_present_ipCount = true && that.isSetIpCount();
    if (this_present_ipCount || that_present_ipCount) {
      if (!(this_present_ipCount && that_present_ipCount))
        return false;
      if (this.ipCount != that.ipCount)
        return false;
    }

    boolean this_present_visitTimes = true && this.isSetVisitTimes();
    boolean that_present_visitTimes = true && that.isSetVisitTimes();
    if (this_present_visitTimes || that_present_visitTimes) {
      if (!(this_present_visitTimes && that_present_visitTimes))
        return false;
      if (this.visitTimes != that.visitTimes)
        return false;
    }

    boolean this_present_jumpRate = true && this.isSetJumpRate();
    boolean that_present_jumpRate = true && that.isSetJumpRate();
    if (this_present_jumpRate || that_present_jumpRate) {
      if (!(this_present_jumpRate && that_present_jumpRate))
        return false;
      if (!this.jumpRate.equals(that.jumpRate))
        return false;
    }

    boolean this_present_avgVisitTime = true && this.isSetAvgVisitTime();
    boolean that_present_avgVisitTime = true && that.isSetAvgVisitTime();
    if (this_present_avgVisitTime || that_present_avgVisitTime) {
      if (!(this_present_avgVisitTime && that_present_avgVisitTime))
        return false;
      if (!this.avgVisitTime.equals(that.avgVisitTime))
        return false;
    }

    boolean this_present_avgVisitPage = true && this.isSetAvgVisitPage();
    boolean that_present_avgVisitPage = true && that.isSetAvgVisitPage();
    if (this_present_avgVisitPage || that_present_avgVisitPage) {
      if (!(this_present_avgVisitPage && that_present_avgVisitPage))
        return false;
      if (!this.avgVisitPage.equals(that.avgVisitPage))
        return false;
    }

    boolean this_present_pvRate = true && this.isSetPvRate();
    boolean that_present_pvRate = true && that.isSetPvRate();
    if (this_present_pvRate || that_present_pvRate) {
      if (!(this_present_pvRate && that_present_pvRate))
        return false;
      if (!this.pvRate.equals(that.pvRate))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(WebStats other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetTimes()).compareTo(other.isSetTimes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTimes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.times, other.times);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetShowName()).compareTo(other.isSetShowName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetShowName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.showName, other.showName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFieldId()).compareTo(other.isSetFieldId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFieldId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fieldId, other.fieldId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPv()).compareTo(other.isSetPv());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPv()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pv, other.pv);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUv()).compareTo(other.isSetUv());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUv()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uv, other.uv);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIpCount()).compareTo(other.isSetIpCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIpCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ipCount, other.ipCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVisitTimes()).compareTo(other.isSetVisitTimes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVisitTimes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.visitTimes, other.visitTimes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetJumpRate()).compareTo(other.isSetJumpRate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetJumpRate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jumpRate, other.jumpRate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAvgVisitTime()).compareTo(other.isSetAvgVisitTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAvgVisitTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.avgVisitTime, other.avgVisitTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAvgVisitPage()).compareTo(other.isSetAvgVisitPage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAvgVisitPage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.avgVisitPage, other.avgVisitPage);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPvRate()).compareTo(other.isSetPvRate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPvRate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pvRate, other.pvRate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("WebStats(");
    boolean first = true;

    if (isSetTimes()) {
      sb.append("times:");
      if (this.times == null) {
        sb.append("null");
      } else {
        sb.append(this.times);
      }
      first = false;
    }
    if (isSetShowName()) {
      if (!first) sb.append(", ");
      sb.append("showName:");
      if (this.showName == null) {
        sb.append("null");
      } else {
        sb.append(this.showName);
      }
      first = false;
    }
    if (isSetFieldId()) {
      if (!first) sb.append(", ");
      sb.append("fieldId:");
      sb.append(this.fieldId);
      first = false;
    }
    if (isSetPv()) {
      if (!first) sb.append(", ");
      sb.append("pv:");
      sb.append(this.pv);
      first = false;
    }
    if (isSetUv()) {
      if (!first) sb.append(", ");
      sb.append("uv:");
      sb.append(this.uv);
      first = false;
    }
    if (isSetIpCount()) {
      if (!first) sb.append(", ");
      sb.append("ipCount:");
      sb.append(this.ipCount);
      first = false;
    }
    if (isSetVisitTimes()) {
      if (!first) sb.append(", ");
      sb.append("visitTimes:");
      sb.append(this.visitTimes);
      first = false;
    }
    if (isSetJumpRate()) {
      if (!first) sb.append(", ");
      sb.append("jumpRate:");
      if (this.jumpRate == null) {
        sb.append("null");
      } else {
        sb.append(this.jumpRate);
      }
      first = false;
    }
    if (isSetAvgVisitTime()) {
      if (!first) sb.append(", ");
      sb.append("avgVisitTime:");
      if (this.avgVisitTime == null) {
        sb.append("null");
      } else {
        sb.append(this.avgVisitTime);
      }
      first = false;
    }
    if (isSetAvgVisitPage()) {
      if (!first) sb.append(", ");
      sb.append("avgVisitPage:");
      if (this.avgVisitPage == null) {
        sb.append("null");
      } else {
        sb.append(this.avgVisitPage);
      }
      first = false;
    }
    if (isSetPvRate()) {
      if (!first) sb.append(", ");
      sb.append("pvRate:");
      if (this.pvRate == null) {
        sb.append("null");
      } else {
        sb.append(this.pvRate);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class WebStatsStandardSchemeFactory implements SchemeFactory {
    public WebStatsStandardScheme getScheme() {
      return new WebStatsStandardScheme();
    }
  }

  private static class WebStatsStandardScheme extends StandardScheme<WebStats> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, WebStats struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TIMES
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.times = iprot.readString();
              struct.setTimesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SHOW_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.showName = iprot.readString();
              struct.setShowNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // FIELD_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.fieldId = iprot.readI32();
              struct.setFieldIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // PV
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.pv = iprot.readI64();
              struct.setPvIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // UV
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.uv = iprot.readI64();
              struct.setUvIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // IP_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.ipCount = iprot.readI64();
              struct.setIpCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // VISIT_TIMES
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.visitTimes = iprot.readI64();
              struct.setVisitTimesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // JUMP_RATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.jumpRate = iprot.readString();
              struct.setJumpRateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // AVG_VISIT_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.avgVisitTime = iprot.readString();
              struct.setAvgVisitTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // AVG_VISIT_PAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.avgVisitPage = iprot.readString();
              struct.setAvgVisitPageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // PV_RATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.pvRate = iprot.readString();
              struct.setPvRateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, WebStats struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.times != null) {
        if (struct.isSetTimes()) {
          oprot.writeFieldBegin(TIMES_FIELD_DESC);
          oprot.writeString(struct.times);
          oprot.writeFieldEnd();
        }
      }
      if (struct.showName != null) {
        if (struct.isSetShowName()) {
          oprot.writeFieldBegin(SHOW_NAME_FIELD_DESC);
          oprot.writeString(struct.showName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetFieldId()) {
        oprot.writeFieldBegin(FIELD_ID_FIELD_DESC);
        oprot.writeI32(struct.fieldId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetPv()) {
        oprot.writeFieldBegin(PV_FIELD_DESC);
        oprot.writeI64(struct.pv);
        oprot.writeFieldEnd();
      }
      if (struct.isSetUv()) {
        oprot.writeFieldBegin(UV_FIELD_DESC);
        oprot.writeI64(struct.uv);
        oprot.writeFieldEnd();
      }
      if (struct.isSetIpCount()) {
        oprot.writeFieldBegin(IP_COUNT_FIELD_DESC);
        oprot.writeI64(struct.ipCount);
        oprot.writeFieldEnd();
      }
      if (struct.isSetVisitTimes()) {
        oprot.writeFieldBegin(VISIT_TIMES_FIELD_DESC);
        oprot.writeI64(struct.visitTimes);
        oprot.writeFieldEnd();
      }
      if (struct.jumpRate != null) {
        if (struct.isSetJumpRate()) {
          oprot.writeFieldBegin(JUMP_RATE_FIELD_DESC);
          oprot.writeString(struct.jumpRate);
          oprot.writeFieldEnd();
        }
      }
      if (struct.avgVisitTime != null) {
        if (struct.isSetAvgVisitTime()) {
          oprot.writeFieldBegin(AVG_VISIT_TIME_FIELD_DESC);
          oprot.writeString(struct.avgVisitTime);
          oprot.writeFieldEnd();
        }
      }
      if (struct.avgVisitPage != null) {
        if (struct.isSetAvgVisitPage()) {
          oprot.writeFieldBegin(AVG_VISIT_PAGE_FIELD_DESC);
          oprot.writeString(struct.avgVisitPage);
          oprot.writeFieldEnd();
        }
      }
      if (struct.pvRate != null) {
        if (struct.isSetPvRate()) {
          oprot.writeFieldBegin(PV_RATE_FIELD_DESC);
          oprot.writeString(struct.pvRate);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class WebStatsTupleSchemeFactory implements SchemeFactory {
    public WebStatsTupleScheme getScheme() {
      return new WebStatsTupleScheme();
    }
  }

  private static class WebStatsTupleScheme extends TupleScheme<WebStats> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, WebStats struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetTimes()) {
        optionals.set(0);
      }
      if (struct.isSetShowName()) {
        optionals.set(1);
      }
      if (struct.isSetFieldId()) {
        optionals.set(2);
      }
      if (struct.isSetPv()) {
        optionals.set(3);
      }
      if (struct.isSetUv()) {
        optionals.set(4);
      }
      if (struct.isSetIpCount()) {
        optionals.set(5);
      }
      if (struct.isSetVisitTimes()) {
        optionals.set(6);
      }
      if (struct.isSetJumpRate()) {
        optionals.set(7);
      }
      if (struct.isSetAvgVisitTime()) {
        optionals.set(8);
      }
      if (struct.isSetAvgVisitPage()) {
        optionals.set(9);
      }
      if (struct.isSetPvRate()) {
        optionals.set(10);
      }
      oprot.writeBitSet(optionals, 11);
      if (struct.isSetTimes()) {
        oprot.writeString(struct.times);
      }
      if (struct.isSetShowName()) {
        oprot.writeString(struct.showName);
      }
      if (struct.isSetFieldId()) {
        oprot.writeI32(struct.fieldId);
      }
      if (struct.isSetPv()) {
        oprot.writeI64(struct.pv);
      }
      if (struct.isSetUv()) {
        oprot.writeI64(struct.uv);
      }
      if (struct.isSetIpCount()) {
        oprot.writeI64(struct.ipCount);
      }
      if (struct.isSetVisitTimes()) {
        oprot.writeI64(struct.visitTimes);
      }
      if (struct.isSetJumpRate()) {
        oprot.writeString(struct.jumpRate);
      }
      if (struct.isSetAvgVisitTime()) {
        oprot.writeString(struct.avgVisitTime);
      }
      if (struct.isSetAvgVisitPage()) {
        oprot.writeString(struct.avgVisitPage);
      }
      if (struct.isSetPvRate()) {
        oprot.writeString(struct.pvRate);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, WebStats struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(11);
      if (incoming.get(0)) {
        struct.times = iprot.readString();
        struct.setTimesIsSet(true);
      }
      if (incoming.get(1)) {
        struct.showName = iprot.readString();
        struct.setShowNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.fieldId = iprot.readI32();
        struct.setFieldIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.pv = iprot.readI64();
        struct.setPvIsSet(true);
      }
      if (incoming.get(4)) {
        struct.uv = iprot.readI64();
        struct.setUvIsSet(true);
      }
      if (incoming.get(5)) {
        struct.ipCount = iprot.readI64();
        struct.setIpCountIsSet(true);
      }
      if (incoming.get(6)) {
        struct.visitTimes = iprot.readI64();
        struct.setVisitTimesIsSet(true);
      }
      if (incoming.get(7)) {
        struct.jumpRate = iprot.readString();
        struct.setJumpRateIsSet(true);
      }
      if (incoming.get(8)) {
        struct.avgVisitTime = iprot.readString();
        struct.setAvgVisitTimeIsSet(true);
      }
      if (incoming.get(9)) {
        struct.avgVisitPage = iprot.readString();
        struct.setAvgVisitPageIsSet(true);
      }
      if (incoming.get(10)) {
        struct.pvRate = iprot.readString();
        struct.setPvRateIsSet(true);
      }
    }
  }

}


/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.tracker.api.thrift.search;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class SearchStatsService {

  /**
   * 搜索行为分析数据服务
   */
  public interface Iface {

    /**
     * 获取实时统计数据
     * 
     * @param webId
     * @param timeType
     * @param time
     */
    public Map<String,SearchStats> getSearchStats(int webId, int timeType, String time) throws org.apache.thrift.TException;

    /**
     * 获取总搜索次数
     * 
     * @param webId
     * @param timeType
     * @param time
     * @param seParam
     */
    public long getTotalSearchCount(int webId, int timeType, String time, SearchEngineParam seParam) throws org.apache.thrift.TException;

    /**
     * 获取基于事件的统计数据
     * 
     * @param webId
     * @param timeType
     * @param times
     * @param seParam
     */
    public List<SearchStats> getSearchStatsForDate(int webId, int timeType, List<String> times, SearchEngineParam seParam) throws org.apache.thrift.TException;

    /**
     * 获取搜索结果/搜索条件统计数据
     * 
     * @param webId
     * @param timeType
     * @param time
     * @param seParam
     * @param resultType
     */
    public List<SearchStats> getSiteSearchStats(int webId, int timeType, String time, SearchEngineParam seParam, int resultType) throws org.apache.thrift.TException;

    /**
     * 获取基于页面的统计数据
     * 
     * @param webId
     * @param timeType
     * @param time
     * @param seParam
     */
    public List<SearchStats> getSearchPageStats(int webId, int timeType, String time, SearchEngineParam seParam) throws org.apache.thrift.TException;

    /**
     * top搜索值
     * 
     * @param webId
     * @param timeType
     * @param time
     * @param seParam
     * @param conditionType
     * @param startIndex
     * @param offset
     */
    public SearchStatsResult getSearchValueStats(int webId, int timeType, String time, SearchEngineParam seParam, int conditionType, int startIndex, int offset) throws org.apache.thrift.TException;

    /**
     * top响应时间最慢
     * 
     * @param webId
     * @param timeType
     * @param time
     * @param seParam
     * @param startIndex
     * @param offset
     */
    public TopResponseTimeResult getTopResponseTimeResult(int webId, int timeType, String time, SearchEngineParam seParam, int startIndex, int offset) throws org.apache.thrift.TException;

    /**
     * top ip
     * 
     * @param webId
     * @param timeType
     * @param time
     * @param seParam
     * @param startIndex
     * @param offset
     */
    public SearchStatsResult getTopIpResult(int webId, int timeType, String time, SearchEngineParam seParam, int startIndex, int offset) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void getSearchStats(int webId, int timeType, String time, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getTotalSearchCount(int webId, int timeType, String time, SearchEngineParam seParam, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getSearchStatsForDate(int webId, int timeType, List<String> times, SearchEngineParam seParam, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getSiteSearchStats(int webId, int timeType, String time, SearchEngineParam seParam, int resultType, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getSearchPageStats(int webId, int timeType, String time, SearchEngineParam seParam, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getSearchValueStats(int webId, int timeType, String time, SearchEngineParam seParam, int conditionType, int startIndex, int offset, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getTopResponseTimeResult(int webId, int timeType, String time, SearchEngineParam seParam, int startIndex, int offset, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getTopIpResult(int webId, int timeType, String time, SearchEngineParam seParam, int startIndex, int offset, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public Map<String,SearchStats> getSearchStats(int webId, int timeType, String time) throws org.apache.thrift.TException
    {
      send_getSearchStats(webId, timeType, time);
      return recv_getSearchStats();
    }

    public void send_getSearchStats(int webId, int timeType, String time) throws org.apache.thrift.TException
    {
      getSearchStats_args args = new getSearchStats_args();
      args.setWebId(webId);
      args.setTimeType(timeType);
      args.setTime(time);
      sendBase("getSearchStats", args);
    }

    public Map<String,SearchStats> recv_getSearchStats() throws org.apache.thrift.TException
    {
      getSearchStats_result result = new getSearchStats_result();
      receiveBase(result, "getSearchStats");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getSearchStats failed: unknown result");
    }

    public long getTotalSearchCount(int webId, int timeType, String time, SearchEngineParam seParam) throws org.apache.thrift.TException
    {
      send_getTotalSearchCount(webId, timeType, time, seParam);
      return recv_getTotalSearchCount();
    }

    public void send_getTotalSearchCount(int webId, int timeType, String time, SearchEngineParam seParam) throws org.apache.thrift.TException
    {
      getTotalSearchCount_args args = new getTotalSearchCount_args();
      args.setWebId(webId);
      args.setTimeType(timeType);
      args.setTime(time);
      args.setSeParam(seParam);
      sendBase("getTotalSearchCount", args);
    }

    public long recv_getTotalSearchCount() throws org.apache.thrift.TException
    {
      getTotalSearchCount_result result = new getTotalSearchCount_result();
      receiveBase(result, "getTotalSearchCount");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getTotalSearchCount failed: unknown result");
    }

    public List<SearchStats> getSearchStatsForDate(int webId, int timeType, List<String> times, SearchEngineParam seParam) throws org.apache.thrift.TException
    {
      send_getSearchStatsForDate(webId, timeType, times, seParam);
      return recv_getSearchStatsForDate();
    }

    public void send_getSearchStatsForDate(int webId, int timeType, List<String> times, SearchEngineParam seParam) throws org.apache.thrift.TException
    {
      getSearchStatsForDate_args args = new getSearchStatsForDate_args();
      args.setWebId(webId);
      args.setTimeType(timeType);
      args.setTimes(times);
      args.setSeParam(seParam);
      sendBase("getSearchStatsForDate", args);
    }

    public List<SearchStats> recv_getSearchStatsForDate() throws org.apache.thrift.TException
    {
      getSearchStatsForDate_result result = new getSearchStatsForDate_result();
      receiveBase(result, "getSearchStatsForDate");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getSearchStatsForDate failed: unknown result");
    }

    public List<SearchStats> getSiteSearchStats(int webId, int timeType, String time, SearchEngineParam seParam, int resultType) throws org.apache.thrift.TException
    {
      send_getSiteSearchStats(webId, timeType, time, seParam, resultType);
      return recv_getSiteSearchStats();
    }

    public void send_getSiteSearchStats(int webId, int timeType, String time, SearchEngineParam seParam, int resultType) throws org.apache.thrift.TException
    {
      getSiteSearchStats_args args = new getSiteSearchStats_args();
      args.setWebId(webId);
      args.setTimeType(timeType);
      args.setTime(time);
      args.setSeParam(seParam);
      args.setResultType(resultType);
      sendBase("getSiteSearchStats", args);
    }

    public List<SearchStats> recv_getSiteSearchStats() throws org.apache.thrift.TException
    {
      getSiteSearchStats_result result = new getSiteSearchStats_result();
      receiveBase(result, "getSiteSearchStats");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getSiteSearchStats failed: unknown result");
    }

    public List<SearchStats> getSearchPageStats(int webId, int timeType, String time, SearchEngineParam seParam) throws org.apache.thrift.TException
    {
      send_getSearchPageStats(webId, timeType, time, seParam);
      return recv_getSearchPageStats();
    }

    public void send_getSearchPageStats(int webId, int timeType, String time, SearchEngineParam seParam) throws org.apache.thrift.TException
    {
      getSearchPageStats_args args = new getSearchPageStats_args();
      args.setWebId(webId);
      args.setTimeType(timeType);
      args.setTime(time);
      args.setSeParam(seParam);
      sendBase("getSearchPageStats", args);
    }

    public List<SearchStats> recv_getSearchPageStats() throws org.apache.thrift.TException
    {
      getSearchPageStats_result result = new getSearchPageStats_result();
      receiveBase(result, "getSearchPageStats");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getSearchPageStats failed: unknown result");
    }

    public SearchStatsResult getSearchValueStats(int webId, int timeType, String time, SearchEngineParam seParam, int conditionType, int startIndex, int offset) throws org.apache.thrift.TException
    {
      send_getSearchValueStats(webId, timeType, time, seParam, conditionType, startIndex, offset);
      return recv_getSearchValueStats();
    }

    public void send_getSearchValueStats(int webId, int timeType, String time, SearchEngineParam seParam, int conditionType, int startIndex, int offset) throws org.apache.thrift.TException
    {
      getSearchValueStats_args args = new getSearchValueStats_args();
      args.setWebId(webId);
      args.setTimeType(timeType);
      args.setTime(time);
      args.setSeParam(seParam);
      args.setConditionType(conditionType);
      args.setStartIndex(startIndex);
      args.setOffset(offset);
      sendBase("getSearchValueStats", args);
    }

    public SearchStatsResult recv_getSearchValueStats() throws org.apache.thrift.TException
    {
      getSearchValueStats_result result = new getSearchValueStats_result();
      receiveBase(result, "getSearchValueStats");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getSearchValueStats failed: unknown result");
    }

    public TopResponseTimeResult getTopResponseTimeResult(int webId, int timeType, String time, SearchEngineParam seParam, int startIndex, int offset) throws org.apache.thrift.TException
    {
      send_getTopResponseTimeResult(webId, timeType, time, seParam, startIndex, offset);
      return recv_getTopResponseTimeResult();
    }

    public void send_getTopResponseTimeResult(int webId, int timeType, String time, SearchEngineParam seParam, int startIndex, int offset) throws org.apache.thrift.TException
    {
      getTopResponseTimeResult_args args = new getTopResponseTimeResult_args();
      args.setWebId(webId);
      args.setTimeType(timeType);
      args.setTime(time);
      args.setSeParam(seParam);
      args.setStartIndex(startIndex);
      args.setOffset(offset);
      sendBase("getTopResponseTimeResult", args);
    }

    public TopResponseTimeResult recv_getTopResponseTimeResult() throws org.apache.thrift.TException
    {
      getTopResponseTimeResult_result result = new getTopResponseTimeResult_result();
      receiveBase(result, "getTopResponseTimeResult");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getTopResponseTimeResult failed: unknown result");
    }

    public SearchStatsResult getTopIpResult(int webId, int timeType, String time, SearchEngineParam seParam, int startIndex, int offset) throws org.apache.thrift.TException
    {
      send_getTopIpResult(webId, timeType, time, seParam, startIndex, offset);
      return recv_getTopIpResult();
    }

    public void send_getTopIpResult(int webId, int timeType, String time, SearchEngineParam seParam, int startIndex, int offset) throws org.apache.thrift.TException
    {
      getTopIpResult_args args = new getTopIpResult_args();
      args.setWebId(webId);
      args.setTimeType(timeType);
      args.setTime(time);
      args.setSeParam(seParam);
      args.setStartIndex(startIndex);
      args.setOffset(offset);
      sendBase("getTopIpResult", args);
    }

    public SearchStatsResult recv_getTopIpResult() throws org.apache.thrift.TException
    {
      getTopIpResult_result result = new getTopIpResult_result();
      receiveBase(result, "getTopIpResult");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getTopIpResult failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void getSearchStats(int webId, int timeType, String time, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getSearchStats_call method_call = new getSearchStats_call(webId, timeType, time, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getSearchStats_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int webId;
      private int timeType;
      private String time;
      public getSearchStats_call(int webId, int timeType, String time, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.webId = webId;
        this.timeType = timeType;
        this.time = time;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getSearchStats", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getSearchStats_args args = new getSearchStats_args();
        args.setWebId(webId);
        args.setTimeType(timeType);
        args.setTime(time);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Map<String,SearchStats> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getSearchStats();
      }
    }

    public void getTotalSearchCount(int webId, int timeType, String time, SearchEngineParam seParam, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getTotalSearchCount_call method_call = new getTotalSearchCount_call(webId, timeType, time, seParam, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getTotalSearchCount_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int webId;
      private int timeType;
      private String time;
      private SearchEngineParam seParam;
      public getTotalSearchCount_call(int webId, int timeType, String time, SearchEngineParam seParam, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.webId = webId;
        this.timeType = timeType;
        this.time = time;
        this.seParam = seParam;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getTotalSearchCount", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getTotalSearchCount_args args = new getTotalSearchCount_args();
        args.setWebId(webId);
        args.setTimeType(timeType);
        args.setTime(time);
        args.setSeParam(seParam);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public long getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getTotalSearchCount();
      }
    }

    public void getSearchStatsForDate(int webId, int timeType, List<String> times, SearchEngineParam seParam, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getSearchStatsForDate_call method_call = new getSearchStatsForDate_call(webId, timeType, times, seParam, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getSearchStatsForDate_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int webId;
      private int timeType;
      private List<String> times;
      private SearchEngineParam seParam;
      public getSearchStatsForDate_call(int webId, int timeType, List<String> times, SearchEngineParam seParam, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.webId = webId;
        this.timeType = timeType;
        this.times = times;
        this.seParam = seParam;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getSearchStatsForDate", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getSearchStatsForDate_args args = new getSearchStatsForDate_args();
        args.setWebId(webId);
        args.setTimeType(timeType);
        args.setTimes(times);
        args.setSeParam(seParam);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<SearchStats> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getSearchStatsForDate();
      }
    }

    public void getSiteSearchStats(int webId, int timeType, String time, SearchEngineParam seParam, int resultType, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getSiteSearchStats_call method_call = new getSiteSearchStats_call(webId, timeType, time, seParam, resultType, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getSiteSearchStats_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int webId;
      private int timeType;
      private String time;
      private SearchEngineParam seParam;
      private int resultType;
      public getSiteSearchStats_call(int webId, int timeType, String time, SearchEngineParam seParam, int resultType, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.webId = webId;
        this.timeType = timeType;
        this.time = time;
        this.seParam = seParam;
        this.resultType = resultType;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getSiteSearchStats", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getSiteSearchStats_args args = new getSiteSearchStats_args();
        args.setWebId(webId);
        args.setTimeType(timeType);
        args.setTime(time);
        args.setSeParam(seParam);
        args.setResultType(resultType);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<SearchStats> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getSiteSearchStats();
      }
    }

    public void getSearchPageStats(int webId, int timeType, String time, SearchEngineParam seParam, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getSearchPageStats_call method_call = new getSearchPageStats_call(webId, timeType, time, seParam, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getSearchPageStats_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int webId;
      private int timeType;
      private String time;
      private SearchEngineParam seParam;
      public getSearchPageStats_call(int webId, int timeType, String time, SearchEngineParam seParam, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.webId = webId;
        this.timeType = timeType;
        this.time = time;
        this.seParam = seParam;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getSearchPageStats", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getSearchPageStats_args args = new getSearchPageStats_args();
        args.setWebId(webId);
        args.setTimeType(timeType);
        args.setTime(time);
        args.setSeParam(seParam);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<SearchStats> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getSearchPageStats();
      }
    }

    public void getSearchValueStats(int webId, int timeType, String time, SearchEngineParam seParam, int conditionType, int startIndex, int offset, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getSearchValueStats_call method_call = new getSearchValueStats_call(webId, timeType, time, seParam, conditionType, startIndex, offset, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getSearchValueStats_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int webId;
      private int timeType;
      private String time;
      private SearchEngineParam seParam;
      private int conditionType;
      private int startIndex;
      private int offset;
      public getSearchValueStats_call(int webId, int timeType, String time, SearchEngineParam seParam, int conditionType, int startIndex, int offset, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.webId = webId;
        this.timeType = timeType;
        this.time = time;
        this.seParam = seParam;
        this.conditionType = conditionType;
        this.startIndex = startIndex;
        this.offset = offset;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getSearchValueStats", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getSearchValueStats_args args = new getSearchValueStats_args();
        args.setWebId(webId);
        args.setTimeType(timeType);
        args.setTime(time);
        args.setSeParam(seParam);
        args.setConditionType(conditionType);
        args.setStartIndex(startIndex);
        args.setOffset(offset);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public SearchStatsResult getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getSearchValueStats();
      }
    }

    public void getTopResponseTimeResult(int webId, int timeType, String time, SearchEngineParam seParam, int startIndex, int offset, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getTopResponseTimeResult_call method_call = new getTopResponseTimeResult_call(webId, timeType, time, seParam, startIndex, offset, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getTopResponseTimeResult_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int webId;
      private int timeType;
      private String time;
      private SearchEngineParam seParam;
      private int startIndex;
      private int offset;
      public getTopResponseTimeResult_call(int webId, int timeType, String time, SearchEngineParam seParam, int startIndex, int offset, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.webId = webId;
        this.timeType = timeType;
        this.time = time;
        this.seParam = seParam;
        this.startIndex = startIndex;
        this.offset = offset;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getTopResponseTimeResult", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getTopResponseTimeResult_args args = new getTopResponseTimeResult_args();
        args.setWebId(webId);
        args.setTimeType(timeType);
        args.setTime(time);
        args.setSeParam(seParam);
        args.setStartIndex(startIndex);
        args.setOffset(offset);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public TopResponseTimeResult getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getTopResponseTimeResult();
      }
    }

    public void getTopIpResult(int webId, int timeType, String time, SearchEngineParam seParam, int startIndex, int offset, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getTopIpResult_call method_call = new getTopIpResult_call(webId, timeType, time, seParam, startIndex, offset, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getTopIpResult_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int webId;
      private int timeType;
      private String time;
      private SearchEngineParam seParam;
      private int startIndex;
      private int offset;
      public getTopIpResult_call(int webId, int timeType, String time, SearchEngineParam seParam, int startIndex, int offset, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.webId = webId;
        this.timeType = timeType;
        this.time = time;
        this.seParam = seParam;
        this.startIndex = startIndex;
        this.offset = offset;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getTopIpResult", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getTopIpResult_args args = new getTopIpResult_args();
        args.setWebId(webId);
        args.setTimeType(timeType);
        args.setTime(time);
        args.setSeParam(seParam);
        args.setStartIndex(startIndex);
        args.setOffset(offset);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public SearchStatsResult getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getTopIpResult();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("getSearchStats", new getSearchStats());
      processMap.put("getTotalSearchCount", new getTotalSearchCount());
      processMap.put("getSearchStatsForDate", new getSearchStatsForDate());
      processMap.put("getSiteSearchStats", new getSiteSearchStats());
      processMap.put("getSearchPageStats", new getSearchPageStats());
      processMap.put("getSearchValueStats", new getSearchValueStats());
      processMap.put("getTopResponseTimeResult", new getTopResponseTimeResult());
      processMap.put("getTopIpResult", new getTopIpResult());
      return processMap;
    }

    public static class getSearchStats<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getSearchStats_args> {
      public getSearchStats() {
        super("getSearchStats");
      }

      public getSearchStats_args getEmptyArgsInstance() {
        return new getSearchStats_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getSearchStats_result getResult(I iface, getSearchStats_args args) throws org.apache.thrift.TException {
        getSearchStats_result result = new getSearchStats_result();
        result.success = iface.getSearchStats(args.webId, args.timeType, args.time);
        return result;
      }
    }

    public static class getTotalSearchCount<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getTotalSearchCount_args> {
      public getTotalSearchCount() {
        super("getTotalSearchCount");
      }

      public getTotalSearchCount_args getEmptyArgsInstance() {
        return new getTotalSearchCount_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getTotalSearchCount_result getResult(I iface, getTotalSearchCount_args args) throws org.apache.thrift.TException {
        getTotalSearchCount_result result = new getTotalSearchCount_result();
        result.success = iface.getTotalSearchCount(args.webId, args.timeType, args.time, args.seParam);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class getSearchStatsForDate<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getSearchStatsForDate_args> {
      public getSearchStatsForDate() {
        super("getSearchStatsForDate");
      }

      public getSearchStatsForDate_args getEmptyArgsInstance() {
        return new getSearchStatsForDate_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getSearchStatsForDate_result getResult(I iface, getSearchStatsForDate_args args) throws org.apache.thrift.TException {
        getSearchStatsForDate_result result = new getSearchStatsForDate_result();
        result.success = iface.getSearchStatsForDate(args.webId, args.timeType, args.times, args.seParam);
        return result;
      }
    }

    public static class getSiteSearchStats<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getSiteSearchStats_args> {
      public getSiteSearchStats() {
        super("getSiteSearchStats");
      }

      public getSiteSearchStats_args getEmptyArgsInstance() {
        return new getSiteSearchStats_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getSiteSearchStats_result getResult(I iface, getSiteSearchStats_args args) throws org.apache.thrift.TException {
        getSiteSearchStats_result result = new getSiteSearchStats_result();
        result.success = iface.getSiteSearchStats(args.webId, args.timeType, args.time, args.seParam, args.resultType);
        return result;
      }
    }

    public static class getSearchPageStats<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getSearchPageStats_args> {
      public getSearchPageStats() {
        super("getSearchPageStats");
      }

      public getSearchPageStats_args getEmptyArgsInstance() {
        return new getSearchPageStats_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getSearchPageStats_result getResult(I iface, getSearchPageStats_args args) throws org.apache.thrift.TException {
        getSearchPageStats_result result = new getSearchPageStats_result();
        result.success = iface.getSearchPageStats(args.webId, args.timeType, args.time, args.seParam);
        return result;
      }
    }

    public static class getSearchValueStats<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getSearchValueStats_args> {
      public getSearchValueStats() {
        super("getSearchValueStats");
      }

      public getSearchValueStats_args getEmptyArgsInstance() {
        return new getSearchValueStats_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getSearchValueStats_result getResult(I iface, getSearchValueStats_args args) throws org.apache.thrift.TException {
        getSearchValueStats_result result = new getSearchValueStats_result();
        result.success = iface.getSearchValueStats(args.webId, args.timeType, args.time, args.seParam, args.conditionType, args.startIndex, args.offset);
        return result;
      }
    }

    public static class getTopResponseTimeResult<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getTopResponseTimeResult_args> {
      public getTopResponseTimeResult() {
        super("getTopResponseTimeResult");
      }

      public getTopResponseTimeResult_args getEmptyArgsInstance() {
        return new getTopResponseTimeResult_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getTopResponseTimeResult_result getResult(I iface, getTopResponseTimeResult_args args) throws org.apache.thrift.TException {
        getTopResponseTimeResult_result result = new getTopResponseTimeResult_result();
        result.success = iface.getTopResponseTimeResult(args.webId, args.timeType, args.time, args.seParam, args.startIndex, args.offset);
        return result;
      }
    }

    public static class getTopIpResult<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getTopIpResult_args> {
      public getTopIpResult() {
        super("getTopIpResult");
      }

      public getTopIpResult_args getEmptyArgsInstance() {
        return new getTopIpResult_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getTopIpResult_result getResult(I iface, getTopIpResult_args args) throws org.apache.thrift.TException {
        getTopIpResult_result result = new getTopIpResult_result();
        result.success = iface.getTopIpResult(args.webId, args.timeType, args.time, args.seParam, args.startIndex, args.offset);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("getSearchStats", new getSearchStats());
      processMap.put("getTotalSearchCount", new getTotalSearchCount());
      processMap.put("getSearchStatsForDate", new getSearchStatsForDate());
      processMap.put("getSiteSearchStats", new getSiteSearchStats());
      processMap.put("getSearchPageStats", new getSearchPageStats());
      processMap.put("getSearchValueStats", new getSearchValueStats());
      processMap.put("getTopResponseTimeResult", new getTopResponseTimeResult());
      processMap.put("getTopIpResult", new getTopIpResult());
      return processMap;
    }

    public static class getSearchStats<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getSearchStats_args, Map<String,SearchStats>> {
      public getSearchStats() {
        super("getSearchStats");
      }

      public getSearchStats_args getEmptyArgsInstance() {
        return new getSearchStats_args();
      }

      public AsyncMethodCallback<Map<String,SearchStats>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Map<String,SearchStats>>() { 
          public void onComplete(Map<String,SearchStats> o) {
            getSearchStats_result result = new getSearchStats_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getSearchStats_result result = new getSearchStats_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getSearchStats_args args, org.apache.thrift.async.AsyncMethodCallback<Map<String,SearchStats>> resultHandler) throws TException {
        iface.getSearchStats(args.webId, args.timeType, args.time,resultHandler);
      }
    }

    public static class getTotalSearchCount<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getTotalSearchCount_args, Long> {
      public getTotalSearchCount() {
        super("getTotalSearchCount");
      }

      public getTotalSearchCount_args getEmptyArgsInstance() {
        return new getTotalSearchCount_args();
      }

      public AsyncMethodCallback<Long> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Long>() { 
          public void onComplete(Long o) {
            getTotalSearchCount_result result = new getTotalSearchCount_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getTotalSearchCount_result result = new getTotalSearchCount_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getTotalSearchCount_args args, org.apache.thrift.async.AsyncMethodCallback<Long> resultHandler) throws TException {
        iface.getTotalSearchCount(args.webId, args.timeType, args.time, args.seParam,resultHandler);
      }
    }

    public static class getSearchStatsForDate<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getSearchStatsForDate_args, List<SearchStats>> {
      public getSearchStatsForDate() {
        super("getSearchStatsForDate");
      }

      public getSearchStatsForDate_args getEmptyArgsInstance() {
        return new getSearchStatsForDate_args();
      }

      public AsyncMethodCallback<List<SearchStats>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<SearchStats>>() { 
          public void onComplete(List<SearchStats> o) {
            getSearchStatsForDate_result result = new getSearchStatsForDate_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getSearchStatsForDate_result result = new getSearchStatsForDate_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getSearchStatsForDate_args args, org.apache.thrift.async.AsyncMethodCallback<List<SearchStats>> resultHandler) throws TException {
        iface.getSearchStatsForDate(args.webId, args.timeType, args.times, args.seParam,resultHandler);
      }
    }

    public static class getSiteSearchStats<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getSiteSearchStats_args, List<SearchStats>> {
      public getSiteSearchStats() {
        super("getSiteSearchStats");
      }

      public getSiteSearchStats_args getEmptyArgsInstance() {
        return new getSiteSearchStats_args();
      }

      public AsyncMethodCallback<List<SearchStats>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<SearchStats>>() { 
          public void onComplete(List<SearchStats> o) {
            getSiteSearchStats_result result = new getSiteSearchStats_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getSiteSearchStats_result result = new getSiteSearchStats_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getSiteSearchStats_args args, org.apache.thrift.async.AsyncMethodCallback<List<SearchStats>> resultHandler) throws TException {
        iface.getSiteSearchStats(args.webId, args.timeType, args.time, args.seParam, args.resultType,resultHandler);
      }
    }

    public static class getSearchPageStats<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getSearchPageStats_args, List<SearchStats>> {
      public getSearchPageStats() {
        super("getSearchPageStats");
      }

      public getSearchPageStats_args getEmptyArgsInstance() {
        return new getSearchPageStats_args();
      }

      public AsyncMethodCallback<List<SearchStats>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<SearchStats>>() { 
          public void onComplete(List<SearchStats> o) {
            getSearchPageStats_result result = new getSearchPageStats_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getSearchPageStats_result result = new getSearchPageStats_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getSearchPageStats_args args, org.apache.thrift.async.AsyncMethodCallback<List<SearchStats>> resultHandler) throws TException {
        iface.getSearchPageStats(args.webId, args.timeType, args.time, args.seParam,resultHandler);
      }
    }

    public static class getSearchValueStats<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getSearchValueStats_args, SearchStatsResult> {
      public getSearchValueStats() {
        super("getSearchValueStats");
      }

      public getSearchValueStats_args getEmptyArgsInstance() {
        return new getSearchValueStats_args();
      }

      public AsyncMethodCallback<SearchStatsResult> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<SearchStatsResult>() { 
          public void onComplete(SearchStatsResult o) {
            getSearchValueStats_result result = new getSearchValueStats_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getSearchValueStats_result result = new getSearchValueStats_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getSearchValueStats_args args, org.apache.thrift.async.AsyncMethodCallback<SearchStatsResult> resultHandler) throws TException {
        iface.getSearchValueStats(args.webId, args.timeType, args.time, args.seParam, args.conditionType, args.startIndex, args.offset,resultHandler);
      }
    }

    public static class getTopResponseTimeResult<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getTopResponseTimeResult_args, TopResponseTimeResult> {
      public getTopResponseTimeResult() {
        super("getTopResponseTimeResult");
      }

      public getTopResponseTimeResult_args getEmptyArgsInstance() {
        return new getTopResponseTimeResult_args();
      }

      public AsyncMethodCallback<TopResponseTimeResult> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<TopResponseTimeResult>() { 
          public void onComplete(TopResponseTimeResult o) {
            getTopResponseTimeResult_result result = new getTopResponseTimeResult_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getTopResponseTimeResult_result result = new getTopResponseTimeResult_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getTopResponseTimeResult_args args, org.apache.thrift.async.AsyncMethodCallback<TopResponseTimeResult> resultHandler) throws TException {
        iface.getTopResponseTimeResult(args.webId, args.timeType, args.time, args.seParam, args.startIndex, args.offset,resultHandler);
      }
    }

    public static class getTopIpResult<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getTopIpResult_args, SearchStatsResult> {
      public getTopIpResult() {
        super("getTopIpResult");
      }

      public getTopIpResult_args getEmptyArgsInstance() {
        return new getTopIpResult_args();
      }

      public AsyncMethodCallback<SearchStatsResult> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<SearchStatsResult>() { 
          public void onComplete(SearchStatsResult o) {
            getTopIpResult_result result = new getTopIpResult_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getTopIpResult_result result = new getTopIpResult_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getTopIpResult_args args, org.apache.thrift.async.AsyncMethodCallback<SearchStatsResult> resultHandler) throws TException {
        iface.getTopIpResult(args.webId, args.timeType, args.time, args.seParam, args.startIndex, args.offset,resultHandler);
      }
    }

  }

  public static class getSearchStats_args implements org.apache.thrift.TBase<getSearchStats_args, getSearchStats_args._Fields>, java.io.Serializable, Cloneable, Comparable<getSearchStats_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getSearchStats_args");

    private static final org.apache.thrift.protocol.TField WEB_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("webId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField TIME_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("timeType", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("time", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getSearchStats_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getSearchStats_argsTupleSchemeFactory());
    }

    public int webId; // required
    public int timeType; // required
    public String time; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      WEB_ID((short)1, "webId"),
      TIME_TYPE((short)2, "timeType"),
      TIME((short)3, "time");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // WEB_ID
            return WEB_ID;
          case 2: // TIME_TYPE
            return TIME_TYPE;
          case 3: // TIME
            return TIME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __WEBID_ISSET_ID = 0;
    private static final int __TIMETYPE_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.WEB_ID, new org.apache.thrift.meta_data.FieldMetaData("webId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.TIME_TYPE, new org.apache.thrift.meta_data.FieldMetaData("timeType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.TIME, new org.apache.thrift.meta_data.FieldMetaData("time", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getSearchStats_args.class, metaDataMap);
    }

    public getSearchStats_args() {
    }

    public getSearchStats_args(
      int webId,
      int timeType,
      String time)
    {
      this();
      this.webId = webId;
      setWebIdIsSet(true);
      this.timeType = timeType;
      setTimeTypeIsSet(true);
      this.time = time;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSearchStats_args(getSearchStats_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.webId = other.webId;
      this.timeType = other.timeType;
      if (other.isSetTime()) {
        this.time = other.time;
      }
    }

    public getSearchStats_args deepCopy() {
      return new getSearchStats_args(this);
    }

    @Override
    public void clear() {
      setWebIdIsSet(false);
      this.webId = 0;
      setTimeTypeIsSet(false);
      this.timeType = 0;
      this.time = null;
    }

    public int getWebId() {
      return this.webId;
    }

    public getSearchStats_args setWebId(int webId) {
      this.webId = webId;
      setWebIdIsSet(true);
      return this;
    }

    public void unsetWebId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __WEBID_ISSET_ID);
    }

    /** Returns true if field webId is set (has been assigned a value) and false otherwise */
    public boolean isSetWebId() {
      return EncodingUtils.testBit(__isset_bitfield, __WEBID_ISSET_ID);
    }

    public void setWebIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __WEBID_ISSET_ID, value);
    }

    public int getTimeType() {
      return this.timeType;
    }

    public getSearchStats_args setTimeType(int timeType) {
      this.timeType = timeType;
      setTimeTypeIsSet(true);
      return this;
    }

    public void unsetTimeType() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TIMETYPE_ISSET_ID);
    }

    /** Returns true if field timeType is set (has been assigned a value) and false otherwise */
    public boolean isSetTimeType() {
      return EncodingUtils.testBit(__isset_bitfield, __TIMETYPE_ISSET_ID);
    }

    public void setTimeTypeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TIMETYPE_ISSET_ID, value);
    }

    public String getTime() {
      return this.time;
    }

    public getSearchStats_args setTime(String time) {
      this.time = time;
      return this;
    }

    public void unsetTime() {
      this.time = null;
    }

    /** Returns true if field time is set (has been assigned a value) and false otherwise */
    public boolean isSetTime() {
      return this.time != null;
    }

    public void setTimeIsSet(boolean value) {
      if (!value) {
        this.time = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case WEB_ID:
        if (value == null) {
          unsetWebId();
        } else {
          setWebId((Integer)value);
        }
        break;

      case TIME_TYPE:
        if (value == null) {
          unsetTimeType();
        } else {
          setTimeType((Integer)value);
        }
        break;

      case TIME:
        if (value == null) {
          unsetTime();
        } else {
          setTime((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case WEB_ID:
        return Integer.valueOf(getWebId());

      case TIME_TYPE:
        return Integer.valueOf(getTimeType());

      case TIME:
        return getTime();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case WEB_ID:
        return isSetWebId();
      case TIME_TYPE:
        return isSetTimeType();
      case TIME:
        return isSetTime();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getSearchStats_args)
        return this.equals((getSearchStats_args)that);
      return false;
    }

    public boolean equals(getSearchStats_args that) {
      if (that == null)
        return false;

      boolean this_present_webId = true;
      boolean that_present_webId = true;
      if (this_present_webId || that_present_webId) {
        if (!(this_present_webId && that_present_webId))
          return false;
        if (this.webId != that.webId)
          return false;
      }

      boolean this_present_timeType = true;
      boolean that_present_timeType = true;
      if (this_present_timeType || that_present_timeType) {
        if (!(this_present_timeType && that_present_timeType))
          return false;
        if (this.timeType != that.timeType)
          return false;
      }

      boolean this_present_time = true && this.isSetTime();
      boolean that_present_time = true && that.isSetTime();
      if (this_present_time || that_present_time) {
        if (!(this_present_time && that_present_time))
          return false;
        if (!this.time.equals(that.time))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getSearchStats_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetWebId()).compareTo(other.isSetWebId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetWebId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.webId, other.webId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTimeType()).compareTo(other.isSetTimeType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTimeType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timeType, other.timeType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTime()).compareTo(other.isSetTime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTime()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.time, other.time);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getSearchStats_args(");
      boolean first = true;

      sb.append("webId:");
      sb.append(this.webId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("timeType:");
      sb.append(this.timeType);
      first = false;
      if (!first) sb.append(", ");
      sb.append("time:");
      if (this.time == null) {
        sb.append("null");
      } else {
        sb.append(this.time);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getSearchStats_argsStandardSchemeFactory implements SchemeFactory {
      public getSearchStats_argsStandardScheme getScheme() {
        return new getSearchStats_argsStandardScheme();
      }
    }

    private static class getSearchStats_argsStandardScheme extends StandardScheme<getSearchStats_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getSearchStats_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // WEB_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.webId = iprot.readI32();
                struct.setWebIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TIME_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.timeType = iprot.readI32();
                struct.setTimeTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // TIME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.time = iprot.readString();
                struct.setTimeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getSearchStats_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(WEB_ID_FIELD_DESC);
        oprot.writeI32(struct.webId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(TIME_TYPE_FIELD_DESC);
        oprot.writeI32(struct.timeType);
        oprot.writeFieldEnd();
        if (struct.time != null) {
          oprot.writeFieldBegin(TIME_FIELD_DESC);
          oprot.writeString(struct.time);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getSearchStats_argsTupleSchemeFactory implements SchemeFactory {
      public getSearchStats_argsTupleScheme getScheme() {
        return new getSearchStats_argsTupleScheme();
      }
    }

    private static class getSearchStats_argsTupleScheme extends TupleScheme<getSearchStats_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getSearchStats_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetWebId()) {
          optionals.set(0);
        }
        if (struct.isSetTimeType()) {
          optionals.set(1);
        }
        if (struct.isSetTime()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetWebId()) {
          oprot.writeI32(struct.webId);
        }
        if (struct.isSetTimeType()) {
          oprot.writeI32(struct.timeType);
        }
        if (struct.isSetTime()) {
          oprot.writeString(struct.time);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getSearchStats_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.webId = iprot.readI32();
          struct.setWebIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.timeType = iprot.readI32();
          struct.setTimeTypeIsSet(true);
        }
        if (incoming.get(2)) {
          struct.time = iprot.readString();
          struct.setTimeIsSet(true);
        }
      }
    }

  }

  public static class getSearchStats_result implements org.apache.thrift.TBase<getSearchStats_result, getSearchStats_result._Fields>, java.io.Serializable, Cloneable, Comparable<getSearchStats_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getSearchStats_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.MAP, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getSearchStats_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getSearchStats_resultTupleSchemeFactory());
    }

    public Map<String,SearchStats> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SearchStats.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getSearchStats_result.class, metaDataMap);
    }

    public getSearchStats_result() {
    }

    public getSearchStats_result(
      Map<String,SearchStats> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSearchStats_result(getSearchStats_result other) {
      if (other.isSetSuccess()) {
        Map<String,SearchStats> __this__success = new HashMap<String,SearchStats>(other.success.size());
        for (Map.Entry<String, SearchStats> other_element : other.success.entrySet()) {

          String other_element_key = other_element.getKey();
          SearchStats other_element_value = other_element.getValue();

          String __this__success_copy_key = other_element_key;

          SearchStats __this__success_copy_value = new SearchStats(other_element_value);

          __this__success.put(__this__success_copy_key, __this__success_copy_value);
        }
        this.success = __this__success;
      }
    }

    public getSearchStats_result deepCopy() {
      return new getSearchStats_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(String key, SearchStats val) {
      if (this.success == null) {
        this.success = new HashMap<String,SearchStats>();
      }
      this.success.put(key, val);
    }

    public Map<String,SearchStats> getSuccess() {
      return this.success;
    }

    public getSearchStats_result setSuccess(Map<String,SearchStats> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Map<String,SearchStats>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getSearchStats_result)
        return this.equals((getSearchStats_result)that);
      return false;
    }

    public boolean equals(getSearchStats_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getSearchStats_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getSearchStats_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getSearchStats_resultStandardSchemeFactory implements SchemeFactory {
      public getSearchStats_resultStandardScheme getScheme() {
        return new getSearchStats_resultStandardScheme();
      }
    }

    private static class getSearchStats_resultStandardScheme extends StandardScheme<getSearchStats_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getSearchStats_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map16 = iprot.readMapBegin();
                  struct.success = new HashMap<String,SearchStats>(2*_map16.size);
                  for (int _i17 = 0; _i17 < _map16.size; ++_i17)
                  {
                    String _key18;
                    SearchStats _val19;
                    _key18 = iprot.readString();
                    _val19 = new SearchStats();
                    _val19.read(iprot);
                    struct.success.put(_key18, _val19);
                  }
                  iprot.readMapEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getSearchStats_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (Map.Entry<String, SearchStats> _iter20 : struct.success.entrySet())
            {
              oprot.writeString(_iter20.getKey());
              _iter20.getValue().write(oprot);
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getSearchStats_resultTupleSchemeFactory implements SchemeFactory {
      public getSearchStats_resultTupleScheme getScheme() {
        return new getSearchStats_resultTupleScheme();
      }
    }

    private static class getSearchStats_resultTupleScheme extends TupleScheme<getSearchStats_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getSearchStats_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Map.Entry<String, SearchStats> _iter21 : struct.success.entrySet())
            {
              oprot.writeString(_iter21.getKey());
              _iter21.getValue().write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getSearchStats_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map22 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new HashMap<String,SearchStats>(2*_map22.size);
            for (int _i23 = 0; _i23 < _map22.size; ++_i23)
            {
              String _key24;
              SearchStats _val25;
              _key24 = iprot.readString();
              _val25 = new SearchStats();
              _val25.read(iprot);
              struct.success.put(_key24, _val25);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getTotalSearchCount_args implements org.apache.thrift.TBase<getTotalSearchCount_args, getTotalSearchCount_args._Fields>, java.io.Serializable, Cloneable, Comparable<getTotalSearchCount_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTotalSearchCount_args");

    private static final org.apache.thrift.protocol.TField WEB_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("webId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField TIME_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("timeType", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("time", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField SE_PARAM_FIELD_DESC = new org.apache.thrift.protocol.TField("seParam", org.apache.thrift.protocol.TType.STRUCT, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getTotalSearchCount_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getTotalSearchCount_argsTupleSchemeFactory());
    }

    public int webId; // required
    public int timeType; // required
    public String time; // required
    public SearchEngineParam seParam; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      WEB_ID((short)1, "webId"),
      TIME_TYPE((short)2, "timeType"),
      TIME((short)3, "time"),
      SE_PARAM((short)4, "seParam");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // WEB_ID
            return WEB_ID;
          case 2: // TIME_TYPE
            return TIME_TYPE;
          case 3: // TIME
            return TIME;
          case 4: // SE_PARAM
            return SE_PARAM;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __WEBID_ISSET_ID = 0;
    private static final int __TIMETYPE_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.WEB_ID, new org.apache.thrift.meta_data.FieldMetaData("webId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.TIME_TYPE, new org.apache.thrift.meta_data.FieldMetaData("timeType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.TIME, new org.apache.thrift.meta_data.FieldMetaData("time", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SE_PARAM, new org.apache.thrift.meta_data.FieldMetaData("seParam", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SearchEngineParam.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTotalSearchCount_args.class, metaDataMap);
    }

    public getTotalSearchCount_args() {
    }

    public getTotalSearchCount_args(
      int webId,
      int timeType,
      String time,
      SearchEngineParam seParam)
    {
      this();
      this.webId = webId;
      setWebIdIsSet(true);
      this.timeType = timeType;
      setTimeTypeIsSet(true);
      this.time = time;
      this.seParam = seParam;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTotalSearchCount_args(getTotalSearchCount_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.webId = other.webId;
      this.timeType = other.timeType;
      if (other.isSetTime()) {
        this.time = other.time;
      }
      if (other.isSetSeParam()) {
        this.seParam = new SearchEngineParam(other.seParam);
      }
    }

    public getTotalSearchCount_args deepCopy() {
      return new getTotalSearchCount_args(this);
    }

    @Override
    public void clear() {
      setWebIdIsSet(false);
      this.webId = 0;
      setTimeTypeIsSet(false);
      this.timeType = 0;
      this.time = null;
      this.seParam = null;
    }

    public int getWebId() {
      return this.webId;
    }

    public getTotalSearchCount_args setWebId(int webId) {
      this.webId = webId;
      setWebIdIsSet(true);
      return this;
    }

    public void unsetWebId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __WEBID_ISSET_ID);
    }

    /** Returns true if field webId is set (has been assigned a value) and false otherwise */
    public boolean isSetWebId() {
      return EncodingUtils.testBit(__isset_bitfield, __WEBID_ISSET_ID);
    }

    public void setWebIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __WEBID_ISSET_ID, value);
    }

    public int getTimeType() {
      return this.timeType;
    }

    public getTotalSearchCount_args setTimeType(int timeType) {
      this.timeType = timeType;
      setTimeTypeIsSet(true);
      return this;
    }

    public void unsetTimeType() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TIMETYPE_ISSET_ID);
    }

    /** Returns true if field timeType is set (has been assigned a value) and false otherwise */
    public boolean isSetTimeType() {
      return EncodingUtils.testBit(__isset_bitfield, __TIMETYPE_ISSET_ID);
    }

    public void setTimeTypeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TIMETYPE_ISSET_ID, value);
    }

    public String getTime() {
      return this.time;
    }

    public getTotalSearchCount_args setTime(String time) {
      this.time = time;
      return this;
    }

    public void unsetTime() {
      this.time = null;
    }

    /** Returns true if field time is set (has been assigned a value) and false otherwise */
    public boolean isSetTime() {
      return this.time != null;
    }

    public void setTimeIsSet(boolean value) {
      if (!value) {
        this.time = null;
      }
    }

    public SearchEngineParam getSeParam() {
      return this.seParam;
    }

    public getTotalSearchCount_args setSeParam(SearchEngineParam seParam) {
      this.seParam = seParam;
      return this;
    }

    public void unsetSeParam() {
      this.seParam = null;
    }

    /** Returns true if field seParam is set (has been assigned a value) and false otherwise */
    public boolean isSetSeParam() {
      return this.seParam != null;
    }

    public void setSeParamIsSet(boolean value) {
      if (!value) {
        this.seParam = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case WEB_ID:
        if (value == null) {
          unsetWebId();
        } else {
          setWebId((Integer)value);
        }
        break;

      case TIME_TYPE:
        if (value == null) {
          unsetTimeType();
        } else {
          setTimeType((Integer)value);
        }
        break;

      case TIME:
        if (value == null) {
          unsetTime();
        } else {
          setTime((String)value);
        }
        break;

      case SE_PARAM:
        if (value == null) {
          unsetSeParam();
        } else {
          setSeParam((SearchEngineParam)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case WEB_ID:
        return Integer.valueOf(getWebId());

      case TIME_TYPE:
        return Integer.valueOf(getTimeType());

      case TIME:
        return getTime();

      case SE_PARAM:
        return getSeParam();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case WEB_ID:
        return isSetWebId();
      case TIME_TYPE:
        return isSetTimeType();
      case TIME:
        return isSetTime();
      case SE_PARAM:
        return isSetSeParam();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getTotalSearchCount_args)
        return this.equals((getTotalSearchCount_args)that);
      return false;
    }

    public boolean equals(getTotalSearchCount_args that) {
      if (that == null)
        return false;

      boolean this_present_webId = true;
      boolean that_present_webId = true;
      if (this_present_webId || that_present_webId) {
        if (!(this_present_webId && that_present_webId))
          return false;
        if (this.webId != that.webId)
          return false;
      }

      boolean this_present_timeType = true;
      boolean that_present_timeType = true;
      if (this_present_timeType || that_present_timeType) {
        if (!(this_present_timeType && that_present_timeType))
          return false;
        if (this.timeType != that.timeType)
          return false;
      }

      boolean this_present_time = true && this.isSetTime();
      boolean that_present_time = true && that.isSetTime();
      if (this_present_time || that_present_time) {
        if (!(this_present_time && that_present_time))
          return false;
        if (!this.time.equals(that.time))
          return false;
      }

      boolean this_present_seParam = true && this.isSetSeParam();
      boolean that_present_seParam = true && that.isSetSeParam();
      if (this_present_seParam || that_present_seParam) {
        if (!(this_present_seParam && that_present_seParam))
          return false;
        if (!this.seParam.equals(that.seParam))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getTotalSearchCount_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetWebId()).compareTo(other.isSetWebId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetWebId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.webId, other.webId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTimeType()).compareTo(other.isSetTimeType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTimeType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timeType, other.timeType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTime()).compareTo(other.isSetTime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTime()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.time, other.time);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSeParam()).compareTo(other.isSetSeParam());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSeParam()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.seParam, other.seParam);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getTotalSearchCount_args(");
      boolean first = true;

      sb.append("webId:");
      sb.append(this.webId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("timeType:");
      sb.append(this.timeType);
      first = false;
      if (!first) sb.append(", ");
      sb.append("time:");
      if (this.time == null) {
        sb.append("null");
      } else {
        sb.append(this.time);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("seParam:");
      if (this.seParam == null) {
        sb.append("null");
      } else {
        sb.append(this.seParam);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (seParam != null) {
        seParam.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getTotalSearchCount_argsStandardSchemeFactory implements SchemeFactory {
      public getTotalSearchCount_argsStandardScheme getScheme() {
        return new getTotalSearchCount_argsStandardScheme();
      }
    }

    private static class getTotalSearchCount_argsStandardScheme extends StandardScheme<getTotalSearchCount_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getTotalSearchCount_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // WEB_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.webId = iprot.readI32();
                struct.setWebIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TIME_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.timeType = iprot.readI32();
                struct.setTimeTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // TIME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.time = iprot.readString();
                struct.setTimeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // SE_PARAM
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.seParam = new SearchEngineParam();
                struct.seParam.read(iprot);
                struct.setSeParamIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getTotalSearchCount_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(WEB_ID_FIELD_DESC);
        oprot.writeI32(struct.webId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(TIME_TYPE_FIELD_DESC);
        oprot.writeI32(struct.timeType);
        oprot.writeFieldEnd();
        if (struct.time != null) {
          oprot.writeFieldBegin(TIME_FIELD_DESC);
          oprot.writeString(struct.time);
          oprot.writeFieldEnd();
        }
        if (struct.seParam != null) {
          oprot.writeFieldBegin(SE_PARAM_FIELD_DESC);
          struct.seParam.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getTotalSearchCount_argsTupleSchemeFactory implements SchemeFactory {
      public getTotalSearchCount_argsTupleScheme getScheme() {
        return new getTotalSearchCount_argsTupleScheme();
      }
    }

    private static class getTotalSearchCount_argsTupleScheme extends TupleScheme<getTotalSearchCount_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getTotalSearchCount_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetWebId()) {
          optionals.set(0);
        }
        if (struct.isSetTimeType()) {
          optionals.set(1);
        }
        if (struct.isSetTime()) {
          optionals.set(2);
        }
        if (struct.isSetSeParam()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetWebId()) {
          oprot.writeI32(struct.webId);
        }
        if (struct.isSetTimeType()) {
          oprot.writeI32(struct.timeType);
        }
        if (struct.isSetTime()) {
          oprot.writeString(struct.time);
        }
        if (struct.isSetSeParam()) {
          struct.seParam.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getTotalSearchCount_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.webId = iprot.readI32();
          struct.setWebIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.timeType = iprot.readI32();
          struct.setTimeTypeIsSet(true);
        }
        if (incoming.get(2)) {
          struct.time = iprot.readString();
          struct.setTimeIsSet(true);
        }
        if (incoming.get(3)) {
          struct.seParam = new SearchEngineParam();
          struct.seParam.read(iprot);
          struct.setSeParamIsSet(true);
        }
      }
    }

  }

  public static class getTotalSearchCount_result implements org.apache.thrift.TBase<getTotalSearchCount_result, getTotalSearchCount_result._Fields>, java.io.Serializable, Cloneable, Comparable<getTotalSearchCount_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTotalSearchCount_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I64, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getTotalSearchCount_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getTotalSearchCount_resultTupleSchemeFactory());
    }

    public long success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTotalSearchCount_result.class, metaDataMap);
    }

    public getTotalSearchCount_result() {
    }

    public getTotalSearchCount_result(
      long success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTotalSearchCount_result(getTotalSearchCount_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public getTotalSearchCount_result deepCopy() {
      return new getTotalSearchCount_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public long getSuccess() {
      return this.success;
    }

    public getTotalSearchCount_result setSuccess(long success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Long.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getTotalSearchCount_result)
        return this.equals((getTotalSearchCount_result)that);
      return false;
    }

    public boolean equals(getTotalSearchCount_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getTotalSearchCount_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getTotalSearchCount_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getTotalSearchCount_resultStandardSchemeFactory implements SchemeFactory {
      public getTotalSearchCount_resultStandardScheme getScheme() {
        return new getTotalSearchCount_resultStandardScheme();
      }
    }

    private static class getTotalSearchCount_resultStandardScheme extends StandardScheme<getTotalSearchCount_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getTotalSearchCount_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.success = iprot.readI64();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getTotalSearchCount_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI64(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getTotalSearchCount_resultTupleSchemeFactory implements SchemeFactory {
      public getTotalSearchCount_resultTupleScheme getScheme() {
        return new getTotalSearchCount_resultTupleScheme();
      }
    }

    private static class getTotalSearchCount_resultTupleScheme extends TupleScheme<getTotalSearchCount_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getTotalSearchCount_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI64(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getTotalSearchCount_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI64();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getSearchStatsForDate_args implements org.apache.thrift.TBase<getSearchStatsForDate_args, getSearchStatsForDate_args._Fields>, java.io.Serializable, Cloneable, Comparable<getSearchStatsForDate_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getSearchStatsForDate_args");

    private static final org.apache.thrift.protocol.TField WEB_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("webId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField TIME_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("timeType", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField TIMES_FIELD_DESC = new org.apache.thrift.protocol.TField("times", org.apache.thrift.protocol.TType.LIST, (short)3);
    private static final org.apache.thrift.protocol.TField SE_PARAM_FIELD_DESC = new org.apache.thrift.protocol.TField("seParam", org.apache.thrift.protocol.TType.STRUCT, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getSearchStatsForDate_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getSearchStatsForDate_argsTupleSchemeFactory());
    }

    public int webId; // required
    public int timeType; // required
    public List<String> times; // required
    public SearchEngineParam seParam; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      WEB_ID((short)1, "webId"),
      TIME_TYPE((short)2, "timeType"),
      TIMES((short)3, "times"),
      SE_PARAM((short)4, "seParam");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // WEB_ID
            return WEB_ID;
          case 2: // TIME_TYPE
            return TIME_TYPE;
          case 3: // TIMES
            return TIMES;
          case 4: // SE_PARAM
            return SE_PARAM;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __WEBID_ISSET_ID = 0;
    private static final int __TIMETYPE_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.WEB_ID, new org.apache.thrift.meta_data.FieldMetaData("webId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.TIME_TYPE, new org.apache.thrift.meta_data.FieldMetaData("timeType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.TIMES, new org.apache.thrift.meta_data.FieldMetaData("times", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.SE_PARAM, new org.apache.thrift.meta_data.FieldMetaData("seParam", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SearchEngineParam.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getSearchStatsForDate_args.class, metaDataMap);
    }

    public getSearchStatsForDate_args() {
    }

    public getSearchStatsForDate_args(
      int webId,
      int timeType,
      List<String> times,
      SearchEngineParam seParam)
    {
      this();
      this.webId = webId;
      setWebIdIsSet(true);
      this.timeType = timeType;
      setTimeTypeIsSet(true);
      this.times = times;
      this.seParam = seParam;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSearchStatsForDate_args(getSearchStatsForDate_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.webId = other.webId;
      this.timeType = other.timeType;
      if (other.isSetTimes()) {
        List<String> __this__times = new ArrayList<String>(other.times);
        this.times = __this__times;
      }
      if (other.isSetSeParam()) {
        this.seParam = new SearchEngineParam(other.seParam);
      }
    }

    public getSearchStatsForDate_args deepCopy() {
      return new getSearchStatsForDate_args(this);
    }

    @Override
    public void clear() {
      setWebIdIsSet(false);
      this.webId = 0;
      setTimeTypeIsSet(false);
      this.timeType = 0;
      this.times = null;
      this.seParam = null;
    }

    public int getWebId() {
      return this.webId;
    }

    public getSearchStatsForDate_args setWebId(int webId) {
      this.webId = webId;
      setWebIdIsSet(true);
      return this;
    }

    public void unsetWebId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __WEBID_ISSET_ID);
    }

    /** Returns true if field webId is set (has been assigned a value) and false otherwise */
    public boolean isSetWebId() {
      return EncodingUtils.testBit(__isset_bitfield, __WEBID_ISSET_ID);
    }

    public void setWebIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __WEBID_ISSET_ID, value);
    }

    public int getTimeType() {
      return this.timeType;
    }

    public getSearchStatsForDate_args setTimeType(int timeType) {
      this.timeType = timeType;
      setTimeTypeIsSet(true);
      return this;
    }

    public void unsetTimeType() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TIMETYPE_ISSET_ID);
    }

    /** Returns true if field timeType is set (has been assigned a value) and false otherwise */
    public boolean isSetTimeType() {
      return EncodingUtils.testBit(__isset_bitfield, __TIMETYPE_ISSET_ID);
    }

    public void setTimeTypeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TIMETYPE_ISSET_ID, value);
    }

    public int getTimesSize() {
      return (this.times == null) ? 0 : this.times.size();
    }

    public java.util.Iterator<String> getTimesIterator() {
      return (this.times == null) ? null : this.times.iterator();
    }

    public void addToTimes(String elem) {
      if (this.times == null) {
        this.times = new ArrayList<String>();
      }
      this.times.add(elem);
    }

    public List<String> getTimes() {
      return this.times;
    }

    public getSearchStatsForDate_args setTimes(List<String> times) {
      this.times = times;
      return this;
    }

    public void unsetTimes() {
      this.times = null;
    }

    /** Returns true if field times is set (has been assigned a value) and false otherwise */
    public boolean isSetTimes() {
      return this.times != null;
    }

    public void setTimesIsSet(boolean value) {
      if (!value) {
        this.times = null;
      }
    }

    public SearchEngineParam getSeParam() {
      return this.seParam;
    }

    public getSearchStatsForDate_args setSeParam(SearchEngineParam seParam) {
      this.seParam = seParam;
      return this;
    }

    public void unsetSeParam() {
      this.seParam = null;
    }

    /** Returns true if field seParam is set (has been assigned a value) and false otherwise */
    public boolean isSetSeParam() {
      return this.seParam != null;
    }

    public void setSeParamIsSet(boolean value) {
      if (!value) {
        this.seParam = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case WEB_ID:
        if (value == null) {
          unsetWebId();
        } else {
          setWebId((Integer)value);
        }
        break;

      case TIME_TYPE:
        if (value == null) {
          unsetTimeType();
        } else {
          setTimeType((Integer)value);
        }
        break;

      case TIMES:
        if (value == null) {
          unsetTimes();
        } else {
          setTimes((List<String>)value);
        }
        break;

      case SE_PARAM:
        if (value == null) {
          unsetSeParam();
        } else {
          setSeParam((SearchEngineParam)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case WEB_ID:
        return Integer.valueOf(getWebId());

      case TIME_TYPE:
        return Integer.valueOf(getTimeType());

      case TIMES:
        return getTimes();

      case SE_PARAM:
        return getSeParam();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case WEB_ID:
        return isSetWebId();
      case TIME_TYPE:
        return isSetTimeType();
      case TIMES:
        return isSetTimes();
      case SE_PARAM:
        return isSetSeParam();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getSearchStatsForDate_args)
        return this.equals((getSearchStatsForDate_args)that);
      return false;
    }

    public boolean equals(getSearchStatsForDate_args that) {
      if (that == null)
        return false;

      boolean this_present_webId = true;
      boolean that_present_webId = true;
      if (this_present_webId || that_present_webId) {
        if (!(this_present_webId && that_present_webId))
          return false;
        if (this.webId != that.webId)
          return false;
      }

      boolean this_present_timeType = true;
      boolean that_present_timeType = true;
      if (this_present_timeType || that_present_timeType) {
        if (!(this_present_timeType && that_present_timeType))
          return false;
        if (this.timeType != that.timeType)
          return false;
      }

      boolean this_present_times = true && this.isSetTimes();
      boolean that_present_times = true && that.isSetTimes();
      if (this_present_times || that_present_times) {
        if (!(this_present_times && that_present_times))
          return false;
        if (!this.times.equals(that.times))
          return false;
      }

      boolean this_present_seParam = true && this.isSetSeParam();
      boolean that_present_seParam = true && that.isSetSeParam();
      if (this_present_seParam || that_present_seParam) {
        if (!(this_present_seParam && that_present_seParam))
          return false;
        if (!this.seParam.equals(that.seParam))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getSearchStatsForDate_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetWebId()).compareTo(other.isSetWebId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetWebId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.webId, other.webId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTimeType()).compareTo(other.isSetTimeType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTimeType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timeType, other.timeType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTimes()).compareTo(other.isSetTimes());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTimes()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.times, other.times);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSeParam()).compareTo(other.isSetSeParam());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSeParam()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.seParam, other.seParam);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getSearchStatsForDate_args(");
      boolean first = true;

      sb.append("webId:");
      sb.append(this.webId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("timeType:");
      sb.append(this.timeType);
      first = false;
      if (!first) sb.append(", ");
      sb.append("times:");
      if (this.times == null) {
        sb.append("null");
      } else {
        sb.append(this.times);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("seParam:");
      if (this.seParam == null) {
        sb.append("null");
      } else {
        sb.append(this.seParam);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (seParam != null) {
        seParam.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getSearchStatsForDate_argsStandardSchemeFactory implements SchemeFactory {
      public getSearchStatsForDate_argsStandardScheme getScheme() {
        return new getSearchStatsForDate_argsStandardScheme();
      }
    }

    private static class getSearchStatsForDate_argsStandardScheme extends StandardScheme<getSearchStatsForDate_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getSearchStatsForDate_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // WEB_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.webId = iprot.readI32();
                struct.setWebIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TIME_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.timeType = iprot.readI32();
                struct.setTimeTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // TIMES
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list26 = iprot.readListBegin();
                  struct.times = new ArrayList<String>(_list26.size);
                  for (int _i27 = 0; _i27 < _list26.size; ++_i27)
                  {
                    String _elem28;
                    _elem28 = iprot.readString();
                    struct.times.add(_elem28);
                  }
                  iprot.readListEnd();
                }
                struct.setTimesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // SE_PARAM
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.seParam = new SearchEngineParam();
                struct.seParam.read(iprot);
                struct.setSeParamIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getSearchStatsForDate_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(WEB_ID_FIELD_DESC);
        oprot.writeI32(struct.webId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(TIME_TYPE_FIELD_DESC);
        oprot.writeI32(struct.timeType);
        oprot.writeFieldEnd();
        if (struct.times != null) {
          oprot.writeFieldBegin(TIMES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.times.size()));
            for (String _iter29 : struct.times)
            {
              oprot.writeString(_iter29);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.seParam != null) {
          oprot.writeFieldBegin(SE_PARAM_FIELD_DESC);
          struct.seParam.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getSearchStatsForDate_argsTupleSchemeFactory implements SchemeFactory {
      public getSearchStatsForDate_argsTupleScheme getScheme() {
        return new getSearchStatsForDate_argsTupleScheme();
      }
    }

    private static class getSearchStatsForDate_argsTupleScheme extends TupleScheme<getSearchStatsForDate_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getSearchStatsForDate_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetWebId()) {
          optionals.set(0);
        }
        if (struct.isSetTimeType()) {
          optionals.set(1);
        }
        if (struct.isSetTimes()) {
          optionals.set(2);
        }
        if (struct.isSetSeParam()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetWebId()) {
          oprot.writeI32(struct.webId);
        }
        if (struct.isSetTimeType()) {
          oprot.writeI32(struct.timeType);
        }
        if (struct.isSetTimes()) {
          {
            oprot.writeI32(struct.times.size());
            for (String _iter30 : struct.times)
            {
              oprot.writeString(_iter30);
            }
          }
        }
        if (struct.isSetSeParam()) {
          struct.seParam.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getSearchStatsForDate_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.webId = iprot.readI32();
          struct.setWebIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.timeType = iprot.readI32();
          struct.setTimeTypeIsSet(true);
        }
        if (incoming.get(2)) {
          {
            org.apache.thrift.protocol.TList _list31 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.times = new ArrayList<String>(_list31.size);
            for (int _i32 = 0; _i32 < _list31.size; ++_i32)
            {
              String _elem33;
              _elem33 = iprot.readString();
              struct.times.add(_elem33);
            }
          }
          struct.setTimesIsSet(true);
        }
        if (incoming.get(3)) {
          struct.seParam = new SearchEngineParam();
          struct.seParam.read(iprot);
          struct.setSeParamIsSet(true);
        }
      }
    }

  }

  public static class getSearchStatsForDate_result implements org.apache.thrift.TBase<getSearchStatsForDate_result, getSearchStatsForDate_result._Fields>, java.io.Serializable, Cloneable, Comparable<getSearchStatsForDate_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getSearchStatsForDate_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getSearchStatsForDate_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getSearchStatsForDate_resultTupleSchemeFactory());
    }

    public List<SearchStats> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SearchStats.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getSearchStatsForDate_result.class, metaDataMap);
    }

    public getSearchStatsForDate_result() {
    }

    public getSearchStatsForDate_result(
      List<SearchStats> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSearchStatsForDate_result(getSearchStatsForDate_result other) {
      if (other.isSetSuccess()) {
        List<SearchStats> __this__success = new ArrayList<SearchStats>(other.success.size());
        for (SearchStats other_element : other.success) {
          __this__success.add(new SearchStats(other_element));
        }
        this.success = __this__success;
      }
    }

    public getSearchStatsForDate_result deepCopy() {
      return new getSearchStatsForDate_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<SearchStats> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(SearchStats elem) {
      if (this.success == null) {
        this.success = new ArrayList<SearchStats>();
      }
      this.success.add(elem);
    }

    public List<SearchStats> getSuccess() {
      return this.success;
    }

    public getSearchStatsForDate_result setSuccess(List<SearchStats> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<SearchStats>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getSearchStatsForDate_result)
        return this.equals((getSearchStatsForDate_result)that);
      return false;
    }

    public boolean equals(getSearchStatsForDate_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getSearchStatsForDate_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getSearchStatsForDate_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getSearchStatsForDate_resultStandardSchemeFactory implements SchemeFactory {
      public getSearchStatsForDate_resultStandardScheme getScheme() {
        return new getSearchStatsForDate_resultStandardScheme();
      }
    }

    private static class getSearchStatsForDate_resultStandardScheme extends StandardScheme<getSearchStatsForDate_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getSearchStatsForDate_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list34 = iprot.readListBegin();
                  struct.success = new ArrayList<SearchStats>(_list34.size);
                  for (int _i35 = 0; _i35 < _list34.size; ++_i35)
                  {
                    SearchStats _elem36;
                    _elem36 = new SearchStats();
                    _elem36.read(iprot);
                    struct.success.add(_elem36);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getSearchStatsForDate_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (SearchStats _iter37 : struct.success)
            {
              _iter37.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getSearchStatsForDate_resultTupleSchemeFactory implements SchemeFactory {
      public getSearchStatsForDate_resultTupleScheme getScheme() {
        return new getSearchStatsForDate_resultTupleScheme();
      }
    }

    private static class getSearchStatsForDate_resultTupleScheme extends TupleScheme<getSearchStatsForDate_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getSearchStatsForDate_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (SearchStats _iter38 : struct.success)
            {
              _iter38.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getSearchStatsForDate_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list39 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<SearchStats>(_list39.size);
            for (int _i40 = 0; _i40 < _list39.size; ++_i40)
            {
              SearchStats _elem41;
              _elem41 = new SearchStats();
              _elem41.read(iprot);
              struct.success.add(_elem41);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getSiteSearchStats_args implements org.apache.thrift.TBase<getSiteSearchStats_args, getSiteSearchStats_args._Fields>, java.io.Serializable, Cloneable, Comparable<getSiteSearchStats_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getSiteSearchStats_args");

    private static final org.apache.thrift.protocol.TField WEB_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("webId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField TIME_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("timeType", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("time", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField SE_PARAM_FIELD_DESC = new org.apache.thrift.protocol.TField("seParam", org.apache.thrift.protocol.TType.STRUCT, (short)4);
    private static final org.apache.thrift.protocol.TField RESULT_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("resultType", org.apache.thrift.protocol.TType.I32, (short)5);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getSiteSearchStats_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getSiteSearchStats_argsTupleSchemeFactory());
    }

    public int webId; // required
    public int timeType; // required
    public String time; // required
    public SearchEngineParam seParam; // required
    public int resultType; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      WEB_ID((short)1, "webId"),
      TIME_TYPE((short)2, "timeType"),
      TIME((short)3, "time"),
      SE_PARAM((short)4, "seParam"),
      RESULT_TYPE((short)5, "resultType");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // WEB_ID
            return WEB_ID;
          case 2: // TIME_TYPE
            return TIME_TYPE;
          case 3: // TIME
            return TIME;
          case 4: // SE_PARAM
            return SE_PARAM;
          case 5: // RESULT_TYPE
            return RESULT_TYPE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __WEBID_ISSET_ID = 0;
    private static final int __TIMETYPE_ISSET_ID = 1;
    private static final int __RESULTTYPE_ISSET_ID = 2;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.WEB_ID, new org.apache.thrift.meta_data.FieldMetaData("webId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.TIME_TYPE, new org.apache.thrift.meta_data.FieldMetaData("timeType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.TIME, new org.apache.thrift.meta_data.FieldMetaData("time", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SE_PARAM, new org.apache.thrift.meta_data.FieldMetaData("seParam", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SearchEngineParam.class)));
      tmpMap.put(_Fields.RESULT_TYPE, new org.apache.thrift.meta_data.FieldMetaData("resultType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getSiteSearchStats_args.class, metaDataMap);
    }

    public getSiteSearchStats_args() {
    }

    public getSiteSearchStats_args(
      int webId,
      int timeType,
      String time,
      SearchEngineParam seParam,
      int resultType)
    {
      this();
      this.webId = webId;
      setWebIdIsSet(true);
      this.timeType = timeType;
      setTimeTypeIsSet(true);
      this.time = time;
      this.seParam = seParam;
      this.resultType = resultType;
      setResultTypeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSiteSearchStats_args(getSiteSearchStats_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.webId = other.webId;
      this.timeType = other.timeType;
      if (other.isSetTime()) {
        this.time = other.time;
      }
      if (other.isSetSeParam()) {
        this.seParam = new SearchEngineParam(other.seParam);
      }
      this.resultType = other.resultType;
    }

    public getSiteSearchStats_args deepCopy() {
      return new getSiteSearchStats_args(this);
    }

    @Override
    public void clear() {
      setWebIdIsSet(false);
      this.webId = 0;
      setTimeTypeIsSet(false);
      this.timeType = 0;
      this.time = null;
      this.seParam = null;
      setResultTypeIsSet(false);
      this.resultType = 0;
    }

    public int getWebId() {
      return this.webId;
    }

    public getSiteSearchStats_args setWebId(int webId) {
      this.webId = webId;
      setWebIdIsSet(true);
      return this;
    }

    public void unsetWebId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __WEBID_ISSET_ID);
    }

    /** Returns true if field webId is set (has been assigned a value) and false otherwise */
    public boolean isSetWebId() {
      return EncodingUtils.testBit(__isset_bitfield, __WEBID_ISSET_ID);
    }

    public void setWebIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __WEBID_ISSET_ID, value);
    }

    public int getTimeType() {
      return this.timeType;
    }

    public getSiteSearchStats_args setTimeType(int timeType) {
      this.timeType = timeType;
      setTimeTypeIsSet(true);
      return this;
    }

    public void unsetTimeType() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TIMETYPE_ISSET_ID);
    }

    /** Returns true if field timeType is set (has been assigned a value) and false otherwise */
    public boolean isSetTimeType() {
      return EncodingUtils.testBit(__isset_bitfield, __TIMETYPE_ISSET_ID);
    }

    public void setTimeTypeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TIMETYPE_ISSET_ID, value);
    }

    public String getTime() {
      return this.time;
    }

    public getSiteSearchStats_args setTime(String time) {
      this.time = time;
      return this;
    }

    public void unsetTime() {
      this.time = null;
    }

    /** Returns true if field time is set (has been assigned a value) and false otherwise */
    public boolean isSetTime() {
      return this.time != null;
    }

    public void setTimeIsSet(boolean value) {
      if (!value) {
        this.time = null;
      }
    }

    public SearchEngineParam getSeParam() {
      return this.seParam;
    }

    public getSiteSearchStats_args setSeParam(SearchEngineParam seParam) {
      this.seParam = seParam;
      return this;
    }

    public void unsetSeParam() {
      this.seParam = null;
    }

    /** Returns true if field seParam is set (has been assigned a value) and false otherwise */
    public boolean isSetSeParam() {
      return this.seParam != null;
    }

    public void setSeParamIsSet(boolean value) {
      if (!value) {
        this.seParam = null;
      }
    }

    public int getResultType() {
      return this.resultType;
    }

    public getSiteSearchStats_args setResultType(int resultType) {
      this.resultType = resultType;
      setResultTypeIsSet(true);
      return this;
    }

    public void unsetResultType() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RESULTTYPE_ISSET_ID);
    }

    /** Returns true if field resultType is set (has been assigned a value) and false otherwise */
    public boolean isSetResultType() {
      return EncodingUtils.testBit(__isset_bitfield, __RESULTTYPE_ISSET_ID);
    }

    public void setResultTypeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RESULTTYPE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case WEB_ID:
        if (value == null) {
          unsetWebId();
        } else {
          setWebId((Integer)value);
        }
        break;

      case TIME_TYPE:
        if (value == null) {
          unsetTimeType();
        } else {
          setTimeType((Integer)value);
        }
        break;

      case TIME:
        if (value == null) {
          unsetTime();
        } else {
          setTime((String)value);
        }
        break;

      case SE_PARAM:
        if (value == null) {
          unsetSeParam();
        } else {
          setSeParam((SearchEngineParam)value);
        }
        break;

      case RESULT_TYPE:
        if (value == null) {
          unsetResultType();
        } else {
          setResultType((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case WEB_ID:
        return Integer.valueOf(getWebId());

      case TIME_TYPE:
        return Integer.valueOf(getTimeType());

      case TIME:
        return getTime();

      case SE_PARAM:
        return getSeParam();

      case RESULT_TYPE:
        return Integer.valueOf(getResultType());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case WEB_ID:
        return isSetWebId();
      case TIME_TYPE:
        return isSetTimeType();
      case TIME:
        return isSetTime();
      case SE_PARAM:
        return isSetSeParam();
      case RESULT_TYPE:
        return isSetResultType();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getSiteSearchStats_args)
        return this.equals((getSiteSearchStats_args)that);
      return false;
    }

    public boolean equals(getSiteSearchStats_args that) {
      if (that == null)
        return false;

      boolean this_present_webId = true;
      boolean that_present_webId = true;
      if (this_present_webId || that_present_webId) {
        if (!(this_present_webId && that_present_webId))
          return false;
        if (this.webId != that.webId)
          return false;
      }

      boolean this_present_timeType = true;
      boolean that_present_timeType = true;
      if (this_present_timeType || that_present_timeType) {
        if (!(this_present_timeType && that_present_timeType))
          return false;
        if (this.timeType != that.timeType)
          return false;
      }

      boolean this_present_time = true && this.isSetTime();
      boolean that_present_time = true && that.isSetTime();
      if (this_present_time || that_present_time) {
        if (!(this_present_time && that_present_time))
          return false;
        if (!this.time.equals(that.time))
          return false;
      }

      boolean this_present_seParam = true && this.isSetSeParam();
      boolean that_present_seParam = true && that.isSetSeParam();
      if (this_present_seParam || that_present_seParam) {
        if (!(this_present_seParam && that_present_seParam))
          return false;
        if (!this.seParam.equals(that.seParam))
          return false;
      }

      boolean this_present_resultType = true;
      boolean that_present_resultType = true;
      if (this_present_resultType || that_present_resultType) {
        if (!(this_present_resultType && that_present_resultType))
          return false;
        if (this.resultType != that.resultType)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getSiteSearchStats_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetWebId()).compareTo(other.isSetWebId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetWebId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.webId, other.webId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTimeType()).compareTo(other.isSetTimeType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTimeType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timeType, other.timeType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTime()).compareTo(other.isSetTime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTime()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.time, other.time);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSeParam()).compareTo(other.isSetSeParam());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSeParam()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.seParam, other.seParam);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetResultType()).compareTo(other.isSetResultType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetResultType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.resultType, other.resultType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getSiteSearchStats_args(");
      boolean first = true;

      sb.append("webId:");
      sb.append(this.webId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("timeType:");
      sb.append(this.timeType);
      first = false;
      if (!first) sb.append(", ");
      sb.append("time:");
      if (this.time == null) {
        sb.append("null");
      } else {
        sb.append(this.time);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("seParam:");
      if (this.seParam == null) {
        sb.append("null");
      } else {
        sb.append(this.seParam);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("resultType:");
      sb.append(this.resultType);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (seParam != null) {
        seParam.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getSiteSearchStats_argsStandardSchemeFactory implements SchemeFactory {
      public getSiteSearchStats_argsStandardScheme getScheme() {
        return new getSiteSearchStats_argsStandardScheme();
      }
    }

    private static class getSiteSearchStats_argsStandardScheme extends StandardScheme<getSiteSearchStats_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getSiteSearchStats_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // WEB_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.webId = iprot.readI32();
                struct.setWebIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TIME_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.timeType = iprot.readI32();
                struct.setTimeTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // TIME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.time = iprot.readString();
                struct.setTimeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // SE_PARAM
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.seParam = new SearchEngineParam();
                struct.seParam.read(iprot);
                struct.setSeParamIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // RESULT_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.resultType = iprot.readI32();
                struct.setResultTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getSiteSearchStats_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(WEB_ID_FIELD_DESC);
        oprot.writeI32(struct.webId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(TIME_TYPE_FIELD_DESC);
        oprot.writeI32(struct.timeType);
        oprot.writeFieldEnd();
        if (struct.time != null) {
          oprot.writeFieldBegin(TIME_FIELD_DESC);
          oprot.writeString(struct.time);
          oprot.writeFieldEnd();
        }
        if (struct.seParam != null) {
          oprot.writeFieldBegin(SE_PARAM_FIELD_DESC);
          struct.seParam.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(RESULT_TYPE_FIELD_DESC);
        oprot.writeI32(struct.resultType);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getSiteSearchStats_argsTupleSchemeFactory implements SchemeFactory {
      public getSiteSearchStats_argsTupleScheme getScheme() {
        return new getSiteSearchStats_argsTupleScheme();
      }
    }

    private static class getSiteSearchStats_argsTupleScheme extends TupleScheme<getSiteSearchStats_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getSiteSearchStats_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetWebId()) {
          optionals.set(0);
        }
        if (struct.isSetTimeType()) {
          optionals.set(1);
        }
        if (struct.isSetTime()) {
          optionals.set(2);
        }
        if (struct.isSetSeParam()) {
          optionals.set(3);
        }
        if (struct.isSetResultType()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetWebId()) {
          oprot.writeI32(struct.webId);
        }
        if (struct.isSetTimeType()) {
          oprot.writeI32(struct.timeType);
        }
        if (struct.isSetTime()) {
          oprot.writeString(struct.time);
        }
        if (struct.isSetSeParam()) {
          struct.seParam.write(oprot);
        }
        if (struct.isSetResultType()) {
          oprot.writeI32(struct.resultType);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getSiteSearchStats_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.webId = iprot.readI32();
          struct.setWebIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.timeType = iprot.readI32();
          struct.setTimeTypeIsSet(true);
        }
        if (incoming.get(2)) {
          struct.time = iprot.readString();
          struct.setTimeIsSet(true);
        }
        if (incoming.get(3)) {
          struct.seParam = new SearchEngineParam();
          struct.seParam.read(iprot);
          struct.setSeParamIsSet(true);
        }
        if (incoming.get(4)) {
          struct.resultType = iprot.readI32();
          struct.setResultTypeIsSet(true);
        }
      }
    }

  }

  public static class getSiteSearchStats_result implements org.apache.thrift.TBase<getSiteSearchStats_result, getSiteSearchStats_result._Fields>, java.io.Serializable, Cloneable, Comparable<getSiteSearchStats_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getSiteSearchStats_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getSiteSearchStats_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getSiteSearchStats_resultTupleSchemeFactory());
    }

    public List<SearchStats> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SearchStats.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getSiteSearchStats_result.class, metaDataMap);
    }

    public getSiteSearchStats_result() {
    }

    public getSiteSearchStats_result(
      List<SearchStats> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSiteSearchStats_result(getSiteSearchStats_result other) {
      if (other.isSetSuccess()) {
        List<SearchStats> __this__success = new ArrayList<SearchStats>(other.success.size());
        for (SearchStats other_element : other.success) {
          __this__success.add(new SearchStats(other_element));
        }
        this.success = __this__success;
      }
    }

    public getSiteSearchStats_result deepCopy() {
      return new getSiteSearchStats_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<SearchStats> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(SearchStats elem) {
      if (this.success == null) {
        this.success = new ArrayList<SearchStats>();
      }
      this.success.add(elem);
    }

    public List<SearchStats> getSuccess() {
      return this.success;
    }

    public getSiteSearchStats_result setSuccess(List<SearchStats> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<SearchStats>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getSiteSearchStats_result)
        return this.equals((getSiteSearchStats_result)that);
      return false;
    }

    public boolean equals(getSiteSearchStats_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getSiteSearchStats_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getSiteSearchStats_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getSiteSearchStats_resultStandardSchemeFactory implements SchemeFactory {
      public getSiteSearchStats_resultStandardScheme getScheme() {
        return new getSiteSearchStats_resultStandardScheme();
      }
    }

    private static class getSiteSearchStats_resultStandardScheme extends StandardScheme<getSiteSearchStats_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getSiteSearchStats_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list42 = iprot.readListBegin();
                  struct.success = new ArrayList<SearchStats>(_list42.size);
                  for (int _i43 = 0; _i43 < _list42.size; ++_i43)
                  {
                    SearchStats _elem44;
                    _elem44 = new SearchStats();
                    _elem44.read(iprot);
                    struct.success.add(_elem44);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getSiteSearchStats_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (SearchStats _iter45 : struct.success)
            {
              _iter45.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getSiteSearchStats_resultTupleSchemeFactory implements SchemeFactory {
      public getSiteSearchStats_resultTupleScheme getScheme() {
        return new getSiteSearchStats_resultTupleScheme();
      }
    }

    private static class getSiteSearchStats_resultTupleScheme extends TupleScheme<getSiteSearchStats_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getSiteSearchStats_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (SearchStats _iter46 : struct.success)
            {
              _iter46.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getSiteSearchStats_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list47 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<SearchStats>(_list47.size);
            for (int _i48 = 0; _i48 < _list47.size; ++_i48)
            {
              SearchStats _elem49;
              _elem49 = new SearchStats();
              _elem49.read(iprot);
              struct.success.add(_elem49);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getSearchPageStats_args implements org.apache.thrift.TBase<getSearchPageStats_args, getSearchPageStats_args._Fields>, java.io.Serializable, Cloneable, Comparable<getSearchPageStats_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getSearchPageStats_args");

    private static final org.apache.thrift.protocol.TField WEB_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("webId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField TIME_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("timeType", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("time", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField SE_PARAM_FIELD_DESC = new org.apache.thrift.protocol.TField("seParam", org.apache.thrift.protocol.TType.STRUCT, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getSearchPageStats_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getSearchPageStats_argsTupleSchemeFactory());
    }

    public int webId; // required
    public int timeType; // required
    public String time; // required
    public SearchEngineParam seParam; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      WEB_ID((short)1, "webId"),
      TIME_TYPE((short)2, "timeType"),
      TIME((short)3, "time"),
      SE_PARAM((short)4, "seParam");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // WEB_ID
            return WEB_ID;
          case 2: // TIME_TYPE
            return TIME_TYPE;
          case 3: // TIME
            return TIME;
          case 4: // SE_PARAM
            return SE_PARAM;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __WEBID_ISSET_ID = 0;
    private static final int __TIMETYPE_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.WEB_ID, new org.apache.thrift.meta_data.FieldMetaData("webId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.TIME_TYPE, new org.apache.thrift.meta_data.FieldMetaData("timeType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.TIME, new org.apache.thrift.meta_data.FieldMetaData("time", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SE_PARAM, new org.apache.thrift.meta_data.FieldMetaData("seParam", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SearchEngineParam.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getSearchPageStats_args.class, metaDataMap);
    }

    public getSearchPageStats_args() {
    }

    public getSearchPageStats_args(
      int webId,
      int timeType,
      String time,
      SearchEngineParam seParam)
    {
      this();
      this.webId = webId;
      setWebIdIsSet(true);
      this.timeType = timeType;
      setTimeTypeIsSet(true);
      this.time = time;
      this.seParam = seParam;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSearchPageStats_args(getSearchPageStats_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.webId = other.webId;
      this.timeType = other.timeType;
      if (other.isSetTime()) {
        this.time = other.time;
      }
      if (other.isSetSeParam()) {
        this.seParam = new SearchEngineParam(other.seParam);
      }
    }

    public getSearchPageStats_args deepCopy() {
      return new getSearchPageStats_args(this);
    }

    @Override
    public void clear() {
      setWebIdIsSet(false);
      this.webId = 0;
      setTimeTypeIsSet(false);
      this.timeType = 0;
      this.time = null;
      this.seParam = null;
    }

    public int getWebId() {
      return this.webId;
    }

    public getSearchPageStats_args setWebId(int webId) {
      this.webId = webId;
      setWebIdIsSet(true);
      return this;
    }

    public void unsetWebId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __WEBID_ISSET_ID);
    }

    /** Returns true if field webId is set (has been assigned a value) and false otherwise */
    public boolean isSetWebId() {
      return EncodingUtils.testBit(__isset_bitfield, __WEBID_ISSET_ID);
    }

    public void setWebIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __WEBID_ISSET_ID, value);
    }

    public int getTimeType() {
      return this.timeType;
    }

    public getSearchPageStats_args setTimeType(int timeType) {
      this.timeType = timeType;
      setTimeTypeIsSet(true);
      return this;
    }

    public void unsetTimeType() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TIMETYPE_ISSET_ID);
    }

    /** Returns true if field timeType is set (has been assigned a value) and false otherwise */
    public boolean isSetTimeType() {
      return EncodingUtils.testBit(__isset_bitfield, __TIMETYPE_ISSET_ID);
    }

    public void setTimeTypeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TIMETYPE_ISSET_ID, value);
    }

    public String getTime() {
      return this.time;
    }

    public getSearchPageStats_args setTime(String time) {
      this.time = time;
      return this;
    }

    public void unsetTime() {
      this.time = null;
    }

    /** Returns true if field time is set (has been assigned a value) and false otherwise */
    public boolean isSetTime() {
      return this.time != null;
    }

    public void setTimeIsSet(boolean value) {
      if (!value) {
        this.time = null;
      }
    }

    public SearchEngineParam getSeParam() {
      return this.seParam;
    }

    public getSearchPageStats_args setSeParam(SearchEngineParam seParam) {
      this.seParam = seParam;
      return this;
    }

    public void unsetSeParam() {
      this.seParam = null;
    }

    /** Returns true if field seParam is set (has been assigned a value) and false otherwise */
    public boolean isSetSeParam() {
      return this.seParam != null;
    }

    public void setSeParamIsSet(boolean value) {
      if (!value) {
        this.seParam = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case WEB_ID:
        if (value == null) {
          unsetWebId();
        } else {
          setWebId((Integer)value);
        }
        break;

      case TIME_TYPE:
        if (value == null) {
          unsetTimeType();
        } else {
          setTimeType((Integer)value);
        }
        break;

      case TIME:
        if (value == null) {
          unsetTime();
        } else {
          setTime((String)value);
        }
        break;

      case SE_PARAM:
        if (value == null) {
          unsetSeParam();
        } else {
          setSeParam((SearchEngineParam)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case WEB_ID:
        return Integer.valueOf(getWebId());

      case TIME_TYPE:
        return Integer.valueOf(getTimeType());

      case TIME:
        return getTime();

      case SE_PARAM:
        return getSeParam();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case WEB_ID:
        return isSetWebId();
      case TIME_TYPE:
        return isSetTimeType();
      case TIME:
        return isSetTime();
      case SE_PARAM:
        return isSetSeParam();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getSearchPageStats_args)
        return this.equals((getSearchPageStats_args)that);
      return false;
    }

    public boolean equals(getSearchPageStats_args that) {
      if (that == null)
        return false;

      boolean this_present_webId = true;
      boolean that_present_webId = true;
      if (this_present_webId || that_present_webId) {
        if (!(this_present_webId && that_present_webId))
          return false;
        if (this.webId != that.webId)
          return false;
      }

      boolean this_present_timeType = true;
      boolean that_present_timeType = true;
      if (this_present_timeType || that_present_timeType) {
        if (!(this_present_timeType && that_present_timeType))
          return false;
        if (this.timeType != that.timeType)
          return false;
      }

      boolean this_present_time = true && this.isSetTime();
      boolean that_present_time = true && that.isSetTime();
      if (this_present_time || that_present_time) {
        if (!(this_present_time && that_present_time))
          return false;
        if (!this.time.equals(that.time))
          return false;
      }

      boolean this_present_seParam = true && this.isSetSeParam();
      boolean that_present_seParam = true && that.isSetSeParam();
      if (this_present_seParam || that_present_seParam) {
        if (!(this_present_seParam && that_present_seParam))
          return false;
        if (!this.seParam.equals(that.seParam))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getSearchPageStats_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetWebId()).compareTo(other.isSetWebId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetWebId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.webId, other.webId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTimeType()).compareTo(other.isSetTimeType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTimeType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timeType, other.timeType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTime()).compareTo(other.isSetTime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTime()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.time, other.time);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSeParam()).compareTo(other.isSetSeParam());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSeParam()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.seParam, other.seParam);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getSearchPageStats_args(");
      boolean first = true;

      sb.append("webId:");
      sb.append(this.webId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("timeType:");
      sb.append(this.timeType);
      first = false;
      if (!first) sb.append(", ");
      sb.append("time:");
      if (this.time == null) {
        sb.append("null");
      } else {
        sb.append(this.time);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("seParam:");
      if (this.seParam == null) {
        sb.append("null");
      } else {
        sb.append(this.seParam);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (seParam != null) {
        seParam.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getSearchPageStats_argsStandardSchemeFactory implements SchemeFactory {
      public getSearchPageStats_argsStandardScheme getScheme() {
        return new getSearchPageStats_argsStandardScheme();
      }
    }

    private static class getSearchPageStats_argsStandardScheme extends StandardScheme<getSearchPageStats_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getSearchPageStats_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // WEB_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.webId = iprot.readI32();
                struct.setWebIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TIME_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.timeType = iprot.readI32();
                struct.setTimeTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // TIME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.time = iprot.readString();
                struct.setTimeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // SE_PARAM
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.seParam = new SearchEngineParam();
                struct.seParam.read(iprot);
                struct.setSeParamIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getSearchPageStats_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(WEB_ID_FIELD_DESC);
        oprot.writeI32(struct.webId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(TIME_TYPE_FIELD_DESC);
        oprot.writeI32(struct.timeType);
        oprot.writeFieldEnd();
        if (struct.time != null) {
          oprot.writeFieldBegin(TIME_FIELD_DESC);
          oprot.writeString(struct.time);
          oprot.writeFieldEnd();
        }
        if (struct.seParam != null) {
          oprot.writeFieldBegin(SE_PARAM_FIELD_DESC);
          struct.seParam.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getSearchPageStats_argsTupleSchemeFactory implements SchemeFactory {
      public getSearchPageStats_argsTupleScheme getScheme() {
        return new getSearchPageStats_argsTupleScheme();
      }
    }

    private static class getSearchPageStats_argsTupleScheme extends TupleScheme<getSearchPageStats_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getSearchPageStats_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetWebId()) {
          optionals.set(0);
        }
        if (struct.isSetTimeType()) {
          optionals.set(1);
        }
        if (struct.isSetTime()) {
          optionals.set(2);
        }
        if (struct.isSetSeParam()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetWebId()) {
          oprot.writeI32(struct.webId);
        }
        if (struct.isSetTimeType()) {
          oprot.writeI32(struct.timeType);
        }
        if (struct.isSetTime()) {
          oprot.writeString(struct.time);
        }
        if (struct.isSetSeParam()) {
          struct.seParam.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getSearchPageStats_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.webId = iprot.readI32();
          struct.setWebIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.timeType = iprot.readI32();
          struct.setTimeTypeIsSet(true);
        }
        if (incoming.get(2)) {
          struct.time = iprot.readString();
          struct.setTimeIsSet(true);
        }
        if (incoming.get(3)) {
          struct.seParam = new SearchEngineParam();
          struct.seParam.read(iprot);
          struct.setSeParamIsSet(true);
        }
      }
    }

  }

  public static class getSearchPageStats_result implements org.apache.thrift.TBase<getSearchPageStats_result, getSearchPageStats_result._Fields>, java.io.Serializable, Cloneable, Comparable<getSearchPageStats_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getSearchPageStats_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getSearchPageStats_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getSearchPageStats_resultTupleSchemeFactory());
    }

    public List<SearchStats> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SearchStats.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getSearchPageStats_result.class, metaDataMap);
    }

    public getSearchPageStats_result() {
    }

    public getSearchPageStats_result(
      List<SearchStats> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSearchPageStats_result(getSearchPageStats_result other) {
      if (other.isSetSuccess()) {
        List<SearchStats> __this__success = new ArrayList<SearchStats>(other.success.size());
        for (SearchStats other_element : other.success) {
          __this__success.add(new SearchStats(other_element));
        }
        this.success = __this__success;
      }
    }

    public getSearchPageStats_result deepCopy() {
      return new getSearchPageStats_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<SearchStats> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(SearchStats elem) {
      if (this.success == null) {
        this.success = new ArrayList<SearchStats>();
      }
      this.success.add(elem);
    }

    public List<SearchStats> getSuccess() {
      return this.success;
    }

    public getSearchPageStats_result setSuccess(List<SearchStats> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<SearchStats>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getSearchPageStats_result)
        return this.equals((getSearchPageStats_result)that);
      return false;
    }

    public boolean equals(getSearchPageStats_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getSearchPageStats_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getSearchPageStats_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getSearchPageStats_resultStandardSchemeFactory implements SchemeFactory {
      public getSearchPageStats_resultStandardScheme getScheme() {
        return new getSearchPageStats_resultStandardScheme();
      }
    }

    private static class getSearchPageStats_resultStandardScheme extends StandardScheme<getSearchPageStats_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getSearchPageStats_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list50 = iprot.readListBegin();
                  struct.success = new ArrayList<SearchStats>(_list50.size);
                  for (int _i51 = 0; _i51 < _list50.size; ++_i51)
                  {
                    SearchStats _elem52;
                    _elem52 = new SearchStats();
                    _elem52.read(iprot);
                    struct.success.add(_elem52);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getSearchPageStats_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (SearchStats _iter53 : struct.success)
            {
              _iter53.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getSearchPageStats_resultTupleSchemeFactory implements SchemeFactory {
      public getSearchPageStats_resultTupleScheme getScheme() {
        return new getSearchPageStats_resultTupleScheme();
      }
    }

    private static class getSearchPageStats_resultTupleScheme extends TupleScheme<getSearchPageStats_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getSearchPageStats_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (SearchStats _iter54 : struct.success)
            {
              _iter54.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getSearchPageStats_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list55 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<SearchStats>(_list55.size);
            for (int _i56 = 0; _i56 < _list55.size; ++_i56)
            {
              SearchStats _elem57;
              _elem57 = new SearchStats();
              _elem57.read(iprot);
              struct.success.add(_elem57);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getSearchValueStats_args implements org.apache.thrift.TBase<getSearchValueStats_args, getSearchValueStats_args._Fields>, java.io.Serializable, Cloneable, Comparable<getSearchValueStats_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getSearchValueStats_args");

    private static final org.apache.thrift.protocol.TField WEB_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("webId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField TIME_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("timeType", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("time", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField SE_PARAM_FIELD_DESC = new org.apache.thrift.protocol.TField("seParam", org.apache.thrift.protocol.TType.STRUCT, (short)4);
    private static final org.apache.thrift.protocol.TField CONDITION_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("conditionType", org.apache.thrift.protocol.TType.I32, (short)5);
    private static final org.apache.thrift.protocol.TField START_INDEX_FIELD_DESC = new org.apache.thrift.protocol.TField("startIndex", org.apache.thrift.protocol.TType.I32, (short)6);
    private static final org.apache.thrift.protocol.TField OFFSET_FIELD_DESC = new org.apache.thrift.protocol.TField("offset", org.apache.thrift.protocol.TType.I32, (short)7);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getSearchValueStats_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getSearchValueStats_argsTupleSchemeFactory());
    }

    public int webId; // required
    public int timeType; // required
    public String time; // required
    public SearchEngineParam seParam; // required
    public int conditionType; // required
    public int startIndex; // required
    public int offset; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      WEB_ID((short)1, "webId"),
      TIME_TYPE((short)2, "timeType"),
      TIME((short)3, "time"),
      SE_PARAM((short)4, "seParam"),
      CONDITION_TYPE((short)5, "conditionType"),
      START_INDEX((short)6, "startIndex"),
      OFFSET((short)7, "offset");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // WEB_ID
            return WEB_ID;
          case 2: // TIME_TYPE
            return TIME_TYPE;
          case 3: // TIME
            return TIME;
          case 4: // SE_PARAM
            return SE_PARAM;
          case 5: // CONDITION_TYPE
            return CONDITION_TYPE;
          case 6: // START_INDEX
            return START_INDEX;
          case 7: // OFFSET
            return OFFSET;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __WEBID_ISSET_ID = 0;
    private static final int __TIMETYPE_ISSET_ID = 1;
    private static final int __CONDITIONTYPE_ISSET_ID = 2;
    private static final int __STARTINDEX_ISSET_ID = 3;
    private static final int __OFFSET_ISSET_ID = 4;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.WEB_ID, new org.apache.thrift.meta_data.FieldMetaData("webId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.TIME_TYPE, new org.apache.thrift.meta_data.FieldMetaData("timeType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.TIME, new org.apache.thrift.meta_data.FieldMetaData("time", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SE_PARAM, new org.apache.thrift.meta_data.FieldMetaData("seParam", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SearchEngineParam.class)));
      tmpMap.put(_Fields.CONDITION_TYPE, new org.apache.thrift.meta_data.FieldMetaData("conditionType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.START_INDEX, new org.apache.thrift.meta_data.FieldMetaData("startIndex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.OFFSET, new org.apache.thrift.meta_data.FieldMetaData("offset", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getSearchValueStats_args.class, metaDataMap);
    }

    public getSearchValueStats_args() {
    }

    public getSearchValueStats_args(
      int webId,
      int timeType,
      String time,
      SearchEngineParam seParam,
      int conditionType,
      int startIndex,
      int offset)
    {
      this();
      this.webId = webId;
      setWebIdIsSet(true);
      this.timeType = timeType;
      setTimeTypeIsSet(true);
      this.time = time;
      this.seParam = seParam;
      this.conditionType = conditionType;
      setConditionTypeIsSet(true);
      this.startIndex = startIndex;
      setStartIndexIsSet(true);
      this.offset = offset;
      setOffsetIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSearchValueStats_args(getSearchValueStats_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.webId = other.webId;
      this.timeType = other.timeType;
      if (other.isSetTime()) {
        this.time = other.time;
      }
      if (other.isSetSeParam()) {
        this.seParam = new SearchEngineParam(other.seParam);
      }
      this.conditionType = other.conditionType;
      this.startIndex = other.startIndex;
      this.offset = other.offset;
    }

    public getSearchValueStats_args deepCopy() {
      return new getSearchValueStats_args(this);
    }

    @Override
    public void clear() {
      setWebIdIsSet(false);
      this.webId = 0;
      setTimeTypeIsSet(false);
      this.timeType = 0;
      this.time = null;
      this.seParam = null;
      setConditionTypeIsSet(false);
      this.conditionType = 0;
      setStartIndexIsSet(false);
      this.startIndex = 0;
      setOffsetIsSet(false);
      this.offset = 0;
    }

    public int getWebId() {
      return this.webId;
    }

    public getSearchValueStats_args setWebId(int webId) {
      this.webId = webId;
      setWebIdIsSet(true);
      return this;
    }

    public void unsetWebId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __WEBID_ISSET_ID);
    }

    /** Returns true if field webId is set (has been assigned a value) and false otherwise */
    public boolean isSetWebId() {
      return EncodingUtils.testBit(__isset_bitfield, __WEBID_ISSET_ID);
    }

    public void setWebIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __WEBID_ISSET_ID, value);
    }

    public int getTimeType() {
      return this.timeType;
    }

    public getSearchValueStats_args setTimeType(int timeType) {
      this.timeType = timeType;
      setTimeTypeIsSet(true);
      return this;
    }

    public void unsetTimeType() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TIMETYPE_ISSET_ID);
    }

    /** Returns true if field timeType is set (has been assigned a value) and false otherwise */
    public boolean isSetTimeType() {
      return EncodingUtils.testBit(__isset_bitfield, __TIMETYPE_ISSET_ID);
    }

    public void setTimeTypeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TIMETYPE_ISSET_ID, value);
    }

    public String getTime() {
      return this.time;
    }

    public getSearchValueStats_args setTime(String time) {
      this.time = time;
      return this;
    }

    public void unsetTime() {
      this.time = null;
    }

    /** Returns true if field time is set (has been assigned a value) and false otherwise */
    public boolean isSetTime() {
      return this.time != null;
    }

    public void setTimeIsSet(boolean value) {
      if (!value) {
        this.time = null;
      }
    }

    public SearchEngineParam getSeParam() {
      return this.seParam;
    }

    public getSearchValueStats_args setSeParam(SearchEngineParam seParam) {
      this.seParam = seParam;
      return this;
    }

    public void unsetSeParam() {
      this.seParam = null;
    }

    /** Returns true if field seParam is set (has been assigned a value) and false otherwise */
    public boolean isSetSeParam() {
      return this.seParam != null;
    }

    public void setSeParamIsSet(boolean value) {
      if (!value) {
        this.seParam = null;
      }
    }

    public int getConditionType() {
      return this.conditionType;
    }

    public getSearchValueStats_args setConditionType(int conditionType) {
      this.conditionType = conditionType;
      setConditionTypeIsSet(true);
      return this;
    }

    public void unsetConditionType() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CONDITIONTYPE_ISSET_ID);
    }

    /** Returns true if field conditionType is set (has been assigned a value) and false otherwise */
    public boolean isSetConditionType() {
      return EncodingUtils.testBit(__isset_bitfield, __CONDITIONTYPE_ISSET_ID);
    }

    public void setConditionTypeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CONDITIONTYPE_ISSET_ID, value);
    }

    public int getStartIndex() {
      return this.startIndex;
    }

    public getSearchValueStats_args setStartIndex(int startIndex) {
      this.startIndex = startIndex;
      setStartIndexIsSet(true);
      return this;
    }

    public void unsetStartIndex() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STARTINDEX_ISSET_ID);
    }

    /** Returns true if field startIndex is set (has been assigned a value) and false otherwise */
    public boolean isSetStartIndex() {
      return EncodingUtils.testBit(__isset_bitfield, __STARTINDEX_ISSET_ID);
    }

    public void setStartIndexIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STARTINDEX_ISSET_ID, value);
    }

    public int getOffset() {
      return this.offset;
    }

    public getSearchValueStats_args setOffset(int offset) {
      this.offset = offset;
      setOffsetIsSet(true);
      return this;
    }

    public void unsetOffset() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OFFSET_ISSET_ID);
    }

    /** Returns true if field offset is set (has been assigned a value) and false otherwise */
    public boolean isSetOffset() {
      return EncodingUtils.testBit(__isset_bitfield, __OFFSET_ISSET_ID);
    }

    public void setOffsetIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OFFSET_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case WEB_ID:
        if (value == null) {
          unsetWebId();
        } else {
          setWebId((Integer)value);
        }
        break;

      case TIME_TYPE:
        if (value == null) {
          unsetTimeType();
        } else {
          setTimeType((Integer)value);
        }
        break;

      case TIME:
        if (value == null) {
          unsetTime();
        } else {
          setTime((String)value);
        }
        break;

      case SE_PARAM:
        if (value == null) {
          unsetSeParam();
        } else {
          setSeParam((SearchEngineParam)value);
        }
        break;

      case CONDITION_TYPE:
        if (value == null) {
          unsetConditionType();
        } else {
          setConditionType((Integer)value);
        }
        break;

      case START_INDEX:
        if (value == null) {
          unsetStartIndex();
        } else {
          setStartIndex((Integer)value);
        }
        break;

      case OFFSET:
        if (value == null) {
          unsetOffset();
        } else {
          setOffset((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case WEB_ID:
        return Integer.valueOf(getWebId());

      case TIME_TYPE:
        return Integer.valueOf(getTimeType());

      case TIME:
        return getTime();

      case SE_PARAM:
        return getSeParam();

      case CONDITION_TYPE:
        return Integer.valueOf(getConditionType());

      case START_INDEX:
        return Integer.valueOf(getStartIndex());

      case OFFSET:
        return Integer.valueOf(getOffset());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case WEB_ID:
        return isSetWebId();
      case TIME_TYPE:
        return isSetTimeType();
      case TIME:
        return isSetTime();
      case SE_PARAM:
        return isSetSeParam();
      case CONDITION_TYPE:
        return isSetConditionType();
      case START_INDEX:
        return isSetStartIndex();
      case OFFSET:
        return isSetOffset();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getSearchValueStats_args)
        return this.equals((getSearchValueStats_args)that);
      return false;
    }

    public boolean equals(getSearchValueStats_args that) {
      if (that == null)
        return false;

      boolean this_present_webId = true;
      boolean that_present_webId = true;
      if (this_present_webId || that_present_webId) {
        if (!(this_present_webId && that_present_webId))
          return false;
        if (this.webId != that.webId)
          return false;
      }

      boolean this_present_timeType = true;
      boolean that_present_timeType = true;
      if (this_present_timeType || that_present_timeType) {
        if (!(this_present_timeType && that_present_timeType))
          return false;
        if (this.timeType != that.timeType)
          return false;
      }

      boolean this_present_time = true && this.isSetTime();
      boolean that_present_time = true && that.isSetTime();
      if (this_present_time || that_present_time) {
        if (!(this_present_time && that_present_time))
          return false;
        if (!this.time.equals(that.time))
          return false;
      }

      boolean this_present_seParam = true && this.isSetSeParam();
      boolean that_present_seParam = true && that.isSetSeParam();
      if (this_present_seParam || that_present_seParam) {
        if (!(this_present_seParam && that_present_seParam))
          return false;
        if (!this.seParam.equals(that.seParam))
          return false;
      }

      boolean this_present_conditionType = true;
      boolean that_present_conditionType = true;
      if (this_present_conditionType || that_present_conditionType) {
        if (!(this_present_conditionType && that_present_conditionType))
          return false;
        if (this.conditionType != that.conditionType)
          return false;
      }

      boolean this_present_startIndex = true;
      boolean that_present_startIndex = true;
      if (this_present_startIndex || that_present_startIndex) {
        if (!(this_present_startIndex && that_present_startIndex))
          return false;
        if (this.startIndex != that.startIndex)
          return false;
      }

      boolean this_present_offset = true;
      boolean that_present_offset = true;
      if (this_present_offset || that_present_offset) {
        if (!(this_present_offset && that_present_offset))
          return false;
        if (this.offset != that.offset)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getSearchValueStats_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetWebId()).compareTo(other.isSetWebId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetWebId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.webId, other.webId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTimeType()).compareTo(other.isSetTimeType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTimeType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timeType, other.timeType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTime()).compareTo(other.isSetTime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTime()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.time, other.time);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSeParam()).compareTo(other.isSetSeParam());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSeParam()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.seParam, other.seParam);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetConditionType()).compareTo(other.isSetConditionType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetConditionType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.conditionType, other.conditionType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStartIndex()).compareTo(other.isSetStartIndex());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStartIndex()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startIndex, other.startIndex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOffset()).compareTo(other.isSetOffset());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOffset()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.offset, other.offset);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getSearchValueStats_args(");
      boolean first = true;

      sb.append("webId:");
      sb.append(this.webId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("timeType:");
      sb.append(this.timeType);
      first = false;
      if (!first) sb.append(", ");
      sb.append("time:");
      if (this.time == null) {
        sb.append("null");
      } else {
        sb.append(this.time);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("seParam:");
      if (this.seParam == null) {
        sb.append("null");
      } else {
        sb.append(this.seParam);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("conditionType:");
      sb.append(this.conditionType);
      first = false;
      if (!first) sb.append(", ");
      sb.append("startIndex:");
      sb.append(this.startIndex);
      first = false;
      if (!first) sb.append(", ");
      sb.append("offset:");
      sb.append(this.offset);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (seParam != null) {
        seParam.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getSearchValueStats_argsStandardSchemeFactory implements SchemeFactory {
      public getSearchValueStats_argsStandardScheme getScheme() {
        return new getSearchValueStats_argsStandardScheme();
      }
    }

    private static class getSearchValueStats_argsStandardScheme extends StandardScheme<getSearchValueStats_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getSearchValueStats_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // WEB_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.webId = iprot.readI32();
                struct.setWebIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TIME_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.timeType = iprot.readI32();
                struct.setTimeTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // TIME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.time = iprot.readString();
                struct.setTimeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // SE_PARAM
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.seParam = new SearchEngineParam();
                struct.seParam.read(iprot);
                struct.setSeParamIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // CONDITION_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.conditionType = iprot.readI32();
                struct.setConditionTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // START_INDEX
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.startIndex = iprot.readI32();
                struct.setStartIndexIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 7: // OFFSET
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.offset = iprot.readI32();
                struct.setOffsetIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getSearchValueStats_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(WEB_ID_FIELD_DESC);
        oprot.writeI32(struct.webId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(TIME_TYPE_FIELD_DESC);
        oprot.writeI32(struct.timeType);
        oprot.writeFieldEnd();
        if (struct.time != null) {
          oprot.writeFieldBegin(TIME_FIELD_DESC);
          oprot.writeString(struct.time);
          oprot.writeFieldEnd();
        }
        if (struct.seParam != null) {
          oprot.writeFieldBegin(SE_PARAM_FIELD_DESC);
          struct.seParam.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(CONDITION_TYPE_FIELD_DESC);
        oprot.writeI32(struct.conditionType);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(START_INDEX_FIELD_DESC);
        oprot.writeI32(struct.startIndex);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(OFFSET_FIELD_DESC);
        oprot.writeI32(struct.offset);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getSearchValueStats_argsTupleSchemeFactory implements SchemeFactory {
      public getSearchValueStats_argsTupleScheme getScheme() {
        return new getSearchValueStats_argsTupleScheme();
      }
    }

    private static class getSearchValueStats_argsTupleScheme extends TupleScheme<getSearchValueStats_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getSearchValueStats_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetWebId()) {
          optionals.set(0);
        }
        if (struct.isSetTimeType()) {
          optionals.set(1);
        }
        if (struct.isSetTime()) {
          optionals.set(2);
        }
        if (struct.isSetSeParam()) {
          optionals.set(3);
        }
        if (struct.isSetConditionType()) {
          optionals.set(4);
        }
        if (struct.isSetStartIndex()) {
          optionals.set(5);
        }
        if (struct.isSetOffset()) {
          optionals.set(6);
        }
        oprot.writeBitSet(optionals, 7);
        if (struct.isSetWebId()) {
          oprot.writeI32(struct.webId);
        }
        if (struct.isSetTimeType()) {
          oprot.writeI32(struct.timeType);
        }
        if (struct.isSetTime()) {
          oprot.writeString(struct.time);
        }
        if (struct.isSetSeParam()) {
          struct.seParam.write(oprot);
        }
        if (struct.isSetConditionType()) {
          oprot.writeI32(struct.conditionType);
        }
        if (struct.isSetStartIndex()) {
          oprot.writeI32(struct.startIndex);
        }
        if (struct.isSetOffset()) {
          oprot.writeI32(struct.offset);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getSearchValueStats_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(7);
        if (incoming.get(0)) {
          struct.webId = iprot.readI32();
          struct.setWebIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.timeType = iprot.readI32();
          struct.setTimeTypeIsSet(true);
        }
        if (incoming.get(2)) {
          struct.time = iprot.readString();
          struct.setTimeIsSet(true);
        }
        if (incoming.get(3)) {
          struct.seParam = new SearchEngineParam();
          struct.seParam.read(iprot);
          struct.setSeParamIsSet(true);
        }
        if (incoming.get(4)) {
          struct.conditionType = iprot.readI32();
          struct.setConditionTypeIsSet(true);
        }
        if (incoming.get(5)) {
          struct.startIndex = iprot.readI32();
          struct.setStartIndexIsSet(true);
        }
        if (incoming.get(6)) {
          struct.offset = iprot.readI32();
          struct.setOffsetIsSet(true);
        }
      }
    }

  }

  public static class getSearchValueStats_result implements org.apache.thrift.TBase<getSearchValueStats_result, getSearchValueStats_result._Fields>, java.io.Serializable, Cloneable, Comparable<getSearchValueStats_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getSearchValueStats_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getSearchValueStats_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getSearchValueStats_resultTupleSchemeFactory());
    }

    public SearchStatsResult success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SearchStatsResult.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getSearchValueStats_result.class, metaDataMap);
    }

    public getSearchValueStats_result() {
    }

    public getSearchValueStats_result(
      SearchStatsResult success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSearchValueStats_result(getSearchValueStats_result other) {
      if (other.isSetSuccess()) {
        this.success = new SearchStatsResult(other.success);
      }
    }

    public getSearchValueStats_result deepCopy() {
      return new getSearchValueStats_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public SearchStatsResult getSuccess() {
      return this.success;
    }

    public getSearchValueStats_result setSuccess(SearchStatsResult success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((SearchStatsResult)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getSearchValueStats_result)
        return this.equals((getSearchValueStats_result)that);
      return false;
    }

    public boolean equals(getSearchValueStats_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getSearchValueStats_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getSearchValueStats_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getSearchValueStats_resultStandardSchemeFactory implements SchemeFactory {
      public getSearchValueStats_resultStandardScheme getScheme() {
        return new getSearchValueStats_resultStandardScheme();
      }
    }

    private static class getSearchValueStats_resultStandardScheme extends StandardScheme<getSearchValueStats_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getSearchValueStats_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new SearchStatsResult();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getSearchValueStats_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getSearchValueStats_resultTupleSchemeFactory implements SchemeFactory {
      public getSearchValueStats_resultTupleScheme getScheme() {
        return new getSearchValueStats_resultTupleScheme();
      }
    }

    private static class getSearchValueStats_resultTupleScheme extends TupleScheme<getSearchValueStats_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getSearchValueStats_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getSearchValueStats_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new SearchStatsResult();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getTopResponseTimeResult_args implements org.apache.thrift.TBase<getTopResponseTimeResult_args, getTopResponseTimeResult_args._Fields>, java.io.Serializable, Cloneable, Comparable<getTopResponseTimeResult_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTopResponseTimeResult_args");

    private static final org.apache.thrift.protocol.TField WEB_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("webId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField TIME_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("timeType", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("time", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField SE_PARAM_FIELD_DESC = new org.apache.thrift.protocol.TField("seParam", org.apache.thrift.protocol.TType.STRUCT, (short)4);
    private static final org.apache.thrift.protocol.TField START_INDEX_FIELD_DESC = new org.apache.thrift.protocol.TField("startIndex", org.apache.thrift.protocol.TType.I32, (short)5);
    private static final org.apache.thrift.protocol.TField OFFSET_FIELD_DESC = new org.apache.thrift.protocol.TField("offset", org.apache.thrift.protocol.TType.I32, (short)6);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getTopResponseTimeResult_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getTopResponseTimeResult_argsTupleSchemeFactory());
    }

    public int webId; // required
    public int timeType; // required
    public String time; // required
    public SearchEngineParam seParam; // required
    public int startIndex; // required
    public int offset; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      WEB_ID((short)1, "webId"),
      TIME_TYPE((short)2, "timeType"),
      TIME((short)3, "time"),
      SE_PARAM((short)4, "seParam"),
      START_INDEX((short)5, "startIndex"),
      OFFSET((short)6, "offset");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // WEB_ID
            return WEB_ID;
          case 2: // TIME_TYPE
            return TIME_TYPE;
          case 3: // TIME
            return TIME;
          case 4: // SE_PARAM
            return SE_PARAM;
          case 5: // START_INDEX
            return START_INDEX;
          case 6: // OFFSET
            return OFFSET;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __WEBID_ISSET_ID = 0;
    private static final int __TIMETYPE_ISSET_ID = 1;
    private static final int __STARTINDEX_ISSET_ID = 2;
    private static final int __OFFSET_ISSET_ID = 3;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.WEB_ID, new org.apache.thrift.meta_data.FieldMetaData("webId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.TIME_TYPE, new org.apache.thrift.meta_data.FieldMetaData("timeType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.TIME, new org.apache.thrift.meta_data.FieldMetaData("time", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SE_PARAM, new org.apache.thrift.meta_data.FieldMetaData("seParam", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SearchEngineParam.class)));
      tmpMap.put(_Fields.START_INDEX, new org.apache.thrift.meta_data.FieldMetaData("startIndex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.OFFSET, new org.apache.thrift.meta_data.FieldMetaData("offset", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTopResponseTimeResult_args.class, metaDataMap);
    }

    public getTopResponseTimeResult_args() {
    }

    public getTopResponseTimeResult_args(
      int webId,
      int timeType,
      String time,
      SearchEngineParam seParam,
      int startIndex,
      int offset)
    {
      this();
      this.webId = webId;
      setWebIdIsSet(true);
      this.timeType = timeType;
      setTimeTypeIsSet(true);
      this.time = time;
      this.seParam = seParam;
      this.startIndex = startIndex;
      setStartIndexIsSet(true);
      this.offset = offset;
      setOffsetIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTopResponseTimeResult_args(getTopResponseTimeResult_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.webId = other.webId;
      this.timeType = other.timeType;
      if (other.isSetTime()) {
        this.time = other.time;
      }
      if (other.isSetSeParam()) {
        this.seParam = new SearchEngineParam(other.seParam);
      }
      this.startIndex = other.startIndex;
      this.offset = other.offset;
    }

    public getTopResponseTimeResult_args deepCopy() {
      return new getTopResponseTimeResult_args(this);
    }

    @Override
    public void clear() {
      setWebIdIsSet(false);
      this.webId = 0;
      setTimeTypeIsSet(false);
      this.timeType = 0;
      this.time = null;
      this.seParam = null;
      setStartIndexIsSet(false);
      this.startIndex = 0;
      setOffsetIsSet(false);
      this.offset = 0;
    }

    public int getWebId() {
      return this.webId;
    }

    public getTopResponseTimeResult_args setWebId(int webId) {
      this.webId = webId;
      setWebIdIsSet(true);
      return this;
    }

    public void unsetWebId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __WEBID_ISSET_ID);
    }

    /** Returns true if field webId is set (has been assigned a value) and false otherwise */
    public boolean isSetWebId() {
      return EncodingUtils.testBit(__isset_bitfield, __WEBID_ISSET_ID);
    }

    public void setWebIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __WEBID_ISSET_ID, value);
    }

    public int getTimeType() {
      return this.timeType;
    }

    public getTopResponseTimeResult_args setTimeType(int timeType) {
      this.timeType = timeType;
      setTimeTypeIsSet(true);
      return this;
    }

    public void unsetTimeType() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TIMETYPE_ISSET_ID);
    }

    /** Returns true if field timeType is set (has been assigned a value) and false otherwise */
    public boolean isSetTimeType() {
      return EncodingUtils.testBit(__isset_bitfield, __TIMETYPE_ISSET_ID);
    }

    public void setTimeTypeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TIMETYPE_ISSET_ID, value);
    }

    public String getTime() {
      return this.time;
    }

    public getTopResponseTimeResult_args setTime(String time) {
      this.time = time;
      return this;
    }

    public void unsetTime() {
      this.time = null;
    }

    /** Returns true if field time is set (has been assigned a value) and false otherwise */
    public boolean isSetTime() {
      return this.time != null;
    }

    public void setTimeIsSet(boolean value) {
      if (!value) {
        this.time = null;
      }
    }

    public SearchEngineParam getSeParam() {
      return this.seParam;
    }

    public getTopResponseTimeResult_args setSeParam(SearchEngineParam seParam) {
      this.seParam = seParam;
      return this;
    }

    public void unsetSeParam() {
      this.seParam = null;
    }

    /** Returns true if field seParam is set (has been assigned a value) and false otherwise */
    public boolean isSetSeParam() {
      return this.seParam != null;
    }

    public void setSeParamIsSet(boolean value) {
      if (!value) {
        this.seParam = null;
      }
    }

    public int getStartIndex() {
      return this.startIndex;
    }

    public getTopResponseTimeResult_args setStartIndex(int startIndex) {
      this.startIndex = startIndex;
      setStartIndexIsSet(true);
      return this;
    }

    public void unsetStartIndex() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STARTINDEX_ISSET_ID);
    }

    /** Returns true if field startIndex is set (has been assigned a value) and false otherwise */
    public boolean isSetStartIndex() {
      return EncodingUtils.testBit(__isset_bitfield, __STARTINDEX_ISSET_ID);
    }

    public void setStartIndexIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STARTINDEX_ISSET_ID, value);
    }

    public int getOffset() {
      return this.offset;
    }

    public getTopResponseTimeResult_args setOffset(int offset) {
      this.offset = offset;
      setOffsetIsSet(true);
      return this;
    }

    public void unsetOffset() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OFFSET_ISSET_ID);
    }

    /** Returns true if field offset is set (has been assigned a value) and false otherwise */
    public boolean isSetOffset() {
      return EncodingUtils.testBit(__isset_bitfield, __OFFSET_ISSET_ID);
    }

    public void setOffsetIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OFFSET_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case WEB_ID:
        if (value == null) {
          unsetWebId();
        } else {
          setWebId((Integer)value);
        }
        break;

      case TIME_TYPE:
        if (value == null) {
          unsetTimeType();
        } else {
          setTimeType((Integer)value);
        }
        break;

      case TIME:
        if (value == null) {
          unsetTime();
        } else {
          setTime((String)value);
        }
        break;

      case SE_PARAM:
        if (value == null) {
          unsetSeParam();
        } else {
          setSeParam((SearchEngineParam)value);
        }
        break;

      case START_INDEX:
        if (value == null) {
          unsetStartIndex();
        } else {
          setStartIndex((Integer)value);
        }
        break;

      case OFFSET:
        if (value == null) {
          unsetOffset();
        } else {
          setOffset((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case WEB_ID:
        return Integer.valueOf(getWebId());

      case TIME_TYPE:
        return Integer.valueOf(getTimeType());

      case TIME:
        return getTime();

      case SE_PARAM:
        return getSeParam();

      case START_INDEX:
        return Integer.valueOf(getStartIndex());

      case OFFSET:
        return Integer.valueOf(getOffset());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case WEB_ID:
        return isSetWebId();
      case TIME_TYPE:
        return isSetTimeType();
      case TIME:
        return isSetTime();
      case SE_PARAM:
        return isSetSeParam();
      case START_INDEX:
        return isSetStartIndex();
      case OFFSET:
        return isSetOffset();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getTopResponseTimeResult_args)
        return this.equals((getTopResponseTimeResult_args)that);
      return false;
    }

    public boolean equals(getTopResponseTimeResult_args that) {
      if (that == null)
        return false;

      boolean this_present_webId = true;
      boolean that_present_webId = true;
      if (this_present_webId || that_present_webId) {
        if (!(this_present_webId && that_present_webId))
          return false;
        if (this.webId != that.webId)
          return false;
      }

      boolean this_present_timeType = true;
      boolean that_present_timeType = true;
      if (this_present_timeType || that_present_timeType) {
        if (!(this_present_timeType && that_present_timeType))
          return false;
        if (this.timeType != that.timeType)
          return false;
      }

      boolean this_present_time = true && this.isSetTime();
      boolean that_present_time = true && that.isSetTime();
      if (this_present_time || that_present_time) {
        if (!(this_present_time && that_present_time))
          return false;
        if (!this.time.equals(that.time))
          return false;
      }

      boolean this_present_seParam = true && this.isSetSeParam();
      boolean that_present_seParam = true && that.isSetSeParam();
      if (this_present_seParam || that_present_seParam) {
        if (!(this_present_seParam && that_present_seParam))
          return false;
        if (!this.seParam.equals(that.seParam))
          return false;
      }

      boolean this_present_startIndex = true;
      boolean that_present_startIndex = true;
      if (this_present_startIndex || that_present_startIndex) {
        if (!(this_present_startIndex && that_present_startIndex))
          return false;
        if (this.startIndex != that.startIndex)
          return false;
      }

      boolean this_present_offset = true;
      boolean that_present_offset = true;
      if (this_present_offset || that_present_offset) {
        if (!(this_present_offset && that_present_offset))
          return false;
        if (this.offset != that.offset)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getTopResponseTimeResult_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetWebId()).compareTo(other.isSetWebId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetWebId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.webId, other.webId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTimeType()).compareTo(other.isSetTimeType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTimeType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timeType, other.timeType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTime()).compareTo(other.isSetTime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTime()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.time, other.time);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSeParam()).compareTo(other.isSetSeParam());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSeParam()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.seParam, other.seParam);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStartIndex()).compareTo(other.isSetStartIndex());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStartIndex()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startIndex, other.startIndex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOffset()).compareTo(other.isSetOffset());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOffset()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.offset, other.offset);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getTopResponseTimeResult_args(");
      boolean first = true;

      sb.append("webId:");
      sb.append(this.webId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("timeType:");
      sb.append(this.timeType);
      first = false;
      if (!first) sb.append(", ");
      sb.append("time:");
      if (this.time == null) {
        sb.append("null");
      } else {
        sb.append(this.time);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("seParam:");
      if (this.seParam == null) {
        sb.append("null");
      } else {
        sb.append(this.seParam);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("startIndex:");
      sb.append(this.startIndex);
      first = false;
      if (!first) sb.append(", ");
      sb.append("offset:");
      sb.append(this.offset);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (seParam != null) {
        seParam.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getTopResponseTimeResult_argsStandardSchemeFactory implements SchemeFactory {
      public getTopResponseTimeResult_argsStandardScheme getScheme() {
        return new getTopResponseTimeResult_argsStandardScheme();
      }
    }

    private static class getTopResponseTimeResult_argsStandardScheme extends StandardScheme<getTopResponseTimeResult_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getTopResponseTimeResult_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // WEB_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.webId = iprot.readI32();
                struct.setWebIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TIME_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.timeType = iprot.readI32();
                struct.setTimeTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // TIME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.time = iprot.readString();
                struct.setTimeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // SE_PARAM
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.seParam = new SearchEngineParam();
                struct.seParam.read(iprot);
                struct.setSeParamIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // START_INDEX
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.startIndex = iprot.readI32();
                struct.setStartIndexIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // OFFSET
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.offset = iprot.readI32();
                struct.setOffsetIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getTopResponseTimeResult_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(WEB_ID_FIELD_DESC);
        oprot.writeI32(struct.webId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(TIME_TYPE_FIELD_DESC);
        oprot.writeI32(struct.timeType);
        oprot.writeFieldEnd();
        if (struct.time != null) {
          oprot.writeFieldBegin(TIME_FIELD_DESC);
          oprot.writeString(struct.time);
          oprot.writeFieldEnd();
        }
        if (struct.seParam != null) {
          oprot.writeFieldBegin(SE_PARAM_FIELD_DESC);
          struct.seParam.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(START_INDEX_FIELD_DESC);
        oprot.writeI32(struct.startIndex);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(OFFSET_FIELD_DESC);
        oprot.writeI32(struct.offset);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getTopResponseTimeResult_argsTupleSchemeFactory implements SchemeFactory {
      public getTopResponseTimeResult_argsTupleScheme getScheme() {
        return new getTopResponseTimeResult_argsTupleScheme();
      }
    }

    private static class getTopResponseTimeResult_argsTupleScheme extends TupleScheme<getTopResponseTimeResult_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getTopResponseTimeResult_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetWebId()) {
          optionals.set(0);
        }
        if (struct.isSetTimeType()) {
          optionals.set(1);
        }
        if (struct.isSetTime()) {
          optionals.set(2);
        }
        if (struct.isSetSeParam()) {
          optionals.set(3);
        }
        if (struct.isSetStartIndex()) {
          optionals.set(4);
        }
        if (struct.isSetOffset()) {
          optionals.set(5);
        }
        oprot.writeBitSet(optionals, 6);
        if (struct.isSetWebId()) {
          oprot.writeI32(struct.webId);
        }
        if (struct.isSetTimeType()) {
          oprot.writeI32(struct.timeType);
        }
        if (struct.isSetTime()) {
          oprot.writeString(struct.time);
        }
        if (struct.isSetSeParam()) {
          struct.seParam.write(oprot);
        }
        if (struct.isSetStartIndex()) {
          oprot.writeI32(struct.startIndex);
        }
        if (struct.isSetOffset()) {
          oprot.writeI32(struct.offset);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getTopResponseTimeResult_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(6);
        if (incoming.get(0)) {
          struct.webId = iprot.readI32();
          struct.setWebIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.timeType = iprot.readI32();
          struct.setTimeTypeIsSet(true);
        }
        if (incoming.get(2)) {
          struct.time = iprot.readString();
          struct.setTimeIsSet(true);
        }
        if (incoming.get(3)) {
          struct.seParam = new SearchEngineParam();
          struct.seParam.read(iprot);
          struct.setSeParamIsSet(true);
        }
        if (incoming.get(4)) {
          struct.startIndex = iprot.readI32();
          struct.setStartIndexIsSet(true);
        }
        if (incoming.get(5)) {
          struct.offset = iprot.readI32();
          struct.setOffsetIsSet(true);
        }
      }
    }

  }

  public static class getTopResponseTimeResult_result implements org.apache.thrift.TBase<getTopResponseTimeResult_result, getTopResponseTimeResult_result._Fields>, java.io.Serializable, Cloneable, Comparable<getTopResponseTimeResult_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTopResponseTimeResult_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getTopResponseTimeResult_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getTopResponseTimeResult_resultTupleSchemeFactory());
    }

    public TopResponseTimeResult success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TopResponseTimeResult.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTopResponseTimeResult_result.class, metaDataMap);
    }

    public getTopResponseTimeResult_result() {
    }

    public getTopResponseTimeResult_result(
      TopResponseTimeResult success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTopResponseTimeResult_result(getTopResponseTimeResult_result other) {
      if (other.isSetSuccess()) {
        this.success = new TopResponseTimeResult(other.success);
      }
    }

    public getTopResponseTimeResult_result deepCopy() {
      return new getTopResponseTimeResult_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public TopResponseTimeResult getSuccess() {
      return this.success;
    }

    public getTopResponseTimeResult_result setSuccess(TopResponseTimeResult success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TopResponseTimeResult)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getTopResponseTimeResult_result)
        return this.equals((getTopResponseTimeResult_result)that);
      return false;
    }

    public boolean equals(getTopResponseTimeResult_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getTopResponseTimeResult_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getTopResponseTimeResult_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getTopResponseTimeResult_resultStandardSchemeFactory implements SchemeFactory {
      public getTopResponseTimeResult_resultStandardScheme getScheme() {
        return new getTopResponseTimeResult_resultStandardScheme();
      }
    }

    private static class getTopResponseTimeResult_resultStandardScheme extends StandardScheme<getTopResponseTimeResult_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getTopResponseTimeResult_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new TopResponseTimeResult();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getTopResponseTimeResult_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getTopResponseTimeResult_resultTupleSchemeFactory implements SchemeFactory {
      public getTopResponseTimeResult_resultTupleScheme getScheme() {
        return new getTopResponseTimeResult_resultTupleScheme();
      }
    }

    private static class getTopResponseTimeResult_resultTupleScheme extends TupleScheme<getTopResponseTimeResult_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getTopResponseTimeResult_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getTopResponseTimeResult_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new TopResponseTimeResult();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getTopIpResult_args implements org.apache.thrift.TBase<getTopIpResult_args, getTopIpResult_args._Fields>, java.io.Serializable, Cloneable, Comparable<getTopIpResult_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTopIpResult_args");

    private static final org.apache.thrift.protocol.TField WEB_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("webId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField TIME_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("timeType", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("time", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField SE_PARAM_FIELD_DESC = new org.apache.thrift.protocol.TField("seParam", org.apache.thrift.protocol.TType.STRUCT, (short)4);
    private static final org.apache.thrift.protocol.TField START_INDEX_FIELD_DESC = new org.apache.thrift.protocol.TField("startIndex", org.apache.thrift.protocol.TType.I32, (short)5);
    private static final org.apache.thrift.protocol.TField OFFSET_FIELD_DESC = new org.apache.thrift.protocol.TField("offset", org.apache.thrift.protocol.TType.I32, (short)6);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getTopIpResult_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getTopIpResult_argsTupleSchemeFactory());
    }

    public int webId; // required
    public int timeType; // required
    public String time; // required
    public SearchEngineParam seParam; // required
    public int startIndex; // required
    public int offset; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      WEB_ID((short)1, "webId"),
      TIME_TYPE((short)2, "timeType"),
      TIME((short)3, "time"),
      SE_PARAM((short)4, "seParam"),
      START_INDEX((short)5, "startIndex"),
      OFFSET((short)6, "offset");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // WEB_ID
            return WEB_ID;
          case 2: // TIME_TYPE
            return TIME_TYPE;
          case 3: // TIME
            return TIME;
          case 4: // SE_PARAM
            return SE_PARAM;
          case 5: // START_INDEX
            return START_INDEX;
          case 6: // OFFSET
            return OFFSET;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __WEBID_ISSET_ID = 0;
    private static final int __TIMETYPE_ISSET_ID = 1;
    private static final int __STARTINDEX_ISSET_ID = 2;
    private static final int __OFFSET_ISSET_ID = 3;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.WEB_ID, new org.apache.thrift.meta_data.FieldMetaData("webId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.TIME_TYPE, new org.apache.thrift.meta_data.FieldMetaData("timeType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.TIME, new org.apache.thrift.meta_data.FieldMetaData("time", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SE_PARAM, new org.apache.thrift.meta_data.FieldMetaData("seParam", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SearchEngineParam.class)));
      tmpMap.put(_Fields.START_INDEX, new org.apache.thrift.meta_data.FieldMetaData("startIndex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.OFFSET, new org.apache.thrift.meta_data.FieldMetaData("offset", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTopIpResult_args.class, metaDataMap);
    }

    public getTopIpResult_args() {
    }

    public getTopIpResult_args(
      int webId,
      int timeType,
      String time,
      SearchEngineParam seParam,
      int startIndex,
      int offset)
    {
      this();
      this.webId = webId;
      setWebIdIsSet(true);
      this.timeType = timeType;
      setTimeTypeIsSet(true);
      this.time = time;
      this.seParam = seParam;
      this.startIndex = startIndex;
      setStartIndexIsSet(true);
      this.offset = offset;
      setOffsetIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTopIpResult_args(getTopIpResult_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.webId = other.webId;
      this.timeType = other.timeType;
      if (other.isSetTime()) {
        this.time = other.time;
      }
      if (other.isSetSeParam()) {
        this.seParam = new SearchEngineParam(other.seParam);
      }
      this.startIndex = other.startIndex;
      this.offset = other.offset;
    }

    public getTopIpResult_args deepCopy() {
      return new getTopIpResult_args(this);
    }

    @Override
    public void clear() {
      setWebIdIsSet(false);
      this.webId = 0;
      setTimeTypeIsSet(false);
      this.timeType = 0;
      this.time = null;
      this.seParam = null;
      setStartIndexIsSet(false);
      this.startIndex = 0;
      setOffsetIsSet(false);
      this.offset = 0;
    }

    public int getWebId() {
      return this.webId;
    }

    public getTopIpResult_args setWebId(int webId) {
      this.webId = webId;
      setWebIdIsSet(true);
      return this;
    }

    public void unsetWebId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __WEBID_ISSET_ID);
    }

    /** Returns true if field webId is set (has been assigned a value) and false otherwise */
    public boolean isSetWebId() {
      return EncodingUtils.testBit(__isset_bitfield, __WEBID_ISSET_ID);
    }

    public void setWebIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __WEBID_ISSET_ID, value);
    }

    public int getTimeType() {
      return this.timeType;
    }

    public getTopIpResult_args setTimeType(int timeType) {
      this.timeType = timeType;
      setTimeTypeIsSet(true);
      return this;
    }

    public void unsetTimeType() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TIMETYPE_ISSET_ID);
    }

    /** Returns true if field timeType is set (has been assigned a value) and false otherwise */
    public boolean isSetTimeType() {
      return EncodingUtils.testBit(__isset_bitfield, __TIMETYPE_ISSET_ID);
    }

    public void setTimeTypeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TIMETYPE_ISSET_ID, value);
    }

    public String getTime() {
      return this.time;
    }

    public getTopIpResult_args setTime(String time) {
      this.time = time;
      return this;
    }

    public void unsetTime() {
      this.time = null;
    }

    /** Returns true if field time is set (has been assigned a value) and false otherwise */
    public boolean isSetTime() {
      return this.time != null;
    }

    public void setTimeIsSet(boolean value) {
      if (!value) {
        this.time = null;
      }
    }

    public SearchEngineParam getSeParam() {
      return this.seParam;
    }

    public getTopIpResult_args setSeParam(SearchEngineParam seParam) {
      this.seParam = seParam;
      return this;
    }

    public void unsetSeParam() {
      this.seParam = null;
    }

    /** Returns true if field seParam is set (has been assigned a value) and false otherwise */
    public boolean isSetSeParam() {
      return this.seParam != null;
    }

    public void setSeParamIsSet(boolean value) {
      if (!value) {
        this.seParam = null;
      }
    }

    public int getStartIndex() {
      return this.startIndex;
    }

    public getTopIpResult_args setStartIndex(int startIndex) {
      this.startIndex = startIndex;
      setStartIndexIsSet(true);
      return this;
    }

    public void unsetStartIndex() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STARTINDEX_ISSET_ID);
    }

    /** Returns true if field startIndex is set (has been assigned a value) and false otherwise */
    public boolean isSetStartIndex() {
      return EncodingUtils.testBit(__isset_bitfield, __STARTINDEX_ISSET_ID);
    }

    public void setStartIndexIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STARTINDEX_ISSET_ID, value);
    }

    public int getOffset() {
      return this.offset;
    }

    public getTopIpResult_args setOffset(int offset) {
      this.offset = offset;
      setOffsetIsSet(true);
      return this;
    }

    public void unsetOffset() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OFFSET_ISSET_ID);
    }

    /** Returns true if field offset is set (has been assigned a value) and false otherwise */
    public boolean isSetOffset() {
      return EncodingUtils.testBit(__isset_bitfield, __OFFSET_ISSET_ID);
    }

    public void setOffsetIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OFFSET_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case WEB_ID:
        if (value == null) {
          unsetWebId();
        } else {
          setWebId((Integer)value);
        }
        break;

      case TIME_TYPE:
        if (value == null) {
          unsetTimeType();
        } else {
          setTimeType((Integer)value);
        }
        break;

      case TIME:
        if (value == null) {
          unsetTime();
        } else {
          setTime((String)value);
        }
        break;

      case SE_PARAM:
        if (value == null) {
          unsetSeParam();
        } else {
          setSeParam((SearchEngineParam)value);
        }
        break;

      case START_INDEX:
        if (value == null) {
          unsetStartIndex();
        } else {
          setStartIndex((Integer)value);
        }
        break;

      case OFFSET:
        if (value == null) {
          unsetOffset();
        } else {
          setOffset((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case WEB_ID:
        return Integer.valueOf(getWebId());

      case TIME_TYPE:
        return Integer.valueOf(getTimeType());

      case TIME:
        return getTime();

      case SE_PARAM:
        return getSeParam();

      case START_INDEX:
        return Integer.valueOf(getStartIndex());

      case OFFSET:
        return Integer.valueOf(getOffset());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case WEB_ID:
        return isSetWebId();
      case TIME_TYPE:
        return isSetTimeType();
      case TIME:
        return isSetTime();
      case SE_PARAM:
        return isSetSeParam();
      case START_INDEX:
        return isSetStartIndex();
      case OFFSET:
        return isSetOffset();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getTopIpResult_args)
        return this.equals((getTopIpResult_args)that);
      return false;
    }

    public boolean equals(getTopIpResult_args that) {
      if (that == null)
        return false;

      boolean this_present_webId = true;
      boolean that_present_webId = true;
      if (this_present_webId || that_present_webId) {
        if (!(this_present_webId && that_present_webId))
          return false;
        if (this.webId != that.webId)
          return false;
      }

      boolean this_present_timeType = true;
      boolean that_present_timeType = true;
      if (this_present_timeType || that_present_timeType) {
        if (!(this_present_timeType && that_present_timeType))
          return false;
        if (this.timeType != that.timeType)
          return false;
      }

      boolean this_present_time = true && this.isSetTime();
      boolean that_present_time = true && that.isSetTime();
      if (this_present_time || that_present_time) {
        if (!(this_present_time && that_present_time))
          return false;
        if (!this.time.equals(that.time))
          return false;
      }

      boolean this_present_seParam = true && this.isSetSeParam();
      boolean that_present_seParam = true && that.isSetSeParam();
      if (this_present_seParam || that_present_seParam) {
        if (!(this_present_seParam && that_present_seParam))
          return false;
        if (!this.seParam.equals(that.seParam))
          return false;
      }

      boolean this_present_startIndex = true;
      boolean that_present_startIndex = true;
      if (this_present_startIndex || that_present_startIndex) {
        if (!(this_present_startIndex && that_present_startIndex))
          return false;
        if (this.startIndex != that.startIndex)
          return false;
      }

      boolean this_present_offset = true;
      boolean that_present_offset = true;
      if (this_present_offset || that_present_offset) {
        if (!(this_present_offset && that_present_offset))
          return false;
        if (this.offset != that.offset)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getTopIpResult_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetWebId()).compareTo(other.isSetWebId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetWebId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.webId, other.webId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTimeType()).compareTo(other.isSetTimeType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTimeType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timeType, other.timeType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTime()).compareTo(other.isSetTime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTime()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.time, other.time);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSeParam()).compareTo(other.isSetSeParam());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSeParam()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.seParam, other.seParam);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStartIndex()).compareTo(other.isSetStartIndex());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStartIndex()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startIndex, other.startIndex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOffset()).compareTo(other.isSetOffset());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOffset()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.offset, other.offset);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getTopIpResult_args(");
      boolean first = true;

      sb.append("webId:");
      sb.append(this.webId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("timeType:");
      sb.append(this.timeType);
      first = false;
      if (!first) sb.append(", ");
      sb.append("time:");
      if (this.time == null) {
        sb.append("null");
      } else {
        sb.append(this.time);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("seParam:");
      if (this.seParam == null) {
        sb.append("null");
      } else {
        sb.append(this.seParam);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("startIndex:");
      sb.append(this.startIndex);
      first = false;
      if (!first) sb.append(", ");
      sb.append("offset:");
      sb.append(this.offset);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (seParam != null) {
        seParam.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getTopIpResult_argsStandardSchemeFactory implements SchemeFactory {
      public getTopIpResult_argsStandardScheme getScheme() {
        return new getTopIpResult_argsStandardScheme();
      }
    }

    private static class getTopIpResult_argsStandardScheme extends StandardScheme<getTopIpResult_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getTopIpResult_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // WEB_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.webId = iprot.readI32();
                struct.setWebIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TIME_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.timeType = iprot.readI32();
                struct.setTimeTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // TIME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.time = iprot.readString();
                struct.setTimeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // SE_PARAM
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.seParam = new SearchEngineParam();
                struct.seParam.read(iprot);
                struct.setSeParamIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // START_INDEX
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.startIndex = iprot.readI32();
                struct.setStartIndexIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // OFFSET
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.offset = iprot.readI32();
                struct.setOffsetIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getTopIpResult_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(WEB_ID_FIELD_DESC);
        oprot.writeI32(struct.webId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(TIME_TYPE_FIELD_DESC);
        oprot.writeI32(struct.timeType);
        oprot.writeFieldEnd();
        if (struct.time != null) {
          oprot.writeFieldBegin(TIME_FIELD_DESC);
          oprot.writeString(struct.time);
          oprot.writeFieldEnd();
        }
        if (struct.seParam != null) {
          oprot.writeFieldBegin(SE_PARAM_FIELD_DESC);
          struct.seParam.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(START_INDEX_FIELD_DESC);
        oprot.writeI32(struct.startIndex);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(OFFSET_FIELD_DESC);
        oprot.writeI32(struct.offset);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getTopIpResult_argsTupleSchemeFactory implements SchemeFactory {
      public getTopIpResult_argsTupleScheme getScheme() {
        return new getTopIpResult_argsTupleScheme();
      }
    }

    private static class getTopIpResult_argsTupleScheme extends TupleScheme<getTopIpResult_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getTopIpResult_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetWebId()) {
          optionals.set(0);
        }
        if (struct.isSetTimeType()) {
          optionals.set(1);
        }
        if (struct.isSetTime()) {
          optionals.set(2);
        }
        if (struct.isSetSeParam()) {
          optionals.set(3);
        }
        if (struct.isSetStartIndex()) {
          optionals.set(4);
        }
        if (struct.isSetOffset()) {
          optionals.set(5);
        }
        oprot.writeBitSet(optionals, 6);
        if (struct.isSetWebId()) {
          oprot.writeI32(struct.webId);
        }
        if (struct.isSetTimeType()) {
          oprot.writeI32(struct.timeType);
        }
        if (struct.isSetTime()) {
          oprot.writeString(struct.time);
        }
        if (struct.isSetSeParam()) {
          struct.seParam.write(oprot);
        }
        if (struct.isSetStartIndex()) {
          oprot.writeI32(struct.startIndex);
        }
        if (struct.isSetOffset()) {
          oprot.writeI32(struct.offset);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getTopIpResult_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(6);
        if (incoming.get(0)) {
          struct.webId = iprot.readI32();
          struct.setWebIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.timeType = iprot.readI32();
          struct.setTimeTypeIsSet(true);
        }
        if (incoming.get(2)) {
          struct.time = iprot.readString();
          struct.setTimeIsSet(true);
        }
        if (incoming.get(3)) {
          struct.seParam = new SearchEngineParam();
          struct.seParam.read(iprot);
          struct.setSeParamIsSet(true);
        }
        if (incoming.get(4)) {
          struct.startIndex = iprot.readI32();
          struct.setStartIndexIsSet(true);
        }
        if (incoming.get(5)) {
          struct.offset = iprot.readI32();
          struct.setOffsetIsSet(true);
        }
      }
    }

  }

  public static class getTopIpResult_result implements org.apache.thrift.TBase<getTopIpResult_result, getTopIpResult_result._Fields>, java.io.Serializable, Cloneable, Comparable<getTopIpResult_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTopIpResult_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getTopIpResult_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getTopIpResult_resultTupleSchemeFactory());
    }

    public SearchStatsResult success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SearchStatsResult.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTopIpResult_result.class, metaDataMap);
    }

    public getTopIpResult_result() {
    }

    public getTopIpResult_result(
      SearchStatsResult success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTopIpResult_result(getTopIpResult_result other) {
      if (other.isSetSuccess()) {
        this.success = new SearchStatsResult(other.success);
      }
    }

    public getTopIpResult_result deepCopy() {
      return new getTopIpResult_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public SearchStatsResult getSuccess() {
      return this.success;
    }

    public getTopIpResult_result setSuccess(SearchStatsResult success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((SearchStatsResult)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getTopIpResult_result)
        return this.equals((getTopIpResult_result)that);
      return false;
    }

    public boolean equals(getTopIpResult_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getTopIpResult_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getTopIpResult_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getTopIpResult_resultStandardSchemeFactory implements SchemeFactory {
      public getTopIpResult_resultStandardScheme getScheme() {
        return new getTopIpResult_resultStandardScheme();
      }
    }

    private static class getTopIpResult_resultStandardScheme extends StandardScheme<getTopIpResult_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getTopIpResult_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new SearchStatsResult();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getTopIpResult_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getTopIpResult_resultTupleSchemeFactory implements SchemeFactory {
      public getTopIpResult_resultTupleScheme getScheme() {
        return new getTopIpResult_resultTupleScheme();
      }
    }

    private static class getTopIpResult_resultTupleScheme extends TupleScheme<getTopIpResult_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getTopIpResult_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getTopIpResult_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new SearchStatsResult();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
